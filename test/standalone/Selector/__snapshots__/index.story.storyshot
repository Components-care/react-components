// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots Standalone/Selector Multi 1`] = `
<Memo(ComponentsCareFramework)
  defaultTheme={[Function]}
>
  <Suspense
    fallback={<Memo(Loader) />}
  >
    <Memo(CCI18nProvider)>
      <I18nextProvider
        i18n={
          I18n {
            "addResource": [Function],
            "addResourceBundle": [Function],
            "addResources": [Function],
            "format": undefined,
            "getDataByLanguage": [Function],
            "getResource": [Function],
            "getResourceBundle": [Function],
            "hasResourceBundle": [Function],
            "isInitialized": true,
            "isLanguageChangingTo": undefined,
            "language": "en",
            "languages": Array [
              "en",
            ],
            "logger": Logger {
              "debug": true,
              "logger": Object {
                "error": [Function],
                "log": [Function],
                "output": [Function],
                "type": "logger",
                "warn": [Function],
              },
              "options": Object {
                "appendNamespaceToCIMode": false,
                "appendNamespaceToMissingKey": false,
                "contextSeparator": "_",
                "debug": true,
                "defaultNS": "translation",
                "fallbackLng": Array [
                  "en",
                ],
                "fallbackNS": false,
                "initImmediate": false,
                "interpolation": Object {
                  "escapeValue": false,
                },
                "joinArrays": false,
                "keySeparator": ".",
                "load": "all",
                "missingInterpolationHandler": false,
                "missingKeyHandler": false,
                "nonExplicitSupportedLngs": true,
                "nonExplicitWhitelist": false,
                "ns": Array [],
                "nsSeparator": ":",
                "overloadTranslationOptionHandler": [Function],
                "parseMissingKeyHandler": false,
                "partialBundledLanguages": false,
                "pluralSeparator": "_",
                "postProcess": false,
                "postProcessPassResolved": false,
                "preload": false,
                "resources": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
                "returnEmptyString": true,
                "returnNull": true,
                "returnObjects": false,
                "returnedObjectHandler": false,
                "saveMissing": false,
                "saveMissingPlurals": true,
                "saveMissingTo": "fallback",
                "simplifyPluralSuffix": true,
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "updateMissing": false,
                "whitelist": false,
              },
              "prefix": "i18next:",
            },
            "modules": Object {
              "external": Array [],
              "languageDetector": [Function],
            },
            "observers": Object {
              "languageChanged": Array [
                [Function],
                [Function],
                [Function],
                [Function],
              ],
            },
            "options": Object {
              "appendNamespaceToCIMode": false,
              "appendNamespaceToMissingKey": false,
              "contextSeparator": "_",
              "debug": true,
              "defaultNS": "translation",
              "fallbackLng": Array [
                "en",
              ],
              "fallbackNS": false,
              "initImmediate": false,
              "interpolation": Object {
                "escapeValue": false,
              },
              "joinArrays": false,
              "keySeparator": ".",
              "load": "all",
              "missingInterpolationHandler": false,
              "missingKeyHandler": false,
              "nonExplicitSupportedLngs": true,
              "nonExplicitWhitelist": false,
              "ns": Array [],
              "nsSeparator": ":",
              "overloadTranslationOptionHandler": [Function],
              "parseMissingKeyHandler": false,
              "partialBundledLanguages": false,
              "pluralSeparator": "_",
              "postProcess": false,
              "postProcessPassResolved": false,
              "preload": false,
              "resources": Object {
                "de": Object {},
                "en": Object {},
                "fr": Object {},
                "ru": Object {},
                "uz": Object {},
              },
              "returnEmptyString": true,
              "returnNull": true,
              "returnObjects": false,
              "returnedObjectHandler": false,
              "saveMissing": false,
              "saveMissingPlurals": true,
              "saveMissingTo": "fallback",
              "simplifyPluralSuffix": true,
              "supportedLngs": Array [
                "de",
                "en",
                "fr",
                "ru",
                "uz",
                "cimode",
              ],
              "updateMissing": false,
              "whitelist": false,
            },
            "removeResourceBundle": [Function],
            "reportNamespaces": ReportNamespaces {
              "usedNamespaces": Object {
                "translation": true,
              },
            },
            "services": Object {
              "backendConnector": Connector {
                "backend": null,
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::backendConnector:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::backendConnector:",
                },
                "observers": Object {
                  "*": Array [
                    [Function],
                  ],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "queue": Array [],
                "services": [Circular],
                "state": Object {},
                "store": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
              },
              "interpolator": Interpolator {
                "alwaysFormat": false,
                "escape": [Function],
                "escapeValue": false,
                "format": [Function],
                "formatSeparator": ",",
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::interpolator:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::interpolator:",
                },
                "maxReplaces": 1000,
                "nestingOptionsSeparator": ",",
                "nestingPrefix": "\\\\$t\\\\(",
                "nestingRegexp": /\\\\\\$t\\\\\\(\\(\\.\\+\\?\\)\\\\\\)/g,
                "nestingSuffix": "\\\\)",
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "{{",
                "regexp": /\\{\\{\\(\\.\\+\\?\\)\\}\\}/g,
                "regexpUnescape": /\\{\\{-\\(\\.\\+\\?\\)\\}\\}/g,
                "suffix": "}}",
                "unescapePrefix": "-",
                "unescapeSuffix": "",
                "useRawValueToEscape": false,
              },
              "languageDetector": Browser {
                "detectors": Object {
                  "cookie": Object {
                    "cacheUserLanguage": [Function],
                    "lookup": [Function],
                    "name": "cookie",
                  },
                  "htmlTag": Object {
                    "lookup": [Function],
                    "name": "htmlTag",
                  },
                  "localStorage": Object {
                    "cacheUserLanguage": [Function],
                    "lookup": [Function],
                    "name": "localStorage",
                  },
                  "navigator": Object {
                    "lookup": [Function],
                    "name": "navigator",
                  },
                  "path": Object {
                    "lookup": [Function],
                    "name": "path",
                  },
                  "querystring": Object {
                    "lookup": [Function],
                    "name": "querystring",
                  },
                  "sessionStorage": Object {
                    "cacheUserLanguage": [Function],
                    "lookup": [Function],
                    "name": "sessionStorage",
                  },
                  "subdomain": Object {
                    "lookup": [Function],
                    "name": "subdomain",
                  },
                },
                "i18nOptions": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "options": Object {
                  "caches": Array [
                    "localStorage",
                  ],
                  "excludeCacheFor": Array [
                    "cimode",
                  ],
                  "lookupCookie": "i18next",
                  "lookupLocalStorage": "i18nextLng",
                  "lookupQuerystring": "lng",
                  "lookupSessionStorage": "i18nextLng",
                  "order": Array [
                    "querystring",
                    "cookie",
                    "localStorage",
                    "sessionStorage",
                    "navigator",
                    "htmlTag",
                  ],
                },
                "services": [Circular],
                "type": "languageDetector",
              },
              "languageUtils": LanguageUtil {
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::languageUtils:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::languageUtils:",
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "whitelist": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
              },
              "logger": Logger {
                "debug": true,
                "logger": Object {
                  "error": [Function],
                  "log": [Function],
                  "output": [Function],
                  "type": "logger",
                  "warn": [Function],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "i18next:",
              },
              "pluralResolver": PluralResolver {
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::pluralResolver:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::pluralResolver:",
                },
                "options": Object {
                  "compatibilityJSON": undefined,
                  "prepend": "_",
                  "simplifyPluralSuffix": true,
                },
                "rules": Object {
                  "ach": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "af": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ak": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "am": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "an": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ar": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                      3,
                      11,
                      100,
                    ],
                    "plurals": [Function],
                  },
                  "arn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ast": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ay": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "az": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "be": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "bg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "br": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ca": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "cgg": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "cnr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "csb": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cy": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      8,
                    ],
                    "plurals": [Function],
                  },
                  "da": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "de": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dev": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dz": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "el": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "en": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "es": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "et": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fa": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "fi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fil": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ga": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      7,
                      11,
                    ],
                    "plurals": [Function],
                  },
                  "gd": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "gl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gun": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ha": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "he": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "hi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ht": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "hu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ia": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "id": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "is": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "it": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "iw": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "ja": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jbo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jv": Object {
                    "numbers": Array [
                      0,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ka": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kk": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "km": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ko": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ku": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "kw": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      4,
                    ],
                    "plurals": [Function],
                  },
                  "ky": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ln": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "lo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lt": Object {
                    "numbers": Array [
                      1,
                      2,
                      10,
                    ],
                    "plurals": [Function],
                  },
                  "lv": Object {
                    "numbers": Array [
                      1,
                      2,
                      0,
                    ],
                    "plurals": [Function],
                  },
                  "mai": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mfe": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ml": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mnk": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ms": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "mt": Object {
                    "numbers": Array [
                      1,
                      2,
                      11,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "nah": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ne": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "no": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nso": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "oc": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "or": Object {
                    "numbers": Array [
                      2,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "pa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pl": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "pms": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ps": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-BR": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-PT": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "rm": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ro": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "ru": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sah": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sco": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "se": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "si": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sl": Object {
                    "numbers": Array [
                      5,
                      1,
                      2,
                      3,
                    ],
                    "plurals": [Function],
                  },
                  "so": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "son": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sq": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "su": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sv": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sw": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ta": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "te": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "th": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ti": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tt": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ug": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "uk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "uz": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "vi": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "wa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "wo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "yo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "zh": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                },
              },
              "resourceStore": Object {
                "de": Object {},
                "en": Object {},
                "fr": Object {},
                "ru": Object {},
                "uz": Object {},
              },
              "utils": Object {
                "hasLoadedNamespace": [Function],
              },
            },
            "store": Object {
              "de": Object {},
              "en": Object {},
              "fr": Object {},
              "ru": Object {},
              "uz": Object {},
            },
            "translator": Translator {
              "backendConnector": Connector {
                "backend": null,
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::backendConnector:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::backendConnector:",
                },
                "observers": Object {
                  "*": Array [
                    [Function],
                  ],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "queue": Array [],
                "services": Object {
                  "backendConnector": [Circular],
                  "interpolator": Interpolator {
                    "alwaysFormat": false,
                    "escape": [Function],
                    "escapeValue": false,
                    "format": [Function],
                    "formatSeparator": ",",
                    "logger": Logger {
                      "debug": true,
                      "logger": Object {
                        "error": [Function],
                        "log": [Function],
                        "output": [Function],
                        "type": "logger",
                        "warn": [Function],
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "prefix": "i18next::interpolator:",
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "prefix": "i18next::interpolator:",
                    },
                    "maxReplaces": 1000,
                    "nestingOptionsSeparator": ",",
                    "nestingPrefix": "\\\\$t\\\\(",
                    "nestingRegexp": /\\\\\\$t\\\\\\(\\(\\.\\+\\?\\)\\\\\\)/g,
                    "nestingSuffix": "\\\\)",
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "{{",
                    "regexp": /\\{\\{\\(\\.\\+\\?\\)\\}\\}/g,
                    "regexpUnescape": /\\{\\{-\\(\\.\\+\\?\\)\\}\\}/g,
                    "suffix": "}}",
                    "unescapePrefix": "-",
                    "unescapeSuffix": "",
                    "useRawValueToEscape": false,
                  },
                  "languageDetector": Browser {
                    "detectors": Object {
                      "cookie": Object {
                        "cacheUserLanguage": [Function],
                        "lookup": [Function],
                        "name": "cookie",
                      },
                      "htmlTag": Object {
                        "lookup": [Function],
                        "name": "htmlTag",
                      },
                      "localStorage": Object {
                        "cacheUserLanguage": [Function],
                        "lookup": [Function],
                        "name": "localStorage",
                      },
                      "navigator": Object {
                        "lookup": [Function],
                        "name": "navigator",
                      },
                      "path": Object {
                        "lookup": [Function],
                        "name": "path",
                      },
                      "querystring": Object {
                        "lookup": [Function],
                        "name": "querystring",
                      },
                      "sessionStorage": Object {
                        "cacheUserLanguage": [Function],
                        "lookup": [Function],
                        "name": "sessionStorage",
                      },
                      "subdomain": Object {
                        "lookup": [Function],
                        "name": "subdomain",
                      },
                    },
                    "i18nOptions": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "options": Object {
                      "caches": Array [
                        "localStorage",
                      ],
                      "excludeCacheFor": Array [
                        "cimode",
                      ],
                      "lookupCookie": "i18next",
                      "lookupLocalStorage": "i18nextLng",
                      "lookupQuerystring": "lng",
                      "lookupSessionStorage": "i18nextLng",
                      "order": Array [
                        "querystring",
                        "cookie",
                        "localStorage",
                        "sessionStorage",
                        "navigator",
                        "htmlTag",
                      ],
                    },
                    "services": [Circular],
                    "type": "languageDetector",
                  },
                  "languageUtils": LanguageUtil {
                    "logger": Logger {
                      "debug": true,
                      "logger": Object {
                        "error": [Function],
                        "log": [Function],
                        "output": [Function],
                        "type": "logger",
                        "warn": [Function],
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "prefix": "i18next::languageUtils:",
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "prefix": "i18next::languageUtils:",
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "whitelist": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                  },
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next:",
                  },
                  "pluralResolver": PluralResolver {
                    "languageUtils": LanguageUtil {
                      "logger": Logger {
                        "debug": true,
                        "logger": Object {
                          "error": [Function],
                          "log": [Function],
                          "output": [Function],
                          "type": "logger",
                          "warn": [Function],
                        },
                        "options": Object {
                          "appendNamespaceToCIMode": false,
                          "appendNamespaceToMissingKey": false,
                          "contextSeparator": "_",
                          "debug": true,
                          "defaultNS": "translation",
                          "fallbackLng": Array [
                            "en",
                          ],
                          "fallbackNS": false,
                          "initImmediate": false,
                          "interpolation": Object {
                            "escapeValue": false,
                          },
                          "joinArrays": false,
                          "keySeparator": ".",
                          "load": "all",
                          "missingInterpolationHandler": false,
                          "missingKeyHandler": false,
                          "nonExplicitSupportedLngs": true,
                          "nonExplicitWhitelist": false,
                          "ns": Array [],
                          "nsSeparator": ":",
                          "overloadTranslationOptionHandler": [Function],
                          "parseMissingKeyHandler": false,
                          "partialBundledLanguages": false,
                          "pluralSeparator": "_",
                          "postProcess": false,
                          "postProcessPassResolved": false,
                          "prefix": "i18next::languageUtils:",
                          "preload": false,
                          "resources": Object {
                            "de": Object {},
                            "en": Object {},
                            "fr": Object {},
                            "ru": Object {},
                            "uz": Object {},
                          },
                          "returnEmptyString": true,
                          "returnNull": true,
                          "returnObjects": false,
                          "returnedObjectHandler": false,
                          "saveMissing": false,
                          "saveMissingPlurals": true,
                          "saveMissingTo": "fallback",
                          "simplifyPluralSuffix": true,
                          "supportedLngs": Array [
                            "de",
                            "en",
                            "fr",
                            "ru",
                            "uz",
                            "cimode",
                          ],
                          "updateMissing": false,
                          "whitelist": false,
                        },
                        "prefix": "i18next::languageUtils:",
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "whitelist": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                    },
                    "logger": Logger {
                      "debug": true,
                      "logger": Object {
                        "error": [Function],
                        "log": [Function],
                        "output": [Function],
                        "type": "logger",
                        "warn": [Function],
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "prefix": "i18next::pluralResolver:",
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "prefix": "i18next::pluralResolver:",
                    },
                    "options": Object {
                      "compatibilityJSON": undefined,
                      "prepend": "_",
                      "simplifyPluralSuffix": true,
                    },
                    "rules": Object {
                      "ach": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "af": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ak": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "am": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "an": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ar": Object {
                        "numbers": Array [
                          0,
                          1,
                          2,
                          3,
                          11,
                          100,
                        ],
                        "plurals": [Function],
                      },
                      "arn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ast": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ay": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "az": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "be": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "bg": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "bn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "bo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "br": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "bs": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "ca": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "cgg": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "cnr": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "cs": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "csb": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "cy": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          8,
                        ],
                        "plurals": [Function],
                      },
                      "da": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "de": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "dev": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "dz": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "el": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "en": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "eo": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "es": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "et": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "eu": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fa": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "fi": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fil": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fo": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fr": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fur": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fy": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ga": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          7,
                          11,
                        ],
                        "plurals": [Function],
                      },
                      "gd": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          20,
                        ],
                        "plurals": [Function],
                      },
                      "gl": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "gu": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "gun": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ha": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "he": Object {
                        "numbers": Array [
                          1,
                          2,
                          20,
                          21,
                        ],
                        "plurals": [Function],
                      },
                      "hi": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "hr": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "ht": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "hu": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "hy": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ia": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "id": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "is": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "it": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "iw": Object {
                        "numbers": Array [
                          1,
                          2,
                          20,
                          21,
                        ],
                        "plurals": [Function],
                      },
                      "ja": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "jbo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "jv": Object {
                        "numbers": Array [
                          0,
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ka": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "kk": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "km": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "kn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ko": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ku": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "kw": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          4,
                        ],
                        "plurals": [Function],
                      },
                      "ky": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "lb": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ln": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "lo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "lt": Object {
                        "numbers": Array [
                          1,
                          2,
                          10,
                        ],
                        "plurals": [Function],
                      },
                      "lv": Object {
                        "numbers": Array [
                          1,
                          2,
                          0,
                        ],
                        "plurals": [Function],
                      },
                      "mai": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mfe": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mg": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mi": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mk": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ml": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mnk": Object {
                        "numbers": Array [
                          0,
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mr": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ms": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "mt": Object {
                        "numbers": Array [
                          1,
                          2,
                          11,
                          20,
                        ],
                        "plurals": [Function],
                      },
                      "nah": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nap": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nb": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ne": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nl": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "no": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nso": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "oc": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "or": Object {
                        "numbers": Array [
                          2,
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "pa": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pap": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pl": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "pms": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ps": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pt": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pt-BR": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pt-PT": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "rm": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ro": Object {
                        "numbers": Array [
                          1,
                          2,
                          20,
                        ],
                        "plurals": [Function],
                      },
                      "ru": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "sah": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "sco": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "se": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "si": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sk": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "sl": Object {
                        "numbers": Array [
                          5,
                          1,
                          2,
                          3,
                        ],
                        "plurals": [Function],
                      },
                      "so": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "son": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sq": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sr": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "su": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "sv": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sw": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ta": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "te": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tg": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "th": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ti": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tk": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tr": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tt": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ug": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "uk": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "ur": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "uz": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "vi": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "wa": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "wo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "yo": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "zh": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                    },
                  },
                  "resourceStore": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "utils": Object {
                    "hasLoadedNamespace": [Function],
                  },
                },
                "state": Object {},
                "store": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
              },
              "interpolator": Interpolator {
                "alwaysFormat": false,
                "escape": [Function],
                "escapeValue": false,
                "format": [Function],
                "formatSeparator": ",",
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::interpolator:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::interpolator:",
                },
                "maxReplaces": 1000,
                "nestingOptionsSeparator": ",",
                "nestingPrefix": "\\\\$t\\\\(",
                "nestingRegexp": /\\\\\\$t\\\\\\(\\(\\.\\+\\?\\)\\\\\\)/g,
                "nestingSuffix": "\\\\)",
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "{{",
                "regexp": /\\{\\{\\(\\.\\+\\?\\)\\}\\}/g,
                "regexpUnescape": /\\{\\{-\\(\\.\\+\\?\\)\\}\\}/g,
                "suffix": "}}",
                "unescapePrefix": "-",
                "unescapeSuffix": "",
                "useRawValueToEscape": false,
              },
              "language": "en",
              "languageUtils": LanguageUtil {
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::languageUtils:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::languageUtils:",
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "whitelist": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
              },
              "logger": Logger {
                "debug": true,
                "logger": Object {
                  "error": [Function],
                  "log": [Function],
                  "output": [Function],
                  "type": "logger",
                  "warn": [Function],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "prefix": "i18next::translator:",
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "i18next::translator:",
              },
              "observers": Object {
                "*": Array [
                  [Function],
                ],
              },
              "options": Object {
                "appendNamespaceToCIMode": false,
                "appendNamespaceToMissingKey": false,
                "contextSeparator": "_",
                "debug": true,
                "defaultNS": "translation",
                "fallbackLng": Array [
                  "en",
                ],
                "fallbackNS": false,
                "initImmediate": false,
                "interpolation": Object {
                  "escapeValue": false,
                },
                "joinArrays": false,
                "keySeparator": ".",
                "load": "all",
                "missingInterpolationHandler": false,
                "missingKeyHandler": false,
                "nonExplicitSupportedLngs": true,
                "nonExplicitWhitelist": false,
                "ns": Array [],
                "nsSeparator": ":",
                "overloadTranslationOptionHandler": [Function],
                "parseMissingKeyHandler": false,
                "partialBundledLanguages": false,
                "pluralSeparator": "_",
                "postProcess": false,
                "postProcessPassResolved": false,
                "preload": false,
                "resources": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
                "returnEmptyString": true,
                "returnNull": true,
                "returnObjects": false,
                "returnedObjectHandler": false,
                "saveMissing": false,
                "saveMissingPlurals": true,
                "saveMissingTo": "fallback",
                "simplifyPluralSuffix": true,
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "updateMissing": false,
                "whitelist": false,
              },
              "pluralResolver": PluralResolver {
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::pluralResolver:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::pluralResolver:",
                },
                "options": Object {
                  "compatibilityJSON": undefined,
                  "prepend": "_",
                  "simplifyPluralSuffix": true,
                },
                "rules": Object {
                  "ach": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "af": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ak": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "am": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "an": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ar": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                      3,
                      11,
                      100,
                    ],
                    "plurals": [Function],
                  },
                  "arn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ast": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ay": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "az": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "be": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "bg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "br": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ca": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "cgg": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "cnr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "csb": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cy": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      8,
                    ],
                    "plurals": [Function],
                  },
                  "da": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "de": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dev": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dz": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "el": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "en": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "es": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "et": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fa": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "fi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fil": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ga": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      7,
                      11,
                    ],
                    "plurals": [Function],
                  },
                  "gd": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "gl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gun": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ha": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "he": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "hi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ht": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "hu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ia": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "id": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "is": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "it": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "iw": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "ja": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jbo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jv": Object {
                    "numbers": Array [
                      0,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ka": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kk": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "km": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ko": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ku": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "kw": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      4,
                    ],
                    "plurals": [Function],
                  },
                  "ky": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ln": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "lo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lt": Object {
                    "numbers": Array [
                      1,
                      2,
                      10,
                    ],
                    "plurals": [Function],
                  },
                  "lv": Object {
                    "numbers": Array [
                      1,
                      2,
                      0,
                    ],
                    "plurals": [Function],
                  },
                  "mai": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mfe": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ml": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mnk": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ms": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "mt": Object {
                    "numbers": Array [
                      1,
                      2,
                      11,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "nah": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ne": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "no": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nso": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "oc": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "or": Object {
                    "numbers": Array [
                      2,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "pa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pl": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "pms": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ps": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-BR": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-PT": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "rm": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ro": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "ru": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sah": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sco": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "se": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "si": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sl": Object {
                    "numbers": Array [
                      5,
                      1,
                      2,
                      3,
                    ],
                    "plurals": [Function],
                  },
                  "so": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "son": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sq": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "su": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sv": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sw": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ta": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "te": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "th": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ti": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tt": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ug": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "uk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "uz": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "vi": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "wa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "wo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "yo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "zh": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                },
              },
              "resourceStore": Object {
                "de": Object {},
                "en": Object {},
                "fr": Object {},
                "ru": Object {},
                "uz": Object {},
              },
              "utils": Object {
                "hasLoadedNamespace": [Function],
              },
            },
          }
        }
        key="en"
      >
        <Memo(MuiPickerUtils)>
          <MuiPickersUtilsProvider
            libInstance={[Function]}
            locale="en"
            utils={[Function]}
          >
            <Memo(ThemeProvider)
              defaultTheme={[Function]}
            >
              <ThemeProvider
                theme={
                  Object {
                    "breakpoints": Object {
                      "between": [Function],
                      "down": [Function],
                      "keys": Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ],
                      "only": [Function],
                      "up": [Function],
                      "values": Object {
                        "lg": 1280,
                        "md": 960,
                        "sm": 600,
                        "xl": 1920,
                        "xs": 0,
                      },
                      "width": [Function],
                    },
                    "direction": "ltr",
                    "mixins": Object {
                      "gutters": [Function],
                      "toolbar": Object {
                        "@media (min-width:0px) and (orientation: landscape)": Object {
                          "minHeight": 48,
                        },
                        "@media (min-width:600px)": Object {
                          "minHeight": 64,
                        },
                        "minHeight": 56,
                      },
                    },
                    "overrides": Object {},
                    "palette": Object {
                      "action": Object {
                        "activatedOpacity": 0.12,
                        "active": "rgba(0, 0, 0, 0.54)",
                        "disabled": "rgba(0, 0, 0, 0.26)",
                        "disabledBackground": "rgba(0, 0, 0, 0.12)",
                        "disabledOpacity": 0.38,
                        "focus": "rgba(0, 0, 0, 0.12)",
                        "focusOpacity": 0.12,
                        "hover": "rgba(0, 0, 0, 0.04)",
                        "hoverOpacity": 0.04,
                        "selected": "rgba(0, 0, 0, 0.08)",
                        "selectedOpacity": 0.08,
                      },
                      "augmentColor": [Function],
                      "background": Object {
                        "default": "#fafafa",
                        "paper": "#fff",
                      },
                      "common": Object {
                        "black": "#000",
                        "white": "#fff",
                      },
                      "contrastThreshold": 3,
                      "divider": "rgba(0, 0, 0, 0.12)",
                      "error": Object {
                        "contrastText": "#fff",
                        "dark": "#d32f2f",
                        "light": "#e57373",
                        "main": "#f44336",
                      },
                      "getContrastText": [Function],
                      "grey": Object {
                        "100": "#f5f5f5",
                        "200": "#eeeeee",
                        "300": "#e0e0e0",
                        "400": "#bdbdbd",
                        "50": "#fafafa",
                        "500": "#9e9e9e",
                        "600": "#757575",
                        "700": "#616161",
                        "800": "#424242",
                        "900": "#212121",
                        "A100": "#d5d5d5",
                        "A200": "#aaaaaa",
                        "A400": "#303030",
                        "A700": "#616161",
                      },
                      "info": Object {
                        "contrastText": "#fff",
                        "dark": "#1976d2",
                        "light": "#64b5f6",
                        "main": "#2196f3",
                      },
                      "primary": Object {
                        "contrastText": "#fff",
                        "dark": "rgb(44, 56, 126)",
                        "light": "rgb(101, 115, 195)",
                        "main": "#3f51b5",
                      },
                      "secondary": Object {
                        "contrastText": "#fff",
                        "dark": "rgb(171, 0, 60)",
                        "light": "rgb(247, 51, 120)",
                        "main": "#f50057",
                      },
                      "success": Object {
                        "contrastText": "rgba(0, 0, 0, 0.87)",
                        "dark": "#388e3c",
                        "light": "#81c784",
                        "main": "#4caf50",
                      },
                      "text": Object {
                        "disabled": "rgba(0, 0, 0, 0.38)",
                        "hint": "rgba(0, 0, 0, 0.38)",
                        "primary": "rgba(0, 0, 0, 0.87)",
                        "secondary": "rgba(0, 0, 0, 0.54)",
                      },
                      "tonalOffset": 0.2,
                      "type": "light",
                      "warning": Object {
                        "contrastText": "rgba(0, 0, 0, 0.87)",
                        "dark": "#f57c00",
                        "light": "#ffb74d",
                        "main": "#ff9800",
                      },
                    },
                    "props": Object {},
                    "shadows": Array [
                      "none",
                      "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                      "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                      "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                      "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                      "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                      "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                      "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                      "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                      "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                      "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                      "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                      "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                      "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                      "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                      "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                      "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                      "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                      "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                      "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                      "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                      "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                      "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                      "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                      "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                    ],
                    "shape": Object {
                      "borderRadius": 4,
                    },
                    "spacing": [Function],
                    "transitions": Object {
                      "create": [Function],
                      "duration": Object {
                        "complex": 375,
                        "enteringScreen": 225,
                        "leavingScreen": 195,
                        "short": 250,
                        "shorter": 200,
                        "shortest": 150,
                        "standard": 300,
                      },
                      "easing": Object {
                        "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                        "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                        "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                        "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                      },
                      "getAutoHeightDuration": [Function],
                    },
                    "typography": Object {
                      "body1": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.00938em",
                        "lineHeight": 1.5,
                      },
                      "body2": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.875rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.01071em",
                        "lineHeight": 1.43,
                      },
                      "button": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.875rem",
                        "fontWeight": 500,
                        "letterSpacing": "0.02857em",
                        "lineHeight": 1.75,
                        "textTransform": "uppercase",
                      },
                      "caption": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.75rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.03333em",
                        "lineHeight": 1.66,
                      },
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": 14,
                      "fontWeightBold": 700,
                      "fontWeightLight": 300,
                      "fontWeightMedium": 500,
                      "fontWeightRegular": 400,
                      "h1": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "6rem",
                        "fontWeight": 300,
                        "letterSpacing": "-0.01562em",
                        "lineHeight": 1.167,
                      },
                      "h2": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "3.75rem",
                        "fontWeight": 300,
                        "letterSpacing": "-0.00833em",
                        "lineHeight": 1.2,
                      },
                      "h3": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "3rem",
                        "fontWeight": 400,
                        "letterSpacing": "0em",
                        "lineHeight": 1.167,
                      },
                      "h4": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "2.125rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.00735em",
                        "lineHeight": 1.235,
                      },
                      "h5": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1.5rem",
                        "fontWeight": 400,
                        "letterSpacing": "0em",
                        "lineHeight": 1.334,
                      },
                      "h6": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1.25rem",
                        "fontWeight": 500,
                        "letterSpacing": "0.0075em",
                        "lineHeight": 1.6,
                      },
                      "htmlFontSize": 16,
                      "overline": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.75rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.08333em",
                        "lineHeight": 2.66,
                        "textTransform": "uppercase",
                      },
                      "pxToRem": [Function],
                      "round": [Function],
                      "subtitle1": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.00938em",
                        "lineHeight": 1.75,
                      },
                      "subtitle2": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.875rem",
                        "fontWeight": 500,
                        "letterSpacing": "0.00714em",
                        "lineHeight": 1.57,
                      },
                    },
                    "zIndex": Object {
                      "appBar": 1100,
                      "drawer": 1200,
                      "mobileStepper": 1000,
                      "modal": 1300,
                      "snackbar": 1400,
                      "speedDial": 1050,
                      "tooltip": 1500,
                    },
                    Symbol(mui.nested): false,
                  }
                }
              >
                <WithStyles(CssBaseline)>
                  <CssBaseline
                    classes={Object {}}
                  />
                </WithStyles(CssBaseline)>
                <QueryClientProvider
                  client={
                    QueryClient {
                      "defaultOptions": Object {},
                      "mutationCache": MutationCache {
                        "config": Object {},
                        "listeners": Array [],
                        "mutationId": 0,
                        "mutations": Array [],
                      },
                      "mutationDefaults": Array [],
                      "queryCache": QueryCache {
                        "config": Object {},
                        "listeners": Array [],
                        "queries": Array [],
                        "queriesMap": Object {},
                      },
                      "queryDefaults": Array [],
                      "unsubscribeFocus": [Function],
                      "unsubscribeOnline": [Function],
                    }
                  }
                >
                  <Memo(PermissionContextProvider)>
                    <Router
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "createHref": [Function],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                    >
                      <Memo(DialogContextProvider)>
                        <ThemeSelector>
                          <AdvThemeSelector>
                            <LanguageSelector />
                            <StylesProvider
                              generateClassName={[Function]}
                            >
                              <Component>
                                <Styled(MuiBox)
                                  m={2}
                                >
                                  <div
                                    className="standalone-selector--selector-multi-MuiBox-root standalone-selector--selector-multi-MuiBox-root-32"
                                  >
                                    <WithStyles(ForwardRef(FormControl))
                                      component="fieldset"
                                      fullWidth={true}
                                    >
                                      <ForwardRef(FormControl)
                                        classes={
                                          Object {
                                            "fullWidth": "standalone-selector--selector-multi-MuiFormControl-fullWidth",
                                            "marginDense": "standalone-selector--selector-multi-MuiFormControl-marginDense",
                                            "marginNormal": "standalone-selector--selector-multi-MuiFormControl-marginNormal",
                                            "root": "standalone-selector--selector-multi-MuiFormControl-root",
                                          }
                                        }
                                        component="fieldset"
                                        fullWidth={true}
                                      >
                                        <fieldset
                                          className="standalone-selector--selector-multi-MuiFormControl-root standalone-selector--selector-multi-MuiFormControl-fullWidth"
                                        >
                                          <Memo(MultiSelect)
                                            addNewLabel="Add"
                                            autocompleteId="multi-select"
                                            defaultSwitchValue={false}
                                            disabled={false}
                                            displaySwitch={false}
                                            enableIcons={false}
                                            label="Example multi select"
                                            loadingText="Loading.."
                                            onLoad={[Function]}
                                            onSelect={[Function]}
                                            placeholder="Select.."
                                            selected={
                                              Array [
                                                Object {
                                                  "canUnselect": [Function],
                                                  "color": "#00B8D9",
                                                  "icon": <Memo />,
                                                  "id": "ocean",
                                                  "isFixed": true,
                                                  "label": "Ocean",
                                                  "onClick": [Function],
                                                  "type": "Light",
                                                  "value": "ocean",
                                                },
                                              ]
                                            }
                                            switchLabel="All Record"
                                            variant="outlined"
                                          >
                                            <WithStyles(ForwardRef(Grid))
                                              container={true}
                                            >
                                              <ForwardRef(Grid)
                                                classes={
                                                  Object {
                                                    "align-content-xs-center": "standalone-selector--selector-multi-MuiGrid-align-content-xs-center",
                                                    "align-content-xs-flex-end": "standalone-selector--selector-multi-MuiGrid-align-content-xs-flex-end",
                                                    "align-content-xs-flex-start": "standalone-selector--selector-multi-MuiGrid-align-content-xs-flex-start",
                                                    "align-content-xs-space-around": "standalone-selector--selector-multi-MuiGrid-align-content-xs-space-around",
                                                    "align-content-xs-space-between": "standalone-selector--selector-multi-MuiGrid-align-content-xs-space-between",
                                                    "align-items-xs-baseline": "standalone-selector--selector-multi-MuiGrid-align-items-xs-baseline",
                                                    "align-items-xs-center": "standalone-selector--selector-multi-MuiGrid-align-items-xs-center",
                                                    "align-items-xs-flex-end": "standalone-selector--selector-multi-MuiGrid-align-items-xs-flex-end",
                                                    "align-items-xs-flex-start": "standalone-selector--selector-multi-MuiGrid-align-items-xs-flex-start",
                                                    "container": "standalone-selector--selector-multi-MuiGrid-container",
                                                    "direction-xs-column": "standalone-selector--selector-multi-MuiGrid-direction-xs-column",
                                                    "direction-xs-column-reverse": "standalone-selector--selector-multi-MuiGrid-direction-xs-column-reverse",
                                                    "direction-xs-row-reverse": "standalone-selector--selector-multi-MuiGrid-direction-xs-row-reverse",
                                                    "grid-lg-1": "standalone-selector--selector-multi-MuiGrid-grid-lg-1",
                                                    "grid-lg-10": "standalone-selector--selector-multi-MuiGrid-grid-lg-10",
                                                    "grid-lg-11": "standalone-selector--selector-multi-MuiGrid-grid-lg-11",
                                                    "grid-lg-12": "standalone-selector--selector-multi-MuiGrid-grid-lg-12",
                                                    "grid-lg-2": "standalone-selector--selector-multi-MuiGrid-grid-lg-2",
                                                    "grid-lg-3": "standalone-selector--selector-multi-MuiGrid-grid-lg-3",
                                                    "grid-lg-4": "standalone-selector--selector-multi-MuiGrid-grid-lg-4",
                                                    "grid-lg-5": "standalone-selector--selector-multi-MuiGrid-grid-lg-5",
                                                    "grid-lg-6": "standalone-selector--selector-multi-MuiGrid-grid-lg-6",
                                                    "grid-lg-7": "standalone-selector--selector-multi-MuiGrid-grid-lg-7",
                                                    "grid-lg-8": "standalone-selector--selector-multi-MuiGrid-grid-lg-8",
                                                    "grid-lg-9": "standalone-selector--selector-multi-MuiGrid-grid-lg-9",
                                                    "grid-lg-auto": "standalone-selector--selector-multi-MuiGrid-grid-lg-auto",
                                                    "grid-lg-true": "standalone-selector--selector-multi-MuiGrid-grid-lg-true",
                                                    "grid-md-1": "standalone-selector--selector-multi-MuiGrid-grid-md-1",
                                                    "grid-md-10": "standalone-selector--selector-multi-MuiGrid-grid-md-10",
                                                    "grid-md-11": "standalone-selector--selector-multi-MuiGrid-grid-md-11",
                                                    "grid-md-12": "standalone-selector--selector-multi-MuiGrid-grid-md-12",
                                                    "grid-md-2": "standalone-selector--selector-multi-MuiGrid-grid-md-2",
                                                    "grid-md-3": "standalone-selector--selector-multi-MuiGrid-grid-md-3",
                                                    "grid-md-4": "standalone-selector--selector-multi-MuiGrid-grid-md-4",
                                                    "grid-md-5": "standalone-selector--selector-multi-MuiGrid-grid-md-5",
                                                    "grid-md-6": "standalone-selector--selector-multi-MuiGrid-grid-md-6",
                                                    "grid-md-7": "standalone-selector--selector-multi-MuiGrid-grid-md-7",
                                                    "grid-md-8": "standalone-selector--selector-multi-MuiGrid-grid-md-8",
                                                    "grid-md-9": "standalone-selector--selector-multi-MuiGrid-grid-md-9",
                                                    "grid-md-auto": "standalone-selector--selector-multi-MuiGrid-grid-md-auto",
                                                    "grid-md-true": "standalone-selector--selector-multi-MuiGrid-grid-md-true",
                                                    "grid-sm-1": "standalone-selector--selector-multi-MuiGrid-grid-sm-1",
                                                    "grid-sm-10": "standalone-selector--selector-multi-MuiGrid-grid-sm-10",
                                                    "grid-sm-11": "standalone-selector--selector-multi-MuiGrid-grid-sm-11",
                                                    "grid-sm-12": "standalone-selector--selector-multi-MuiGrid-grid-sm-12",
                                                    "grid-sm-2": "standalone-selector--selector-multi-MuiGrid-grid-sm-2",
                                                    "grid-sm-3": "standalone-selector--selector-multi-MuiGrid-grid-sm-3",
                                                    "grid-sm-4": "standalone-selector--selector-multi-MuiGrid-grid-sm-4",
                                                    "grid-sm-5": "standalone-selector--selector-multi-MuiGrid-grid-sm-5",
                                                    "grid-sm-6": "standalone-selector--selector-multi-MuiGrid-grid-sm-6",
                                                    "grid-sm-7": "standalone-selector--selector-multi-MuiGrid-grid-sm-7",
                                                    "grid-sm-8": "standalone-selector--selector-multi-MuiGrid-grid-sm-8",
                                                    "grid-sm-9": "standalone-selector--selector-multi-MuiGrid-grid-sm-9",
                                                    "grid-sm-auto": "standalone-selector--selector-multi-MuiGrid-grid-sm-auto",
                                                    "grid-sm-true": "standalone-selector--selector-multi-MuiGrid-grid-sm-true",
                                                    "grid-xl-1": "standalone-selector--selector-multi-MuiGrid-grid-xl-1",
                                                    "grid-xl-10": "standalone-selector--selector-multi-MuiGrid-grid-xl-10",
                                                    "grid-xl-11": "standalone-selector--selector-multi-MuiGrid-grid-xl-11",
                                                    "grid-xl-12": "standalone-selector--selector-multi-MuiGrid-grid-xl-12",
                                                    "grid-xl-2": "standalone-selector--selector-multi-MuiGrid-grid-xl-2",
                                                    "grid-xl-3": "standalone-selector--selector-multi-MuiGrid-grid-xl-3",
                                                    "grid-xl-4": "standalone-selector--selector-multi-MuiGrid-grid-xl-4",
                                                    "grid-xl-5": "standalone-selector--selector-multi-MuiGrid-grid-xl-5",
                                                    "grid-xl-6": "standalone-selector--selector-multi-MuiGrid-grid-xl-6",
                                                    "grid-xl-7": "standalone-selector--selector-multi-MuiGrid-grid-xl-7",
                                                    "grid-xl-8": "standalone-selector--selector-multi-MuiGrid-grid-xl-8",
                                                    "grid-xl-9": "standalone-selector--selector-multi-MuiGrid-grid-xl-9",
                                                    "grid-xl-auto": "standalone-selector--selector-multi-MuiGrid-grid-xl-auto",
                                                    "grid-xl-true": "standalone-selector--selector-multi-MuiGrid-grid-xl-true",
                                                    "grid-xs-1": "standalone-selector--selector-multi-MuiGrid-grid-xs-1",
                                                    "grid-xs-10": "standalone-selector--selector-multi-MuiGrid-grid-xs-10",
                                                    "grid-xs-11": "standalone-selector--selector-multi-MuiGrid-grid-xs-11",
                                                    "grid-xs-12": "standalone-selector--selector-multi-MuiGrid-grid-xs-12",
                                                    "grid-xs-2": "standalone-selector--selector-multi-MuiGrid-grid-xs-2",
                                                    "grid-xs-3": "standalone-selector--selector-multi-MuiGrid-grid-xs-3",
                                                    "grid-xs-4": "standalone-selector--selector-multi-MuiGrid-grid-xs-4",
                                                    "grid-xs-5": "standalone-selector--selector-multi-MuiGrid-grid-xs-5",
                                                    "grid-xs-6": "standalone-selector--selector-multi-MuiGrid-grid-xs-6",
                                                    "grid-xs-7": "standalone-selector--selector-multi-MuiGrid-grid-xs-7",
                                                    "grid-xs-8": "standalone-selector--selector-multi-MuiGrid-grid-xs-8",
                                                    "grid-xs-9": "standalone-selector--selector-multi-MuiGrid-grid-xs-9",
                                                    "grid-xs-auto": "standalone-selector--selector-multi-MuiGrid-grid-xs-auto",
                                                    "grid-xs-true": "standalone-selector--selector-multi-MuiGrid-grid-xs-true",
                                                    "item": "standalone-selector--selector-multi-MuiGrid-item",
                                                    "justify-xs-center": "standalone-selector--selector-multi-MuiGrid-justify-xs-center",
                                                    "justify-xs-flex-end": "standalone-selector--selector-multi-MuiGrid-justify-xs-flex-end",
                                                    "justify-xs-space-around": "standalone-selector--selector-multi-MuiGrid-justify-xs-space-around",
                                                    "justify-xs-space-between": "standalone-selector--selector-multi-MuiGrid-justify-xs-space-between",
                                                    "justify-xs-space-evenly": "standalone-selector--selector-multi-MuiGrid-justify-xs-space-evenly",
                                                    "root": "standalone-selector--selector-multi-MuiGrid-root",
                                                    "spacing-xs-1": "standalone-selector--selector-multi-MuiGrid-spacing-xs-1",
                                                    "spacing-xs-10": "standalone-selector--selector-multi-MuiGrid-spacing-xs-10",
                                                    "spacing-xs-2": "standalone-selector--selector-multi-MuiGrid-spacing-xs-2",
                                                    "spacing-xs-3": "standalone-selector--selector-multi-MuiGrid-spacing-xs-3",
                                                    "spacing-xs-4": "standalone-selector--selector-multi-MuiGrid-spacing-xs-4",
                                                    "spacing-xs-5": "standalone-selector--selector-multi-MuiGrid-spacing-xs-5",
                                                    "spacing-xs-6": "standalone-selector--selector-multi-MuiGrid-spacing-xs-6",
                                                    "spacing-xs-7": "standalone-selector--selector-multi-MuiGrid-spacing-xs-7",
                                                    "spacing-xs-8": "standalone-selector--selector-multi-MuiGrid-spacing-xs-8",
                                                    "spacing-xs-9": "standalone-selector--selector-multi-MuiGrid-spacing-xs-9",
                                                    "wrap-xs-nowrap": "standalone-selector--selector-multi-MuiGrid-wrap-xs-nowrap",
                                                    "wrap-xs-wrap-reverse": "standalone-selector--selector-multi-MuiGrid-wrap-xs-wrap-reverse",
                                                    "zeroMinWidth": "standalone-selector--selector-multi-MuiGrid-zeroMinWidth",
                                                  }
                                                }
                                                container={true}
                                              >
                                                <div
                                                  className="standalone-selector--selector-multi-MuiGrid-root standalone-selector--selector-multi-MuiGrid-container"
                                                >
                                                  <WithStyles(ForwardRef(Grid))
                                                    item={true}
                                                    xs={12}
                                                  >
                                                    <ForwardRef(Grid)
                                                      classes={
                                                        Object {
                                                          "align-content-xs-center": "standalone-selector--selector-multi-MuiGrid-align-content-xs-center",
                                                          "align-content-xs-flex-end": "standalone-selector--selector-multi-MuiGrid-align-content-xs-flex-end",
                                                          "align-content-xs-flex-start": "standalone-selector--selector-multi-MuiGrid-align-content-xs-flex-start",
                                                          "align-content-xs-space-around": "standalone-selector--selector-multi-MuiGrid-align-content-xs-space-around",
                                                          "align-content-xs-space-between": "standalone-selector--selector-multi-MuiGrid-align-content-xs-space-between",
                                                          "align-items-xs-baseline": "standalone-selector--selector-multi-MuiGrid-align-items-xs-baseline",
                                                          "align-items-xs-center": "standalone-selector--selector-multi-MuiGrid-align-items-xs-center",
                                                          "align-items-xs-flex-end": "standalone-selector--selector-multi-MuiGrid-align-items-xs-flex-end",
                                                          "align-items-xs-flex-start": "standalone-selector--selector-multi-MuiGrid-align-items-xs-flex-start",
                                                          "container": "standalone-selector--selector-multi-MuiGrid-container",
                                                          "direction-xs-column": "standalone-selector--selector-multi-MuiGrid-direction-xs-column",
                                                          "direction-xs-column-reverse": "standalone-selector--selector-multi-MuiGrid-direction-xs-column-reverse",
                                                          "direction-xs-row-reverse": "standalone-selector--selector-multi-MuiGrid-direction-xs-row-reverse",
                                                          "grid-lg-1": "standalone-selector--selector-multi-MuiGrid-grid-lg-1",
                                                          "grid-lg-10": "standalone-selector--selector-multi-MuiGrid-grid-lg-10",
                                                          "grid-lg-11": "standalone-selector--selector-multi-MuiGrid-grid-lg-11",
                                                          "grid-lg-12": "standalone-selector--selector-multi-MuiGrid-grid-lg-12",
                                                          "grid-lg-2": "standalone-selector--selector-multi-MuiGrid-grid-lg-2",
                                                          "grid-lg-3": "standalone-selector--selector-multi-MuiGrid-grid-lg-3",
                                                          "grid-lg-4": "standalone-selector--selector-multi-MuiGrid-grid-lg-4",
                                                          "grid-lg-5": "standalone-selector--selector-multi-MuiGrid-grid-lg-5",
                                                          "grid-lg-6": "standalone-selector--selector-multi-MuiGrid-grid-lg-6",
                                                          "grid-lg-7": "standalone-selector--selector-multi-MuiGrid-grid-lg-7",
                                                          "grid-lg-8": "standalone-selector--selector-multi-MuiGrid-grid-lg-8",
                                                          "grid-lg-9": "standalone-selector--selector-multi-MuiGrid-grid-lg-9",
                                                          "grid-lg-auto": "standalone-selector--selector-multi-MuiGrid-grid-lg-auto",
                                                          "grid-lg-true": "standalone-selector--selector-multi-MuiGrid-grid-lg-true",
                                                          "grid-md-1": "standalone-selector--selector-multi-MuiGrid-grid-md-1",
                                                          "grid-md-10": "standalone-selector--selector-multi-MuiGrid-grid-md-10",
                                                          "grid-md-11": "standalone-selector--selector-multi-MuiGrid-grid-md-11",
                                                          "grid-md-12": "standalone-selector--selector-multi-MuiGrid-grid-md-12",
                                                          "grid-md-2": "standalone-selector--selector-multi-MuiGrid-grid-md-2",
                                                          "grid-md-3": "standalone-selector--selector-multi-MuiGrid-grid-md-3",
                                                          "grid-md-4": "standalone-selector--selector-multi-MuiGrid-grid-md-4",
                                                          "grid-md-5": "standalone-selector--selector-multi-MuiGrid-grid-md-5",
                                                          "grid-md-6": "standalone-selector--selector-multi-MuiGrid-grid-md-6",
                                                          "grid-md-7": "standalone-selector--selector-multi-MuiGrid-grid-md-7",
                                                          "grid-md-8": "standalone-selector--selector-multi-MuiGrid-grid-md-8",
                                                          "grid-md-9": "standalone-selector--selector-multi-MuiGrid-grid-md-9",
                                                          "grid-md-auto": "standalone-selector--selector-multi-MuiGrid-grid-md-auto",
                                                          "grid-md-true": "standalone-selector--selector-multi-MuiGrid-grid-md-true",
                                                          "grid-sm-1": "standalone-selector--selector-multi-MuiGrid-grid-sm-1",
                                                          "grid-sm-10": "standalone-selector--selector-multi-MuiGrid-grid-sm-10",
                                                          "grid-sm-11": "standalone-selector--selector-multi-MuiGrid-grid-sm-11",
                                                          "grid-sm-12": "standalone-selector--selector-multi-MuiGrid-grid-sm-12",
                                                          "grid-sm-2": "standalone-selector--selector-multi-MuiGrid-grid-sm-2",
                                                          "grid-sm-3": "standalone-selector--selector-multi-MuiGrid-grid-sm-3",
                                                          "grid-sm-4": "standalone-selector--selector-multi-MuiGrid-grid-sm-4",
                                                          "grid-sm-5": "standalone-selector--selector-multi-MuiGrid-grid-sm-5",
                                                          "grid-sm-6": "standalone-selector--selector-multi-MuiGrid-grid-sm-6",
                                                          "grid-sm-7": "standalone-selector--selector-multi-MuiGrid-grid-sm-7",
                                                          "grid-sm-8": "standalone-selector--selector-multi-MuiGrid-grid-sm-8",
                                                          "grid-sm-9": "standalone-selector--selector-multi-MuiGrid-grid-sm-9",
                                                          "grid-sm-auto": "standalone-selector--selector-multi-MuiGrid-grid-sm-auto",
                                                          "grid-sm-true": "standalone-selector--selector-multi-MuiGrid-grid-sm-true",
                                                          "grid-xl-1": "standalone-selector--selector-multi-MuiGrid-grid-xl-1",
                                                          "grid-xl-10": "standalone-selector--selector-multi-MuiGrid-grid-xl-10",
                                                          "grid-xl-11": "standalone-selector--selector-multi-MuiGrid-grid-xl-11",
                                                          "grid-xl-12": "standalone-selector--selector-multi-MuiGrid-grid-xl-12",
                                                          "grid-xl-2": "standalone-selector--selector-multi-MuiGrid-grid-xl-2",
                                                          "grid-xl-3": "standalone-selector--selector-multi-MuiGrid-grid-xl-3",
                                                          "grid-xl-4": "standalone-selector--selector-multi-MuiGrid-grid-xl-4",
                                                          "grid-xl-5": "standalone-selector--selector-multi-MuiGrid-grid-xl-5",
                                                          "grid-xl-6": "standalone-selector--selector-multi-MuiGrid-grid-xl-6",
                                                          "grid-xl-7": "standalone-selector--selector-multi-MuiGrid-grid-xl-7",
                                                          "grid-xl-8": "standalone-selector--selector-multi-MuiGrid-grid-xl-8",
                                                          "grid-xl-9": "standalone-selector--selector-multi-MuiGrid-grid-xl-9",
                                                          "grid-xl-auto": "standalone-selector--selector-multi-MuiGrid-grid-xl-auto",
                                                          "grid-xl-true": "standalone-selector--selector-multi-MuiGrid-grid-xl-true",
                                                          "grid-xs-1": "standalone-selector--selector-multi-MuiGrid-grid-xs-1",
                                                          "grid-xs-10": "standalone-selector--selector-multi-MuiGrid-grid-xs-10",
                                                          "grid-xs-11": "standalone-selector--selector-multi-MuiGrid-grid-xs-11",
                                                          "grid-xs-12": "standalone-selector--selector-multi-MuiGrid-grid-xs-12",
                                                          "grid-xs-2": "standalone-selector--selector-multi-MuiGrid-grid-xs-2",
                                                          "grid-xs-3": "standalone-selector--selector-multi-MuiGrid-grid-xs-3",
                                                          "grid-xs-4": "standalone-selector--selector-multi-MuiGrid-grid-xs-4",
                                                          "grid-xs-5": "standalone-selector--selector-multi-MuiGrid-grid-xs-5",
                                                          "grid-xs-6": "standalone-selector--selector-multi-MuiGrid-grid-xs-6",
                                                          "grid-xs-7": "standalone-selector--selector-multi-MuiGrid-grid-xs-7",
                                                          "grid-xs-8": "standalone-selector--selector-multi-MuiGrid-grid-xs-8",
                                                          "grid-xs-9": "standalone-selector--selector-multi-MuiGrid-grid-xs-9",
                                                          "grid-xs-auto": "standalone-selector--selector-multi-MuiGrid-grid-xs-auto",
                                                          "grid-xs-true": "standalone-selector--selector-multi-MuiGrid-grid-xs-true",
                                                          "item": "standalone-selector--selector-multi-MuiGrid-item",
                                                          "justify-xs-center": "standalone-selector--selector-multi-MuiGrid-justify-xs-center",
                                                          "justify-xs-flex-end": "standalone-selector--selector-multi-MuiGrid-justify-xs-flex-end",
                                                          "justify-xs-space-around": "standalone-selector--selector-multi-MuiGrid-justify-xs-space-around",
                                                          "justify-xs-space-between": "standalone-selector--selector-multi-MuiGrid-justify-xs-space-between",
                                                          "justify-xs-space-evenly": "standalone-selector--selector-multi-MuiGrid-justify-xs-space-evenly",
                                                          "root": "standalone-selector--selector-multi-MuiGrid-root",
                                                          "spacing-xs-1": "standalone-selector--selector-multi-MuiGrid-spacing-xs-1",
                                                          "spacing-xs-10": "standalone-selector--selector-multi-MuiGrid-spacing-xs-10",
                                                          "spacing-xs-2": "standalone-selector--selector-multi-MuiGrid-spacing-xs-2",
                                                          "spacing-xs-3": "standalone-selector--selector-multi-MuiGrid-spacing-xs-3",
                                                          "spacing-xs-4": "standalone-selector--selector-multi-MuiGrid-spacing-xs-4",
                                                          "spacing-xs-5": "standalone-selector--selector-multi-MuiGrid-spacing-xs-5",
                                                          "spacing-xs-6": "standalone-selector--selector-multi-MuiGrid-spacing-xs-6",
                                                          "spacing-xs-7": "standalone-selector--selector-multi-MuiGrid-spacing-xs-7",
                                                          "spacing-xs-8": "standalone-selector--selector-multi-MuiGrid-spacing-xs-8",
                                                          "spacing-xs-9": "standalone-selector--selector-multi-MuiGrid-spacing-xs-9",
                                                          "wrap-xs-nowrap": "standalone-selector--selector-multi-MuiGrid-wrap-xs-nowrap",
                                                          "wrap-xs-wrap-reverse": "standalone-selector--selector-multi-MuiGrid-wrap-xs-wrap-reverse",
                                                          "zeroMinWidth": "standalone-selector--selector-multi-MuiGrid-zeroMinWidth",
                                                        }
                                                      }
                                                      item={true}
                                                      xs={12}
                                                    >
                                                      <div
                                                        className="standalone-selector--selector-multi-MuiGrid-root standalone-selector--selector-multi-MuiGrid-item standalone-selector--selector-multi-MuiGrid-grid-xs-12"
                                                      >
                                                        <Memo(BaseSelector)
                                                          addNewLabel="Add"
                                                          autocompleteId="multi-select"
                                                          classes={
                                                            Object {
                                                              "inputRoot": "standalone-selector--selector-multi-CcMultiSelectBase-inputRoot-34 standalone-selector--selector-multi-CcMultiSelectBase-inputRoot-35",
                                                            }
                                                          }
                                                          defaultSwitchValue={false}
                                                          disabled={false}
                                                          displaySwitch={false}
                                                          enableIcons={false}
                                                          label="Example multi select"
                                                          loadingText="Loading.."
                                                          onLoad={[Function]}
                                                          onSelect={[Function]}
                                                          placeholder="Select.."
                                                          refreshToken="ocean"
                                                          selected={null}
                                                          switchLabel="All Record"
                                                          variant="outlined"
                                                        >
                                                          <Memo(InlineSwitch)
                                                            displaySwitch={false}
                                                            setSwitchValue={[Function]}
                                                            switchLabel="All Record"
                                                            switchValue={false}
                                                          >
                                                            <WithStyles(ForwardRef(Typography))
                                                              className="standalone-selector--selector-multi-InlineSwitch-labelWithSwitch-43"
                                                              component="div"
                                                            >
                                                              <ForwardRef(Typography)
                                                                className="standalone-selector--selector-multi-InlineSwitch-labelWithSwitch-43"
                                                                classes={
                                                                  Object {
                                                                    "alignCenter": "standalone-selector--selector-multi-MuiTypography-alignCenter",
                                                                    "alignJustify": "standalone-selector--selector-multi-MuiTypography-alignJustify",
                                                                    "alignLeft": "standalone-selector--selector-multi-MuiTypography-alignLeft",
                                                                    "alignRight": "standalone-selector--selector-multi-MuiTypography-alignRight",
                                                                    "body1": "standalone-selector--selector-multi-MuiTypography-body1",
                                                                    "body2": "standalone-selector--selector-multi-MuiTypography-body2",
                                                                    "button": "standalone-selector--selector-multi-MuiTypography-button",
                                                                    "caption": "standalone-selector--selector-multi-MuiTypography-caption",
                                                                    "colorError": "standalone-selector--selector-multi-MuiTypography-colorError",
                                                                    "colorInherit": "standalone-selector--selector-multi-MuiTypography-colorInherit",
                                                                    "colorPrimary": "standalone-selector--selector-multi-MuiTypography-colorPrimary",
                                                                    "colorSecondary": "standalone-selector--selector-multi-MuiTypography-colorSecondary",
                                                                    "colorTextPrimary": "standalone-selector--selector-multi-MuiTypography-colorTextPrimary",
                                                                    "colorTextSecondary": "standalone-selector--selector-multi-MuiTypography-colorTextSecondary",
                                                                    "displayBlock": "standalone-selector--selector-multi-MuiTypography-displayBlock",
                                                                    "displayInline": "standalone-selector--selector-multi-MuiTypography-displayInline",
                                                                    "gutterBottom": "standalone-selector--selector-multi-MuiTypography-gutterBottom",
                                                                    "h1": "standalone-selector--selector-multi-MuiTypography-h1",
                                                                    "h2": "standalone-selector--selector-multi-MuiTypography-h2",
                                                                    "h3": "standalone-selector--selector-multi-MuiTypography-h3",
                                                                    "h4": "standalone-selector--selector-multi-MuiTypography-h4",
                                                                    "h5": "standalone-selector--selector-multi-MuiTypography-h5",
                                                                    "h6": "standalone-selector--selector-multi-MuiTypography-h6",
                                                                    "noWrap": "standalone-selector--selector-multi-MuiTypography-noWrap",
                                                                    "overline": "standalone-selector--selector-multi-MuiTypography-overline",
                                                                    "paragraph": "standalone-selector--selector-multi-MuiTypography-paragraph",
                                                                    "root": "standalone-selector--selector-multi-MuiTypography-root",
                                                                    "srOnly": "standalone-selector--selector-multi-MuiTypography-srOnly",
                                                                    "subtitle1": "standalone-selector--selector-multi-MuiTypography-subtitle1",
                                                                    "subtitle2": "standalone-selector--selector-multi-MuiTypography-subtitle2",
                                                                  }
                                                                }
                                                                component="div"
                                                              >
                                                                <div
                                                                  className="standalone-selector--selector-multi-MuiTypography-root standalone-selector--selector-multi-InlineSwitch-labelWithSwitch-43 standalone-selector--selector-multi-MuiTypography-body1"
                                                                >
                                                                  <WithStyles(ForwardRef(Typography))
                                                                    component="div"
                                                                  >
                                                                    <ForwardRef(Typography)
                                                                      classes={
                                                                        Object {
                                                                          "alignCenter": "standalone-selector--selector-multi-MuiTypography-alignCenter",
                                                                          "alignJustify": "standalone-selector--selector-multi-MuiTypography-alignJustify",
                                                                          "alignLeft": "standalone-selector--selector-multi-MuiTypography-alignLeft",
                                                                          "alignRight": "standalone-selector--selector-multi-MuiTypography-alignRight",
                                                                          "body1": "standalone-selector--selector-multi-MuiTypography-body1",
                                                                          "body2": "standalone-selector--selector-multi-MuiTypography-body2",
                                                                          "button": "standalone-selector--selector-multi-MuiTypography-button",
                                                                          "caption": "standalone-selector--selector-multi-MuiTypography-caption",
                                                                          "colorError": "standalone-selector--selector-multi-MuiTypography-colorError",
                                                                          "colorInherit": "standalone-selector--selector-multi-MuiTypography-colorInherit",
                                                                          "colorPrimary": "standalone-selector--selector-multi-MuiTypography-colorPrimary",
                                                                          "colorSecondary": "standalone-selector--selector-multi-MuiTypography-colorSecondary",
                                                                          "colorTextPrimary": "standalone-selector--selector-multi-MuiTypography-colorTextPrimary",
                                                                          "colorTextSecondary": "standalone-selector--selector-multi-MuiTypography-colorTextSecondary",
                                                                          "displayBlock": "standalone-selector--selector-multi-MuiTypography-displayBlock",
                                                                          "displayInline": "standalone-selector--selector-multi-MuiTypography-displayInline",
                                                                          "gutterBottom": "standalone-selector--selector-multi-MuiTypography-gutterBottom",
                                                                          "h1": "standalone-selector--selector-multi-MuiTypography-h1",
                                                                          "h2": "standalone-selector--selector-multi-MuiTypography-h2",
                                                                          "h3": "standalone-selector--selector-multi-MuiTypography-h3",
                                                                          "h4": "standalone-selector--selector-multi-MuiTypography-h4",
                                                                          "h5": "standalone-selector--selector-multi-MuiTypography-h5",
                                                                          "h6": "standalone-selector--selector-multi-MuiTypography-h6",
                                                                          "noWrap": "standalone-selector--selector-multi-MuiTypography-noWrap",
                                                                          "overline": "standalone-selector--selector-multi-MuiTypography-overline",
                                                                          "paragraph": "standalone-selector--selector-multi-MuiTypography-paragraph",
                                                                          "root": "standalone-selector--selector-multi-MuiTypography-root",
                                                                          "srOnly": "standalone-selector--selector-multi-MuiTypography-srOnly",
                                                                          "subtitle1": "standalone-selector--selector-multi-MuiTypography-subtitle1",
                                                                          "subtitle2": "standalone-selector--selector-multi-MuiTypography-subtitle2",
                                                                        }
                                                                      }
                                                                      component="div"
                                                                    >
                                                                      <div
                                                                        className="standalone-selector--selector-multi-MuiTypography-root standalone-selector--selector-multi-MuiTypography-body1"
                                                                      >
                                                                        <WithStyles(ForwardRef(InputLabel))
                                                                          shrink={true}
                                                                        >
                                                                          <ForwardRef(InputLabel)
                                                                            classes={
                                                                              Object {
                                                                                "animated": "standalone-selector--selector-multi-MuiInputLabel-animated",
                                                                                "asterisk": "standalone-selector--selector-multi-MuiInputLabel-asterisk",
                                                                                "disabled": "Mui-disabled",
                                                                                "error": "Mui-error",
                                                                                "filled": "standalone-selector--selector-multi-MuiInputLabel-filled",
                                                                                "focused": "Mui-focused",
                                                                                "formControl": "standalone-selector--selector-multi-MuiInputLabel-formControl",
                                                                                "marginDense": "standalone-selector--selector-multi-MuiInputLabel-marginDense",
                                                                                "outlined": "standalone-selector--selector-multi-MuiInputLabel-outlined",
                                                                                "required": "Mui-required",
                                                                                "root": "standalone-selector--selector-multi-MuiInputLabel-root",
                                                                                "shrink": "standalone-selector--selector-multi-MuiInputLabel-shrink",
                                                                              }
                                                                            }
                                                                            shrink={true}
                                                                          >
                                                                            <WithStyles(ForwardRef(FormLabel))
                                                                              className="standalone-selector--selector-multi-MuiInputLabel-root standalone-selector--selector-multi-MuiInputLabel-formControl standalone-selector--selector-multi-MuiInputLabel-animated standalone-selector--selector-multi-MuiInputLabel-shrink"
                                                                              classes={
                                                                                Object {
                                                                                  "asterisk": "standalone-selector--selector-multi-MuiInputLabel-asterisk",
                                                                                  "disabled": "Mui-disabled",
                                                                                  "error": "Mui-error",
                                                                                  "focused": "Mui-focused",
                                                                                  "required": "Mui-required",
                                                                                }
                                                                              }
                                                                              data-shrink={true}
                                                                            >
                                                                              <ForwardRef(FormLabel)
                                                                                className="standalone-selector--selector-multi-MuiInputLabel-root standalone-selector--selector-multi-MuiInputLabel-formControl standalone-selector--selector-multi-MuiInputLabel-animated standalone-selector--selector-multi-MuiInputLabel-shrink"
                                                                                classes={
                                                                                  Object {
                                                                                    "asterisk": "standalone-selector--selector-multi-MuiFormLabel-asterisk standalone-selector--selector-multi-MuiInputLabel-asterisk",
                                                                                    "colorSecondary": "standalone-selector--selector-multi-MuiFormLabel-colorSecondary",
                                                                                    "disabled": "Mui-disabled Mui-disabled",
                                                                                    "error": "Mui-error Mui-error",
                                                                                    "filled": "standalone-selector--selector-multi-MuiFormLabel-filled",
                                                                                    "focused": "Mui-focused Mui-focused",
                                                                                    "required": "Mui-required Mui-required",
                                                                                    "root": "standalone-selector--selector-multi-MuiFormLabel-root",
                                                                                  }
                                                                                }
                                                                                data-shrink={true}
                                                                              >
                                                                                <label
                                                                                  className="standalone-selector--selector-multi-MuiFormLabel-root standalone-selector--selector-multi-MuiInputLabel-root standalone-selector--selector-multi-MuiInputLabel-formControl standalone-selector--selector-multi-MuiInputLabel-animated standalone-selector--selector-multi-MuiInputLabel-shrink"
                                                                                  data-shrink={true}
                                                                                >
                                                                                  Example multi select
                                                                                </label>
                                                                              </ForwardRef(FormLabel)>
                                                                            </WithStyles(ForwardRef(FormLabel))>
                                                                          </ForwardRef(InputLabel)>
                                                                        </WithStyles(ForwardRef(InputLabel))>
                                                                        <WithStyles(ForwardRef(Paper))
                                                                          className="standalone-selector--selector-multi-CcBaseSelectorCustom-wrapper-39 standalone-selector--selector-multi-CcBaseSelectorCustom-wrapper-41"
                                                                          elevation={0}
                                                                        >
                                                                          <ForwardRef(Paper)
                                                                            className="standalone-selector--selector-multi-CcBaseSelectorCustom-wrapper-39 standalone-selector--selector-multi-CcBaseSelectorCustom-wrapper-41"
                                                                            classes={
                                                                              Object {
                                                                                "elevation0": "standalone-selector--selector-multi-MuiPaper-elevation0",
                                                                                "elevation1": "standalone-selector--selector-multi-MuiPaper-elevation1",
                                                                                "elevation10": "standalone-selector--selector-multi-MuiPaper-elevation10",
                                                                                "elevation11": "standalone-selector--selector-multi-MuiPaper-elevation11",
                                                                                "elevation12": "standalone-selector--selector-multi-MuiPaper-elevation12",
                                                                                "elevation13": "standalone-selector--selector-multi-MuiPaper-elevation13",
                                                                                "elevation14": "standalone-selector--selector-multi-MuiPaper-elevation14",
                                                                                "elevation15": "standalone-selector--selector-multi-MuiPaper-elevation15",
                                                                                "elevation16": "standalone-selector--selector-multi-MuiPaper-elevation16",
                                                                                "elevation17": "standalone-selector--selector-multi-MuiPaper-elevation17",
                                                                                "elevation18": "standalone-selector--selector-multi-MuiPaper-elevation18",
                                                                                "elevation19": "standalone-selector--selector-multi-MuiPaper-elevation19",
                                                                                "elevation2": "standalone-selector--selector-multi-MuiPaper-elevation2",
                                                                                "elevation20": "standalone-selector--selector-multi-MuiPaper-elevation20",
                                                                                "elevation21": "standalone-selector--selector-multi-MuiPaper-elevation21",
                                                                                "elevation22": "standalone-selector--selector-multi-MuiPaper-elevation22",
                                                                                "elevation23": "standalone-selector--selector-multi-MuiPaper-elevation23",
                                                                                "elevation24": "standalone-selector--selector-multi-MuiPaper-elevation24",
                                                                                "elevation3": "standalone-selector--selector-multi-MuiPaper-elevation3",
                                                                                "elevation4": "standalone-selector--selector-multi-MuiPaper-elevation4",
                                                                                "elevation5": "standalone-selector--selector-multi-MuiPaper-elevation5",
                                                                                "elevation6": "standalone-selector--selector-multi-MuiPaper-elevation6",
                                                                                "elevation7": "standalone-selector--selector-multi-MuiPaper-elevation7",
                                                                                "elevation8": "standalone-selector--selector-multi-MuiPaper-elevation8",
                                                                                "elevation9": "standalone-selector--selector-multi-MuiPaper-elevation9",
                                                                                "outlined": "standalone-selector--selector-multi-MuiPaper-outlined",
                                                                                "root": "standalone-selector--selector-multi-MuiPaper-root",
                                                                                "rounded": "standalone-selector--selector-multi-MuiPaper-rounded",
                                                                              }
                                                                            }
                                                                            elevation={0}
                                                                          >
                                                                            <div
                                                                              className="standalone-selector--selector-multi-MuiPaper-root standalone-selector--selector-multi-CcBaseSelectorCustom-wrapper-39 standalone-selector--selector-multi-CcBaseSelectorCustom-wrapper-41 standalone-selector--selector-multi-MuiPaper-elevation0 standalone-selector--selector-multi-MuiPaper-rounded"
                                                                            >
                                                                              <WithStyles(ForwardRef(Autocomplete))
                                                                                autoComplete={true}
                                                                                blurOnSelect={true}
                                                                                classes={
                                                                                  Object {
                                                                                    "inputRoot": "undefined standalone-selector--selector-multi-CcMultiSelectBase-inputRoot-34 standalone-selector--selector-multi-CcMultiSelectBase-inputRoot-35",
                                                                                  }
                                                                                }
                                                                                closeText="standalone.selector.base-selector.close-icon-text"
                                                                                disabled={false}
                                                                                filterOptions={[Function]}
                                                                                getOptionDisabled={[Function]}
                                                                                getOptionLabel={[Function]}
                                                                                getOptionSelected={[Function]}
                                                                                id="multi-select"
                                                                                inputValue=""
                                                                                key="ocean no-add-new"
                                                                                loading={true}
                                                                                loadingText="Loading.."
                                                                                noOptionsText="standalone.selector.base-selector.no-options-text"
                                                                                onChange={[Function]}
                                                                                onClose={[Function]}
                                                                                onInputChange={[Function]}
                                                                                onOpen={[Function]}
                                                                                open={false}
                                                                                openText="standalone.selector.base-selector.open-icon-text"
                                                                                options={Array []}
                                                                                popupIcon={<Memo />}
                                                                                renderInput={[Function]}
                                                                                renderOption={[Function]}
                                                                                selectOnFocus={true}
                                                                                value={null}
                                                                              >
                                                                                <ForwardRef(Autocomplete)
                                                                                  autoComplete={true}
                                                                                  blurOnSelect={true}
                                                                                  classes={
                                                                                    Object {
                                                                                      "clearIndicator": "standalone-selector--selector-multi-MuiAutocomplete-clearIndicator",
                                                                                      "clearIndicatorDirty": "standalone-selector--selector-multi-MuiAutocomplete-clearIndicatorDirty",
                                                                                      "endAdornment": "standalone-selector--selector-multi-MuiAutocomplete-endAdornment",
                                                                                      "focused": "Mui-focused",
                                                                                      "fullWidth": "standalone-selector--selector-multi-MuiAutocomplete-fullWidth",
                                                                                      "groupLabel": "standalone-selector--selector-multi-MuiAutocomplete-groupLabel",
                                                                                      "groupUl": "standalone-selector--selector-multi-MuiAutocomplete-groupUl",
                                                                                      "hasClearIcon": "standalone-selector--selector-multi-MuiAutocomplete-hasClearIcon",
                                                                                      "hasPopupIcon": "standalone-selector--selector-multi-MuiAutocomplete-hasPopupIcon",
                                                                                      "input": "standalone-selector--selector-multi-MuiAutocomplete-input",
                                                                                      "inputFocused": "standalone-selector--selector-multi-MuiAutocomplete-inputFocused",
                                                                                      "inputRoot": "standalone-selector--selector-multi-MuiAutocomplete-inputRoot undefined standalone-selector--selector-multi-CcMultiSelectBase-inputRoot-34 standalone-selector--selector-multi-CcMultiSelectBase-inputRoot-35",
                                                                                      "listbox": "standalone-selector--selector-multi-MuiAutocomplete-listbox",
                                                                                      "loading": "standalone-selector--selector-multi-MuiAutocomplete-loading",
                                                                                      "noOptions": "standalone-selector--selector-multi-MuiAutocomplete-noOptions",
                                                                                      "option": "standalone-selector--selector-multi-MuiAutocomplete-option",
                                                                                      "paper": "standalone-selector--selector-multi-MuiAutocomplete-paper",
                                                                                      "popper": "standalone-selector--selector-multi-MuiAutocomplete-popper",
                                                                                      "popperDisablePortal": "standalone-selector--selector-multi-MuiAutocomplete-popperDisablePortal",
                                                                                      "popupIndicator": "standalone-selector--selector-multi-MuiAutocomplete-popupIndicator",
                                                                                      "popupIndicatorOpen": "standalone-selector--selector-multi-MuiAutocomplete-popupIndicatorOpen",
                                                                                      "root": "standalone-selector--selector-multi-MuiAutocomplete-root",
                                                                                      "tag": "standalone-selector--selector-multi-MuiAutocomplete-tag",
                                                                                      "tagSizeSmall": "standalone-selector--selector-multi-MuiAutocomplete-tagSizeSmall",
                                                                                    }
                                                                                  }
                                                                                  closeText="standalone.selector.base-selector.close-icon-text"
                                                                                  disabled={false}
                                                                                  filterOptions={[Function]}
                                                                                  getOptionDisabled={[Function]}
                                                                                  getOptionLabel={[Function]}
                                                                                  getOptionSelected={[Function]}
                                                                                  id="multi-select"
                                                                                  inputValue=""
                                                                                  loading={true}
                                                                                  loadingText="Loading.."
                                                                                  noOptionsText="standalone.selector.base-selector.no-options-text"
                                                                                  onChange={[Function]}
                                                                                  onClose={[Function]}
                                                                                  onInputChange={[Function]}
                                                                                  onOpen={[Function]}
                                                                                  open={false}
                                                                                  openText="standalone.selector.base-selector.open-icon-text"
                                                                                  options={Array []}
                                                                                  popupIcon={<Memo />}
                                                                                  renderInput={[Function]}
                                                                                  renderOption={[Function]}
                                                                                  selectOnFocus={true}
                                                                                  value={null}
                                                                                >
                                                                                  <div
                                                                                    aria-expanded={false}
                                                                                    aria-owns={null}
                                                                                    className="standalone-selector--selector-multi-MuiAutocomplete-root standalone-selector--selector-multi-MuiAutocomplete-hasClearIcon standalone-selector--selector-multi-MuiAutocomplete-hasPopupIcon"
                                                                                    onClick={[Function]}
                                                                                    onKeyDown={[Function]}
                                                                                    onMouseDown={[Function]}
                                                                                    role="combobox"
                                                                                  >
                                                                                    <ForwardRef
                                                                                      className="standalone-selector--selector-multi-MuiAutocomplete-inputRoot undefined standalone-selector--selector-multi-CcMultiSelectBase-inputRoot-34 standalone-selector--selector-multi-CcMultiSelectBase-inputRoot-35"
                                                                                      disabled={false}
                                                                                      endAdornment={
                                                                                        <div
                                                                                          className="standalone-selector--selector-multi-MuiAutocomplete-endAdornment"
                                                                                        >
                                                                                          <WithStyles(ForwardRef(IconButton))
                                                                                            aria-label="Clear"
                                                                                            className="standalone-selector--selector-multi-MuiAutocomplete-clearIndicator"
                                                                                            onClick={[Function]}
                                                                                            tabIndex={-1}
                                                                                            title="Clear"
                                                                                          >
                                                                                            <Memo
                                                                                              fontSize="small"
                                                                                            />
                                                                                          </WithStyles(ForwardRef(IconButton))>
                                                                                          <WithStyles(ForwardRef(IconButton))
                                                                                            aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                            className="standalone-selector--selector-multi-MuiAutocomplete-popupIndicator"
                                                                                            disabled={false}
                                                                                            onClick={[Function]}
                                                                                            tabIndex={-1}
                                                                                            title="standalone.selector.base-selector.open-icon-text"
                                                                                          >
                                                                                            <Memo />
                                                                                          </WithStyles(ForwardRef(IconButton))>
                                                                                        </div>
                                                                                      }
                                                                                      fullWidth={true}
                                                                                      id="multi-select"
                                                                                      inputProps={
                                                                                        Object {
                                                                                          "aria-activedescendant": null,
                                                                                          "aria-autocomplete": "both",
                                                                                          "aria-controls": null,
                                                                                          "autoCapitalize": "none",
                                                                                          "autoComplete": "off",
                                                                                          "className": "standalone-selector--selector-multi-MuiAutocomplete-input standalone-selector--selector-multi-MuiAutocomplete-inputFocused",
                                                                                          "disabled": false,
                                                                                          "id": "multi-select",
                                                                                          "onBlur": [Function],
                                                                                          "onChange": [Function],
                                                                                          "onFocus": [Function],
                                                                                          "onMouseDown": [Function],
                                                                                          "ref": Object {
                                                                                            "current": <input
                                                                                              aria-autocomplete="both"
                                                                                              aria-invalid="false"
                                                                                              autocapitalize="none"
                                                                                              autocomplete="off"
                                                                                              class="standalone-selector--selector-multi-MuiInputBase-input standalone-selector--selector-multi-MuiOutlinedInput-input standalone-selector--selector-multi-CcUIKitInput-input-45 standalone-selector--selector-multi-CcUIKitInput-input-47 standalone-selector--selector-multi-MuiAutocomplete-input standalone-selector--selector-multi-MuiAutocomplete-inputFocused standalone-selector--selector-multi-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-MuiOutlinedInput-inputAdornedEnd"
                                                                                              id="multi-select"
                                                                                              placeholder="Select.."
                                                                                              spellcheck="false"
                                                                                              type="text"
                                                                                              value=""
                                                                                            />,
                                                                                          },
                                                                                          "spellCheck": "false",
                                                                                          "value": "",
                                                                                        }
                                                                                      }
                                                                                      onChange={[Function]}
                                                                                      placeholder="Select.."
                                                                                    >
                                                                                      <WithStyles(ForwardRef(OutlinedInput))
                                                                                        className="standalone-selector--selector-multi-MuiAutocomplete-inputRoot undefined standalone-selector--selector-multi-CcMultiSelectBase-inputRoot-34 standalone-selector--selector-multi-CcMultiSelectBase-inputRoot-35"
                                                                                        classes={
                                                                                          Object {
                                                                                            "input": "standalone-selector--selector-multi-CcUIKitInput-input-45 standalone-selector--selector-multi-CcUIKitInput-input-47",
                                                                                            "multiline": "standalone-selector--selector-multi-CcUIKitInput-multiline-46",
                                                                                            "root": "standalone-selector--selector-multi-CcUIKitInput-root-44",
                                                                                          }
                                                                                        }
                                                                                        disabled={false}
                                                                                        endAdornment={
                                                                                          <div
                                                                                            className="standalone-selector--selector-multi-MuiAutocomplete-endAdornment"
                                                                                          >
                                                                                            <WithStyles(ForwardRef(IconButton))
                                                                                              aria-label="Clear"
                                                                                              className="standalone-selector--selector-multi-MuiAutocomplete-clearIndicator"
                                                                                              onClick={[Function]}
                                                                                              tabIndex={-1}
                                                                                              title="Clear"
                                                                                            >
                                                                                              <Memo
                                                                                                fontSize="small"
                                                                                              />
                                                                                            </WithStyles(ForwardRef(IconButton))>
                                                                                            <WithStyles(ForwardRef(IconButton))
                                                                                              aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                              className="standalone-selector--selector-multi-MuiAutocomplete-popupIndicator"
                                                                                              disabled={false}
                                                                                              onClick={[Function]}
                                                                                              tabIndex={-1}
                                                                                              title="standalone.selector.base-selector.open-icon-text"
                                                                                            >
                                                                                              <Memo />
                                                                                            </WithStyles(ForwardRef(IconButton))>
                                                                                          </div>
                                                                                        }
                                                                                        fullWidth={true}
                                                                                        id="multi-select"
                                                                                        inputProps={
                                                                                          Object {
                                                                                            "aria-activedescendant": null,
                                                                                            "aria-autocomplete": "both",
                                                                                            "aria-controls": null,
                                                                                            "autoCapitalize": "none",
                                                                                            "autoComplete": "off",
                                                                                            "className": "standalone-selector--selector-multi-MuiAutocomplete-input standalone-selector--selector-multi-MuiAutocomplete-inputFocused",
                                                                                            "disabled": false,
                                                                                            "id": "multi-select",
                                                                                            "onBlur": [Function],
                                                                                            "onChange": [Function],
                                                                                            "onFocus": [Function],
                                                                                            "onMouseDown": [Function],
                                                                                            "ref": Object {
                                                                                              "current": <input
                                                                                                aria-autocomplete="both"
                                                                                                aria-invalid="false"
                                                                                                autocapitalize="none"
                                                                                                autocomplete="off"
                                                                                                class="standalone-selector--selector-multi-MuiInputBase-input standalone-selector--selector-multi-MuiOutlinedInput-input standalone-selector--selector-multi-CcUIKitInput-input-45 standalone-selector--selector-multi-CcUIKitInput-input-47 standalone-selector--selector-multi-MuiAutocomplete-input standalone-selector--selector-multi-MuiAutocomplete-inputFocused standalone-selector--selector-multi-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-MuiOutlinedInput-inputAdornedEnd"
                                                                                                id="multi-select"
                                                                                                placeholder="Select.."
                                                                                                spellcheck="false"
                                                                                                type="text"
                                                                                                value=""
                                                                                              />,
                                                                                            },
                                                                                            "spellCheck": "false",
                                                                                            "value": "",
                                                                                          }
                                                                                        }
                                                                                        onChange={[Function]}
                                                                                        placeholder="Select.."
                                                                                      >
                                                                                        <ForwardRef(OutlinedInput)
                                                                                          className="standalone-selector--selector-multi-MuiAutocomplete-inputRoot undefined standalone-selector--selector-multi-CcMultiSelectBase-inputRoot-34 standalone-selector--selector-multi-CcMultiSelectBase-inputRoot-35"
                                                                                          classes={
                                                                                            Object {
                                                                                              "adornedEnd": "standalone-selector--selector-multi-MuiOutlinedInput-adornedEnd",
                                                                                              "adornedStart": "standalone-selector--selector-multi-MuiOutlinedInput-adornedStart",
                                                                                              "colorSecondary": "standalone-selector--selector-multi-MuiOutlinedInput-colorSecondary",
                                                                                              "disabled": "Mui-disabled",
                                                                                              "error": "Mui-error",
                                                                                              "focused": "Mui-focused",
                                                                                              "input": "standalone-selector--selector-multi-MuiOutlinedInput-input standalone-selector--selector-multi-CcUIKitInput-input-45 standalone-selector--selector-multi-CcUIKitInput-input-47",
                                                                                              "inputAdornedEnd": "standalone-selector--selector-multi-MuiOutlinedInput-inputAdornedEnd",
                                                                                              "inputAdornedStart": "standalone-selector--selector-multi-MuiOutlinedInput-inputAdornedStart",
                                                                                              "inputMarginDense": "standalone-selector--selector-multi-MuiOutlinedInput-inputMarginDense",
                                                                                              "inputMultiline": "standalone-selector--selector-multi-MuiOutlinedInput-inputMultiline",
                                                                                              "marginDense": "standalone-selector--selector-multi-MuiOutlinedInput-marginDense",
                                                                                              "multiline": "standalone-selector--selector-multi-MuiOutlinedInput-multiline standalone-selector--selector-multi-CcUIKitInput-multiline-46",
                                                                                              "notchedOutline": "standalone-selector--selector-multi-MuiOutlinedInput-notchedOutline",
                                                                                              "root": "standalone-selector--selector-multi-MuiOutlinedInput-root standalone-selector--selector-multi-CcUIKitInput-root-44",
                                                                                            }
                                                                                          }
                                                                                          disabled={false}
                                                                                          endAdornment={
                                                                                            <div
                                                                                              className="standalone-selector--selector-multi-MuiAutocomplete-endAdornment"
                                                                                            >
                                                                                              <WithStyles(ForwardRef(IconButton))
                                                                                                aria-label="Clear"
                                                                                                className="standalone-selector--selector-multi-MuiAutocomplete-clearIndicator"
                                                                                                onClick={[Function]}
                                                                                                tabIndex={-1}
                                                                                                title="Clear"
                                                                                              >
                                                                                                <Memo
                                                                                                  fontSize="small"
                                                                                                />
                                                                                              </WithStyles(ForwardRef(IconButton))>
                                                                                              <WithStyles(ForwardRef(IconButton))
                                                                                                aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                                className="standalone-selector--selector-multi-MuiAutocomplete-popupIndicator"
                                                                                                disabled={false}
                                                                                                onClick={[Function]}
                                                                                                tabIndex={-1}
                                                                                                title="standalone.selector.base-selector.open-icon-text"
                                                                                              >
                                                                                                <Memo />
                                                                                              </WithStyles(ForwardRef(IconButton))>
                                                                                            </div>
                                                                                          }
                                                                                          fullWidth={true}
                                                                                          id="multi-select"
                                                                                          inputProps={
                                                                                            Object {
                                                                                              "aria-activedescendant": null,
                                                                                              "aria-autocomplete": "both",
                                                                                              "aria-controls": null,
                                                                                              "autoCapitalize": "none",
                                                                                              "autoComplete": "off",
                                                                                              "className": "standalone-selector--selector-multi-MuiAutocomplete-input standalone-selector--selector-multi-MuiAutocomplete-inputFocused",
                                                                                              "disabled": false,
                                                                                              "id": "multi-select",
                                                                                              "onBlur": [Function],
                                                                                              "onChange": [Function],
                                                                                              "onFocus": [Function],
                                                                                              "onMouseDown": [Function],
                                                                                              "ref": Object {
                                                                                                "current": <input
                                                                                                  aria-autocomplete="both"
                                                                                                  aria-invalid="false"
                                                                                                  autocapitalize="none"
                                                                                                  autocomplete="off"
                                                                                                  class="standalone-selector--selector-multi-MuiInputBase-input standalone-selector--selector-multi-MuiOutlinedInput-input standalone-selector--selector-multi-CcUIKitInput-input-45 standalone-selector--selector-multi-CcUIKitInput-input-47 standalone-selector--selector-multi-MuiAutocomplete-input standalone-selector--selector-multi-MuiAutocomplete-inputFocused standalone-selector--selector-multi-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-MuiOutlinedInput-inputAdornedEnd"
                                                                                                  id="multi-select"
                                                                                                  placeholder="Select.."
                                                                                                  spellcheck="false"
                                                                                                  type="text"
                                                                                                  value=""
                                                                                                />,
                                                                                              },
                                                                                              "spellCheck": "false",
                                                                                              "value": "",
                                                                                            }
                                                                                          }
                                                                                          onChange={[Function]}
                                                                                          placeholder="Select.."
                                                                                        >
                                                                                          <WithStyles(ForwardRef(InputBase))
                                                                                            className="standalone-selector--selector-multi-MuiAutocomplete-inputRoot undefined standalone-selector--selector-multi-CcMultiSelectBase-inputRoot-34 standalone-selector--selector-multi-CcMultiSelectBase-inputRoot-35"
                                                                                            classes={
                                                                                              Object {
                                                                                                "adornedEnd": "standalone-selector--selector-multi-MuiOutlinedInput-adornedEnd",
                                                                                                "adornedStart": "standalone-selector--selector-multi-MuiOutlinedInput-adornedStart",
                                                                                                "colorSecondary": "standalone-selector--selector-multi-MuiOutlinedInput-colorSecondary",
                                                                                                "disabled": "Mui-disabled",
                                                                                                "error": "Mui-error",
                                                                                                "focused": "Mui-focused",
                                                                                                "input": "standalone-selector--selector-multi-MuiOutlinedInput-input standalone-selector--selector-multi-CcUIKitInput-input-45 standalone-selector--selector-multi-CcUIKitInput-input-47",
                                                                                                "inputAdornedEnd": "standalone-selector--selector-multi-MuiOutlinedInput-inputAdornedEnd",
                                                                                                "inputAdornedStart": "standalone-selector--selector-multi-MuiOutlinedInput-inputAdornedStart",
                                                                                                "inputMarginDense": "standalone-selector--selector-multi-MuiOutlinedInput-inputMarginDense",
                                                                                                "inputMultiline": "standalone-selector--selector-multi-MuiOutlinedInput-inputMultiline",
                                                                                                "marginDense": "standalone-selector--selector-multi-MuiOutlinedInput-marginDense",
                                                                                                "multiline": "standalone-selector--selector-multi-MuiOutlinedInput-multiline standalone-selector--selector-multi-CcUIKitInput-multiline-46",
                                                                                                "notchedOutline": null,
                                                                                                "root": "standalone-selector--selector-multi-MuiOutlinedInput-root standalone-selector--selector-multi-CcUIKitInput-root-44",
                                                                                              }
                                                                                            }
                                                                                            disabled={false}
                                                                                            endAdornment={
                                                                                              <div
                                                                                                className="standalone-selector--selector-multi-MuiAutocomplete-endAdornment"
                                                                                              >
                                                                                                <WithStyles(ForwardRef(IconButton))
                                                                                                  aria-label="Clear"
                                                                                                  className="standalone-selector--selector-multi-MuiAutocomplete-clearIndicator"
                                                                                                  onClick={[Function]}
                                                                                                  tabIndex={-1}
                                                                                                  title="Clear"
                                                                                                >
                                                                                                  <Memo
                                                                                                    fontSize="small"
                                                                                                  />
                                                                                                </WithStyles(ForwardRef(IconButton))>
                                                                                                <WithStyles(ForwardRef(IconButton))
                                                                                                  aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                                  className="standalone-selector--selector-multi-MuiAutocomplete-popupIndicator"
                                                                                                  disabled={false}
                                                                                                  onClick={[Function]}
                                                                                                  tabIndex={-1}
                                                                                                  title="standalone.selector.base-selector.open-icon-text"
                                                                                                >
                                                                                                  <Memo />
                                                                                                </WithStyles(ForwardRef(IconButton))>
                                                                                              </div>
                                                                                            }
                                                                                            fullWidth={true}
                                                                                            id="multi-select"
                                                                                            inputComponent="input"
                                                                                            inputProps={
                                                                                              Object {
                                                                                                "aria-activedescendant": null,
                                                                                                "aria-autocomplete": "both",
                                                                                                "aria-controls": null,
                                                                                                "autoCapitalize": "none",
                                                                                                "autoComplete": "off",
                                                                                                "className": "standalone-selector--selector-multi-MuiAutocomplete-input standalone-selector--selector-multi-MuiAutocomplete-inputFocused",
                                                                                                "disabled": false,
                                                                                                "id": "multi-select",
                                                                                                "onBlur": [Function],
                                                                                                "onChange": [Function],
                                                                                                "onFocus": [Function],
                                                                                                "onMouseDown": [Function],
                                                                                                "ref": Object {
                                                                                                  "current": <input
                                                                                                    aria-autocomplete="both"
                                                                                                    aria-invalid="false"
                                                                                                    autocapitalize="none"
                                                                                                    autocomplete="off"
                                                                                                    class="standalone-selector--selector-multi-MuiInputBase-input standalone-selector--selector-multi-MuiOutlinedInput-input standalone-selector--selector-multi-CcUIKitInput-input-45 standalone-selector--selector-multi-CcUIKitInput-input-47 standalone-selector--selector-multi-MuiAutocomplete-input standalone-selector--selector-multi-MuiAutocomplete-inputFocused standalone-selector--selector-multi-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-MuiOutlinedInput-inputAdornedEnd"
                                                                                                    id="multi-select"
                                                                                                    placeholder="Select.."
                                                                                                    spellcheck="false"
                                                                                                    type="text"
                                                                                                    value=""
                                                                                                  />,
                                                                                                },
                                                                                                "spellCheck": "false",
                                                                                                "value": "",
                                                                                              }
                                                                                            }
                                                                                            multiline={false}
                                                                                            onChange={[Function]}
                                                                                            placeholder="Select.."
                                                                                            renderSuffix={[Function]}
                                                                                            type="text"
                                                                                          >
                                                                                            <ForwardRef(InputBase)
                                                                                              className="standalone-selector--selector-multi-MuiAutocomplete-inputRoot undefined standalone-selector--selector-multi-CcMultiSelectBase-inputRoot-34 standalone-selector--selector-multi-CcMultiSelectBase-inputRoot-35"
                                                                                              classes={
                                                                                                Object {
                                                                                                  "adornedEnd": "standalone-selector--selector-multi-MuiInputBase-adornedEnd standalone-selector--selector-multi-MuiOutlinedInput-adornedEnd",
                                                                                                  "adornedStart": "standalone-selector--selector-multi-MuiInputBase-adornedStart standalone-selector--selector-multi-MuiOutlinedInput-adornedStart",
                                                                                                  "colorSecondary": "standalone-selector--selector-multi-MuiInputBase-colorSecondary standalone-selector--selector-multi-MuiOutlinedInput-colorSecondary",
                                                                                                  "disabled": "Mui-disabled Mui-disabled",
                                                                                                  "error": "Mui-error Mui-error",
                                                                                                  "focused": "Mui-focused Mui-focused",
                                                                                                  "formControl": "standalone-selector--selector-multi-MuiInputBase-formControl",
                                                                                                  "fullWidth": "standalone-selector--selector-multi-MuiInputBase-fullWidth",
                                                                                                  "input": "standalone-selector--selector-multi-MuiInputBase-input standalone-selector--selector-multi-MuiOutlinedInput-input standalone-selector--selector-multi-CcUIKitInput-input-45 standalone-selector--selector-multi-CcUIKitInput-input-47",
                                                                                                  "inputAdornedEnd": "standalone-selector--selector-multi-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-MuiOutlinedInput-inputAdornedEnd",
                                                                                                  "inputAdornedStart": "standalone-selector--selector-multi-MuiInputBase-inputAdornedStart standalone-selector--selector-multi-MuiOutlinedInput-inputAdornedStart",
                                                                                                  "inputHiddenLabel": "standalone-selector--selector-multi-MuiInputBase-inputHiddenLabel",
                                                                                                  "inputMarginDense": "standalone-selector--selector-multi-MuiInputBase-inputMarginDense standalone-selector--selector-multi-MuiOutlinedInput-inputMarginDense",
                                                                                                  "inputMultiline": "standalone-selector--selector-multi-MuiInputBase-inputMultiline standalone-selector--selector-multi-MuiOutlinedInput-inputMultiline",
                                                                                                  "inputTypeSearch": "standalone-selector--selector-multi-MuiInputBase-inputTypeSearch",
                                                                                                  "marginDense": "standalone-selector--selector-multi-MuiInputBase-marginDense standalone-selector--selector-multi-MuiOutlinedInput-marginDense",
                                                                                                  "multiline": "standalone-selector--selector-multi-MuiInputBase-multiline standalone-selector--selector-multi-MuiOutlinedInput-multiline standalone-selector--selector-multi-CcUIKitInput-multiline-46",
                                                                                                  "root": "standalone-selector--selector-multi-MuiInputBase-root standalone-selector--selector-multi-MuiOutlinedInput-root standalone-selector--selector-multi-CcUIKitInput-root-44",
                                                                                                }
                                                                                              }
                                                                                              disabled={false}
                                                                                              endAdornment={
                                                                                                <div
                                                                                                  className="standalone-selector--selector-multi-MuiAutocomplete-endAdornment"
                                                                                                >
                                                                                                  <WithStyles(ForwardRef(IconButton))
                                                                                                    aria-label="Clear"
                                                                                                    className="standalone-selector--selector-multi-MuiAutocomplete-clearIndicator"
                                                                                                    onClick={[Function]}
                                                                                                    tabIndex={-1}
                                                                                                    title="Clear"
                                                                                                  >
                                                                                                    <Memo
                                                                                                      fontSize="small"
                                                                                                    />
                                                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                                                  <WithStyles(ForwardRef(IconButton))
                                                                                                    aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                                    className="standalone-selector--selector-multi-MuiAutocomplete-popupIndicator"
                                                                                                    disabled={false}
                                                                                                    onClick={[Function]}
                                                                                                    tabIndex={-1}
                                                                                                    title="standalone.selector.base-selector.open-icon-text"
                                                                                                  >
                                                                                                    <Memo />
                                                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                                                </div>
                                                                                              }
                                                                                              fullWidth={true}
                                                                                              id="multi-select"
                                                                                              inputComponent="input"
                                                                                              inputProps={
                                                                                                Object {
                                                                                                  "aria-activedescendant": null,
                                                                                                  "aria-autocomplete": "both",
                                                                                                  "aria-controls": null,
                                                                                                  "autoCapitalize": "none",
                                                                                                  "autoComplete": "off",
                                                                                                  "className": "standalone-selector--selector-multi-MuiAutocomplete-input standalone-selector--selector-multi-MuiAutocomplete-inputFocused",
                                                                                                  "disabled": false,
                                                                                                  "id": "multi-select",
                                                                                                  "onBlur": [Function],
                                                                                                  "onChange": [Function],
                                                                                                  "onFocus": [Function],
                                                                                                  "onMouseDown": [Function],
                                                                                                  "ref": Object {
                                                                                                    "current": <input
                                                                                                      aria-autocomplete="both"
                                                                                                      aria-invalid="false"
                                                                                                      autocapitalize="none"
                                                                                                      autocomplete="off"
                                                                                                      class="standalone-selector--selector-multi-MuiInputBase-input standalone-selector--selector-multi-MuiOutlinedInput-input standalone-selector--selector-multi-CcUIKitInput-input-45 standalone-selector--selector-multi-CcUIKitInput-input-47 standalone-selector--selector-multi-MuiAutocomplete-input standalone-selector--selector-multi-MuiAutocomplete-inputFocused standalone-selector--selector-multi-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-MuiOutlinedInput-inputAdornedEnd"
                                                                                                      id="multi-select"
                                                                                                      placeholder="Select.."
                                                                                                      spellcheck="false"
                                                                                                      type="text"
                                                                                                      value=""
                                                                                                    />,
                                                                                                  },
                                                                                                  "spellCheck": "false",
                                                                                                  "value": "",
                                                                                                }
                                                                                              }
                                                                                              multiline={false}
                                                                                              onChange={[Function]}
                                                                                              placeholder="Select.."
                                                                                              renderSuffix={[Function]}
                                                                                              type="text"
                                                                                            >
                                                                                              <div
                                                                                                className="standalone-selector--selector-multi-MuiInputBase-root standalone-selector--selector-multi-MuiOutlinedInput-root standalone-selector--selector-multi-CcUIKitInput-root-44 standalone-selector--selector-multi-MuiAutocomplete-inputRoot undefined standalone-selector--selector-multi-CcMultiSelectBase-inputRoot-34 standalone-selector--selector-multi-CcMultiSelectBase-inputRoot-35 standalone-selector--selector-multi-MuiInputBase-fullWidth standalone-selector--selector-multi-MuiInputBase-formControl standalone-selector--selector-multi-MuiInputBase-adornedEnd standalone-selector--selector-multi-MuiOutlinedInput-adornedEnd"
                                                                                                onClick={[Function]}
                                                                                              >
                                                                                                <input
                                                                                                  aria-activedescendant={null}
                                                                                                  aria-autocomplete="both"
                                                                                                  aria-controls={null}
                                                                                                  aria-invalid={false}
                                                                                                  autoCapitalize="none"
                                                                                                  autoComplete="off"
                                                                                                  className="standalone-selector--selector-multi-MuiInputBase-input standalone-selector--selector-multi-MuiOutlinedInput-input standalone-selector--selector-multi-CcUIKitInput-input-45 standalone-selector--selector-multi-CcUIKitInput-input-47 standalone-selector--selector-multi-MuiAutocomplete-input standalone-selector--selector-multi-MuiAutocomplete-inputFocused standalone-selector--selector-multi-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-MuiOutlinedInput-inputAdornedEnd"
                                                                                                  disabled={false}
                                                                                                  id="multi-select"
                                                                                                  onAnimationStart={[Function]}
                                                                                                  onBlur={[Function]}
                                                                                                  onChange={[Function]}
                                                                                                  onFocus={[Function]}
                                                                                                  onMouseDown={[Function]}
                                                                                                  placeholder="Select.."
                                                                                                  required={false}
                                                                                                  spellCheck="false"
                                                                                                  type="text"
                                                                                                  value=""
                                                                                                />
                                                                                                <div
                                                                                                  className="standalone-selector--selector-multi-MuiAutocomplete-endAdornment"
                                                                                                >
                                                                                                  <WithStyles(ForwardRef(IconButton))
                                                                                                    aria-label="Clear"
                                                                                                    className="standalone-selector--selector-multi-MuiAutocomplete-clearIndicator"
                                                                                                    onClick={[Function]}
                                                                                                    tabIndex={-1}
                                                                                                    title="Clear"
                                                                                                  >
                                                                                                    <ForwardRef(IconButton)
                                                                                                      aria-label="Clear"
                                                                                                      className="standalone-selector--selector-multi-MuiAutocomplete-clearIndicator"
                                                                                                      classes={
                                                                                                        Object {
                                                                                                          "colorInherit": "standalone-selector--selector-multi-MuiIconButton-colorInherit",
                                                                                                          "colorPrimary": "standalone-selector--selector-multi-MuiIconButton-colorPrimary",
                                                                                                          "colorSecondary": "standalone-selector--selector-multi-MuiIconButton-colorSecondary",
                                                                                                          "disabled": "Mui-disabled",
                                                                                                          "edgeEnd": "standalone-selector--selector-multi-MuiIconButton-edgeEnd",
                                                                                                          "edgeStart": "standalone-selector--selector-multi-MuiIconButton-edgeStart",
                                                                                                          "label": "standalone-selector--selector-multi-MuiIconButton-label",
                                                                                                          "root": "standalone-selector--selector-multi-MuiIconButton-root",
                                                                                                          "sizeSmall": "standalone-selector--selector-multi-MuiIconButton-sizeSmall",
                                                                                                        }
                                                                                                      }
                                                                                                      onClick={[Function]}
                                                                                                      tabIndex={-1}
                                                                                                      title="Clear"
                                                                                                    >
                                                                                                      <WithStyles(ForwardRef(ButtonBase))
                                                                                                        aria-label="Clear"
                                                                                                        centerRipple={true}
                                                                                                        className="standalone-selector--selector-multi-MuiIconButton-root standalone-selector--selector-multi-MuiAutocomplete-clearIndicator"
                                                                                                        disabled={false}
                                                                                                        focusRipple={true}
                                                                                                        onClick={[Function]}
                                                                                                        tabIndex={-1}
                                                                                                        title="Clear"
                                                                                                      >
                                                                                                        <ForwardRef(ButtonBase)
                                                                                                          aria-label="Clear"
                                                                                                          centerRipple={true}
                                                                                                          className="standalone-selector--selector-multi-MuiIconButton-root standalone-selector--selector-multi-MuiAutocomplete-clearIndicator"
                                                                                                          classes={
                                                                                                            Object {
                                                                                                              "disabled": "Mui-disabled",
                                                                                                              "focusVisible": "Mui-focusVisible",
                                                                                                              "root": "standalone-selector--selector-multi-MuiButtonBase-root",
                                                                                                            }
                                                                                                          }
                                                                                                          disabled={false}
                                                                                                          focusRipple={true}
                                                                                                          onClick={[Function]}
                                                                                                          tabIndex={-1}
                                                                                                          title="Clear"
                                                                                                        >
                                                                                                          <button
                                                                                                            aria-label="Clear"
                                                                                                            className="standalone-selector--selector-multi-MuiButtonBase-root standalone-selector--selector-multi-MuiIconButton-root standalone-selector--selector-multi-MuiAutocomplete-clearIndicator"
                                                                                                            disabled={false}
                                                                                                            onBlur={[Function]}
                                                                                                            onClick={[Function]}
                                                                                                            onDragLeave={[Function]}
                                                                                                            onFocus={[Function]}
                                                                                                            onKeyDown={[Function]}
                                                                                                            onKeyUp={[Function]}
                                                                                                            onMouseDown={[Function]}
                                                                                                            onMouseLeave={[Function]}
                                                                                                            onMouseUp={[Function]}
                                                                                                            onTouchEnd={[Function]}
                                                                                                            onTouchMove={[Function]}
                                                                                                            onTouchStart={[Function]}
                                                                                                            tabIndex={-1}
                                                                                                            title="Clear"
                                                                                                            type="button"
                                                                                                          >
                                                                                                            <span
                                                                                                              className="standalone-selector--selector-multi-MuiIconButton-label"
                                                                                                            >
                                                                                                              <ForwardRef(CloseIcon)
                                                                                                                fontSize="small"
                                                                                                              >
                                                                                                                <WithStyles(ForwardRef(SvgIcon))
                                                                                                                  fontSize="small"
                                                                                                                >
                                                                                                                  <ForwardRef(SvgIcon)
                                                                                                                    classes={
                                                                                                                      Object {
                                                                                                                        "colorAction": "standalone-selector--selector-multi-MuiSvgIcon-colorAction",
                                                                                                                        "colorDisabled": "standalone-selector--selector-multi-MuiSvgIcon-colorDisabled",
                                                                                                                        "colorError": "standalone-selector--selector-multi-MuiSvgIcon-colorError",
                                                                                                                        "colorPrimary": "standalone-selector--selector-multi-MuiSvgIcon-colorPrimary",
                                                                                                                        "colorSecondary": "standalone-selector--selector-multi-MuiSvgIcon-colorSecondary",
                                                                                                                        "fontSizeInherit": "standalone-selector--selector-multi-MuiSvgIcon-fontSizeInherit",
                                                                                                                        "fontSizeLarge": "standalone-selector--selector-multi-MuiSvgIcon-fontSizeLarge",
                                                                                                                        "fontSizeSmall": "standalone-selector--selector-multi-MuiSvgIcon-fontSizeSmall",
                                                                                                                        "root": "standalone-selector--selector-multi-MuiSvgIcon-root",
                                                                                                                      }
                                                                                                                    }
                                                                                                                    fontSize="small"
                                                                                                                  >
                                                                                                                    <svg
                                                                                                                      aria-hidden={true}
                                                                                                                      className="standalone-selector--selector-multi-MuiSvgIcon-root standalone-selector--selector-multi-MuiSvgIcon-fontSizeSmall"
                                                                                                                      focusable="false"
                                                                                                                      viewBox="0 0 24 24"
                                                                                                                    >
                                                                                                                      <path
                                                                                                                        d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                                                                                                                      />
                                                                                                                    </svg>
                                                                                                                  </ForwardRef(SvgIcon)>
                                                                                                                </WithStyles(ForwardRef(SvgIcon))>
                                                                                                              </ForwardRef(CloseIcon)>
                                                                                                            </span>
                                                                                                            <WithStyles(memo)
                                                                                                              center={true}
                                                                                                            >
                                                                                                              <ForwardRef(TouchRipple)
                                                                                                                center={true}
                                                                                                                classes={
                                                                                                                  Object {
                                                                                                                    "child": "standalone-selector--selector-multi-MuiTouchRipple-child",
                                                                                                                    "childLeaving": "standalone-selector--selector-multi-MuiTouchRipple-childLeaving",
                                                                                                                    "childPulsate": "standalone-selector--selector-multi-MuiTouchRipple-childPulsate",
                                                                                                                    "ripple": "standalone-selector--selector-multi-MuiTouchRipple-ripple",
                                                                                                                    "ripplePulsate": "standalone-selector--selector-multi-MuiTouchRipple-ripplePulsate",
                                                                                                                    "rippleVisible": "standalone-selector--selector-multi-MuiTouchRipple-rippleVisible",
                                                                                                                    "root": "standalone-selector--selector-multi-MuiTouchRipple-root",
                                                                                                                  }
                                                                                                                }
                                                                                                              >
                                                                                                                <span
                                                                                                                  className="standalone-selector--selector-multi-MuiTouchRipple-root"
                                                                                                                >
                                                                                                                  <TransitionGroup
                                                                                                                    childFactory={[Function]}
                                                                                                                    component={null}
                                                                                                                    exit={true}
                                                                                                                  />
                                                                                                                </span>
                                                                                                              </ForwardRef(TouchRipple)>
                                                                                                            </WithStyles(memo)>
                                                                                                          </button>
                                                                                                        </ForwardRef(ButtonBase)>
                                                                                                      </WithStyles(ForwardRef(ButtonBase))>
                                                                                                    </ForwardRef(IconButton)>
                                                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                                                  <WithStyles(ForwardRef(IconButton))
                                                                                                    aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                                    className="standalone-selector--selector-multi-MuiAutocomplete-popupIndicator"
                                                                                                    disabled={false}
                                                                                                    onClick={[Function]}
                                                                                                    tabIndex={-1}
                                                                                                    title="standalone.selector.base-selector.open-icon-text"
                                                                                                  >
                                                                                                    <ForwardRef(IconButton)
                                                                                                      aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                                      className="standalone-selector--selector-multi-MuiAutocomplete-popupIndicator"
                                                                                                      classes={
                                                                                                        Object {
                                                                                                          "colorInherit": "standalone-selector--selector-multi-MuiIconButton-colorInherit",
                                                                                                          "colorPrimary": "standalone-selector--selector-multi-MuiIconButton-colorPrimary",
                                                                                                          "colorSecondary": "standalone-selector--selector-multi-MuiIconButton-colorSecondary",
                                                                                                          "disabled": "Mui-disabled",
                                                                                                          "edgeEnd": "standalone-selector--selector-multi-MuiIconButton-edgeEnd",
                                                                                                          "edgeStart": "standalone-selector--selector-multi-MuiIconButton-edgeStart",
                                                                                                          "label": "standalone-selector--selector-multi-MuiIconButton-label",
                                                                                                          "root": "standalone-selector--selector-multi-MuiIconButton-root",
                                                                                                          "sizeSmall": "standalone-selector--selector-multi-MuiIconButton-sizeSmall",
                                                                                                        }
                                                                                                      }
                                                                                                      disabled={false}
                                                                                                      onClick={[Function]}
                                                                                                      tabIndex={-1}
                                                                                                      title="standalone.selector.base-selector.open-icon-text"
                                                                                                    >
                                                                                                      <WithStyles(ForwardRef(ButtonBase))
                                                                                                        aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                                        centerRipple={true}
                                                                                                        className="standalone-selector--selector-multi-MuiIconButton-root standalone-selector--selector-multi-MuiAutocomplete-popupIndicator"
                                                                                                        disabled={false}
                                                                                                        focusRipple={true}
                                                                                                        onClick={[Function]}
                                                                                                        tabIndex={-1}
                                                                                                        title="standalone.selector.base-selector.open-icon-text"
                                                                                                      >
                                                                                                        <ForwardRef(ButtonBase)
                                                                                                          aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                                          centerRipple={true}
                                                                                                          className="standalone-selector--selector-multi-MuiIconButton-root standalone-selector--selector-multi-MuiAutocomplete-popupIndicator"
                                                                                                          classes={
                                                                                                            Object {
                                                                                                              "disabled": "Mui-disabled",
                                                                                                              "focusVisible": "Mui-focusVisible",
                                                                                                              "root": "standalone-selector--selector-multi-MuiButtonBase-root",
                                                                                                            }
                                                                                                          }
                                                                                                          disabled={false}
                                                                                                          focusRipple={true}
                                                                                                          onClick={[Function]}
                                                                                                          tabIndex={-1}
                                                                                                          title="standalone.selector.base-selector.open-icon-text"
                                                                                                        >
                                                                                                          <button
                                                                                                            aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                                            className="standalone-selector--selector-multi-MuiButtonBase-root standalone-selector--selector-multi-MuiIconButton-root standalone-selector--selector-multi-MuiAutocomplete-popupIndicator"
                                                                                                            disabled={false}
                                                                                                            onBlur={[Function]}
                                                                                                            onClick={[Function]}
                                                                                                            onDragLeave={[Function]}
                                                                                                            onFocus={[Function]}
                                                                                                            onKeyDown={[Function]}
                                                                                                            onKeyUp={[Function]}
                                                                                                            onMouseDown={[Function]}
                                                                                                            onMouseLeave={[Function]}
                                                                                                            onMouseUp={[Function]}
                                                                                                            onTouchEnd={[Function]}
                                                                                                            onTouchMove={[Function]}
                                                                                                            onTouchStart={[Function]}
                                                                                                            tabIndex={-1}
                                                                                                            title="standalone.selector.base-selector.open-icon-text"
                                                                                                            type="button"
                                                                                                          >
                                                                                                            <span
                                                                                                              className="standalone-selector--selector-multi-MuiIconButton-label"
                                                                                                            >
                                                                                                              <ForwardRef(ExpandMoreIcon)>
                                                                                                                <WithStyles(ForwardRef(SvgIcon))>
                                                                                                                  <ForwardRef(SvgIcon)
                                                                                                                    classes={
                                                                                                                      Object {
                                                                                                                        "colorAction": "standalone-selector--selector-multi-MuiSvgIcon-colorAction",
                                                                                                                        "colorDisabled": "standalone-selector--selector-multi-MuiSvgIcon-colorDisabled",
                                                                                                                        "colorError": "standalone-selector--selector-multi-MuiSvgIcon-colorError",
                                                                                                                        "colorPrimary": "standalone-selector--selector-multi-MuiSvgIcon-colorPrimary",
                                                                                                                        "colorSecondary": "standalone-selector--selector-multi-MuiSvgIcon-colorSecondary",
                                                                                                                        "fontSizeInherit": "standalone-selector--selector-multi-MuiSvgIcon-fontSizeInherit",
                                                                                                                        "fontSizeLarge": "standalone-selector--selector-multi-MuiSvgIcon-fontSizeLarge",
                                                                                                                        "fontSizeSmall": "standalone-selector--selector-multi-MuiSvgIcon-fontSizeSmall",
                                                                                                                        "root": "standalone-selector--selector-multi-MuiSvgIcon-root",
                                                                                                                      }
                                                                                                                    }
                                                                                                                  >
                                                                                                                    <svg
                                                                                                                      aria-hidden={true}
                                                                                                                      className="standalone-selector--selector-multi-MuiSvgIcon-root"
                                                                                                                      focusable="false"
                                                                                                                      viewBox="0 0 24 24"
                                                                                                                    >
                                                                                                                      <path
                                                                                                                        d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
                                                                                                                      />
                                                                                                                    </svg>
                                                                                                                  </ForwardRef(SvgIcon)>
                                                                                                                </WithStyles(ForwardRef(SvgIcon))>
                                                                                                              </ForwardRef(ExpandMoreIcon)>
                                                                                                            </span>
                                                                                                            <WithStyles(memo)
                                                                                                              center={true}
                                                                                                            >
                                                                                                              <ForwardRef(TouchRipple)
                                                                                                                center={true}
                                                                                                                classes={
                                                                                                                  Object {
                                                                                                                    "child": "standalone-selector--selector-multi-MuiTouchRipple-child",
                                                                                                                    "childLeaving": "standalone-selector--selector-multi-MuiTouchRipple-childLeaving",
                                                                                                                    "childPulsate": "standalone-selector--selector-multi-MuiTouchRipple-childPulsate",
                                                                                                                    "ripple": "standalone-selector--selector-multi-MuiTouchRipple-ripple",
                                                                                                                    "ripplePulsate": "standalone-selector--selector-multi-MuiTouchRipple-ripplePulsate",
                                                                                                                    "rippleVisible": "standalone-selector--selector-multi-MuiTouchRipple-rippleVisible",
                                                                                                                    "root": "standalone-selector--selector-multi-MuiTouchRipple-root",
                                                                                                                  }
                                                                                                                }
                                                                                                              >
                                                                                                                <span
                                                                                                                  className="standalone-selector--selector-multi-MuiTouchRipple-root"
                                                                                                                >
                                                                                                                  <TransitionGroup
                                                                                                                    childFactory={[Function]}
                                                                                                                    component={null}
                                                                                                                    exit={true}
                                                                                                                  />
                                                                                                                </span>
                                                                                                              </ForwardRef(TouchRipple)>
                                                                                                            </WithStyles(memo)>
                                                                                                          </button>
                                                                                                        </ForwardRef(ButtonBase)>
                                                                                                      </WithStyles(ForwardRef(ButtonBase))>
                                                                                                    </ForwardRef(IconButton)>
                                                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                                                </div>
                                                                                                <WithStyles(ForwardRef(NotchedOutline))
                                                                                                  className="standalone-selector--selector-multi-MuiOutlinedInput-notchedOutline"
                                                                                                  labelWidth={0}
                                                                                                  notched={false}
                                                                                                >
                                                                                                  <ForwardRef(NotchedOutline)
                                                                                                    className="standalone-selector--selector-multi-MuiOutlinedInput-notchedOutline"
                                                                                                    classes={
                                                                                                      Object {
                                                                                                        "legend": "standalone-selector--selector-multi-PrivateNotchedOutline-legend-49",
                                                                                                        "legendLabelled": "standalone-selector--selector-multi-PrivateNotchedOutline-legendLabelled-50",
                                                                                                        "legendNotched": "standalone-selector--selector-multi-PrivateNotchedOutline-legendNotched-51",
                                                                                                        "root": "standalone-selector--selector-multi-PrivateNotchedOutline-root-48",
                                                                                                      }
                                                                                                    }
                                                                                                    labelWidth={0}
                                                                                                    notched={false}
                                                                                                  >
                                                                                                    <fieldset
                                                                                                      aria-hidden={true}
                                                                                                      className="standalone-selector--selector-multi-PrivateNotchedOutline-root-48 standalone-selector--selector-multi-MuiOutlinedInput-notchedOutline"
                                                                                                      style={
                                                                                                        Object {
                                                                                                          "paddingLeft": 8,
                                                                                                        }
                                                                                                      }
                                                                                                    >
                                                                                                      <legend
                                                                                                        className="standalone-selector--selector-multi-PrivateNotchedOutline-legend-49"
                                                                                                        style={
                                                                                                          Object {
                                                                                                            "width": 0.01,
                                                                                                          }
                                                                                                        }
                                                                                                      >
                                                                                                        <span
                                                                                                          dangerouslySetInnerHTML={
                                                                                                            Object {
                                                                                                              "__html": "&#8203;",
                                                                                                            }
                                                                                                          }
                                                                                                        />
                                                                                                      </legend>
                                                                                                    </fieldset>
                                                                                                  </ForwardRef(NotchedOutline)>
                                                                                                </WithStyles(ForwardRef(NotchedOutline))>
                                                                                              </div>
                                                                                            </ForwardRef(InputBase)>
                                                                                          </WithStyles(ForwardRef(InputBase))>
                                                                                        </ForwardRef(OutlinedInput)>
                                                                                      </WithStyles(ForwardRef(OutlinedInput))>
                                                                                    </ForwardRef>
                                                                                  </div>
                                                                                </ForwardRef(Autocomplete)>
                                                                              </WithStyles(ForwardRef(Autocomplete))>
                                                                            </div>
                                                                          </ForwardRef(Paper)>
                                                                        </WithStyles(ForwardRef(Paper))>
                                                                      </div>
                                                                    </ForwardRef(Typography)>
                                                                  </WithStyles(ForwardRef(Typography))>
                                                                </div>
                                                              </ForwardRef(Typography)>
                                                            </WithStyles(ForwardRef(Typography))>
                                                          </Memo(InlineSwitch)>
                                                        </Memo(BaseSelector)>
                                                      </div>
                                                    </ForwardRef(Grid)>
                                                  </WithStyles(ForwardRef(Grid))>
                                                  <WithStyles(ForwardRef(Grid))
                                                    className="standalone-selector--selector-multi-CcMultiSelect-selectedEntries-33"
                                                    item={true}
                                                    xs={12}
                                                  >
                                                    <ForwardRef(Grid)
                                                      className="standalone-selector--selector-multi-CcMultiSelect-selectedEntries-33"
                                                      classes={
                                                        Object {
                                                          "align-content-xs-center": "standalone-selector--selector-multi-MuiGrid-align-content-xs-center",
                                                          "align-content-xs-flex-end": "standalone-selector--selector-multi-MuiGrid-align-content-xs-flex-end",
                                                          "align-content-xs-flex-start": "standalone-selector--selector-multi-MuiGrid-align-content-xs-flex-start",
                                                          "align-content-xs-space-around": "standalone-selector--selector-multi-MuiGrid-align-content-xs-space-around",
                                                          "align-content-xs-space-between": "standalone-selector--selector-multi-MuiGrid-align-content-xs-space-between",
                                                          "align-items-xs-baseline": "standalone-selector--selector-multi-MuiGrid-align-items-xs-baseline",
                                                          "align-items-xs-center": "standalone-selector--selector-multi-MuiGrid-align-items-xs-center",
                                                          "align-items-xs-flex-end": "standalone-selector--selector-multi-MuiGrid-align-items-xs-flex-end",
                                                          "align-items-xs-flex-start": "standalone-selector--selector-multi-MuiGrid-align-items-xs-flex-start",
                                                          "container": "standalone-selector--selector-multi-MuiGrid-container",
                                                          "direction-xs-column": "standalone-selector--selector-multi-MuiGrid-direction-xs-column",
                                                          "direction-xs-column-reverse": "standalone-selector--selector-multi-MuiGrid-direction-xs-column-reverse",
                                                          "direction-xs-row-reverse": "standalone-selector--selector-multi-MuiGrid-direction-xs-row-reverse",
                                                          "grid-lg-1": "standalone-selector--selector-multi-MuiGrid-grid-lg-1",
                                                          "grid-lg-10": "standalone-selector--selector-multi-MuiGrid-grid-lg-10",
                                                          "grid-lg-11": "standalone-selector--selector-multi-MuiGrid-grid-lg-11",
                                                          "grid-lg-12": "standalone-selector--selector-multi-MuiGrid-grid-lg-12",
                                                          "grid-lg-2": "standalone-selector--selector-multi-MuiGrid-grid-lg-2",
                                                          "grid-lg-3": "standalone-selector--selector-multi-MuiGrid-grid-lg-3",
                                                          "grid-lg-4": "standalone-selector--selector-multi-MuiGrid-grid-lg-4",
                                                          "grid-lg-5": "standalone-selector--selector-multi-MuiGrid-grid-lg-5",
                                                          "grid-lg-6": "standalone-selector--selector-multi-MuiGrid-grid-lg-6",
                                                          "grid-lg-7": "standalone-selector--selector-multi-MuiGrid-grid-lg-7",
                                                          "grid-lg-8": "standalone-selector--selector-multi-MuiGrid-grid-lg-8",
                                                          "grid-lg-9": "standalone-selector--selector-multi-MuiGrid-grid-lg-9",
                                                          "grid-lg-auto": "standalone-selector--selector-multi-MuiGrid-grid-lg-auto",
                                                          "grid-lg-true": "standalone-selector--selector-multi-MuiGrid-grid-lg-true",
                                                          "grid-md-1": "standalone-selector--selector-multi-MuiGrid-grid-md-1",
                                                          "grid-md-10": "standalone-selector--selector-multi-MuiGrid-grid-md-10",
                                                          "grid-md-11": "standalone-selector--selector-multi-MuiGrid-grid-md-11",
                                                          "grid-md-12": "standalone-selector--selector-multi-MuiGrid-grid-md-12",
                                                          "grid-md-2": "standalone-selector--selector-multi-MuiGrid-grid-md-2",
                                                          "grid-md-3": "standalone-selector--selector-multi-MuiGrid-grid-md-3",
                                                          "grid-md-4": "standalone-selector--selector-multi-MuiGrid-grid-md-4",
                                                          "grid-md-5": "standalone-selector--selector-multi-MuiGrid-grid-md-5",
                                                          "grid-md-6": "standalone-selector--selector-multi-MuiGrid-grid-md-6",
                                                          "grid-md-7": "standalone-selector--selector-multi-MuiGrid-grid-md-7",
                                                          "grid-md-8": "standalone-selector--selector-multi-MuiGrid-grid-md-8",
                                                          "grid-md-9": "standalone-selector--selector-multi-MuiGrid-grid-md-9",
                                                          "grid-md-auto": "standalone-selector--selector-multi-MuiGrid-grid-md-auto",
                                                          "grid-md-true": "standalone-selector--selector-multi-MuiGrid-grid-md-true",
                                                          "grid-sm-1": "standalone-selector--selector-multi-MuiGrid-grid-sm-1",
                                                          "grid-sm-10": "standalone-selector--selector-multi-MuiGrid-grid-sm-10",
                                                          "grid-sm-11": "standalone-selector--selector-multi-MuiGrid-grid-sm-11",
                                                          "grid-sm-12": "standalone-selector--selector-multi-MuiGrid-grid-sm-12",
                                                          "grid-sm-2": "standalone-selector--selector-multi-MuiGrid-grid-sm-2",
                                                          "grid-sm-3": "standalone-selector--selector-multi-MuiGrid-grid-sm-3",
                                                          "grid-sm-4": "standalone-selector--selector-multi-MuiGrid-grid-sm-4",
                                                          "grid-sm-5": "standalone-selector--selector-multi-MuiGrid-grid-sm-5",
                                                          "grid-sm-6": "standalone-selector--selector-multi-MuiGrid-grid-sm-6",
                                                          "grid-sm-7": "standalone-selector--selector-multi-MuiGrid-grid-sm-7",
                                                          "grid-sm-8": "standalone-selector--selector-multi-MuiGrid-grid-sm-8",
                                                          "grid-sm-9": "standalone-selector--selector-multi-MuiGrid-grid-sm-9",
                                                          "grid-sm-auto": "standalone-selector--selector-multi-MuiGrid-grid-sm-auto",
                                                          "grid-sm-true": "standalone-selector--selector-multi-MuiGrid-grid-sm-true",
                                                          "grid-xl-1": "standalone-selector--selector-multi-MuiGrid-grid-xl-1",
                                                          "grid-xl-10": "standalone-selector--selector-multi-MuiGrid-grid-xl-10",
                                                          "grid-xl-11": "standalone-selector--selector-multi-MuiGrid-grid-xl-11",
                                                          "grid-xl-12": "standalone-selector--selector-multi-MuiGrid-grid-xl-12",
                                                          "grid-xl-2": "standalone-selector--selector-multi-MuiGrid-grid-xl-2",
                                                          "grid-xl-3": "standalone-selector--selector-multi-MuiGrid-grid-xl-3",
                                                          "grid-xl-4": "standalone-selector--selector-multi-MuiGrid-grid-xl-4",
                                                          "grid-xl-5": "standalone-selector--selector-multi-MuiGrid-grid-xl-5",
                                                          "grid-xl-6": "standalone-selector--selector-multi-MuiGrid-grid-xl-6",
                                                          "grid-xl-7": "standalone-selector--selector-multi-MuiGrid-grid-xl-7",
                                                          "grid-xl-8": "standalone-selector--selector-multi-MuiGrid-grid-xl-8",
                                                          "grid-xl-9": "standalone-selector--selector-multi-MuiGrid-grid-xl-9",
                                                          "grid-xl-auto": "standalone-selector--selector-multi-MuiGrid-grid-xl-auto",
                                                          "grid-xl-true": "standalone-selector--selector-multi-MuiGrid-grid-xl-true",
                                                          "grid-xs-1": "standalone-selector--selector-multi-MuiGrid-grid-xs-1",
                                                          "grid-xs-10": "standalone-selector--selector-multi-MuiGrid-grid-xs-10",
                                                          "grid-xs-11": "standalone-selector--selector-multi-MuiGrid-grid-xs-11",
                                                          "grid-xs-12": "standalone-selector--selector-multi-MuiGrid-grid-xs-12",
                                                          "grid-xs-2": "standalone-selector--selector-multi-MuiGrid-grid-xs-2",
                                                          "grid-xs-3": "standalone-selector--selector-multi-MuiGrid-grid-xs-3",
                                                          "grid-xs-4": "standalone-selector--selector-multi-MuiGrid-grid-xs-4",
                                                          "grid-xs-5": "standalone-selector--selector-multi-MuiGrid-grid-xs-5",
                                                          "grid-xs-6": "standalone-selector--selector-multi-MuiGrid-grid-xs-6",
                                                          "grid-xs-7": "standalone-selector--selector-multi-MuiGrid-grid-xs-7",
                                                          "grid-xs-8": "standalone-selector--selector-multi-MuiGrid-grid-xs-8",
                                                          "grid-xs-9": "standalone-selector--selector-multi-MuiGrid-grid-xs-9",
                                                          "grid-xs-auto": "standalone-selector--selector-multi-MuiGrid-grid-xs-auto",
                                                          "grid-xs-true": "standalone-selector--selector-multi-MuiGrid-grid-xs-true",
                                                          "item": "standalone-selector--selector-multi-MuiGrid-item",
                                                          "justify-xs-center": "standalone-selector--selector-multi-MuiGrid-justify-xs-center",
                                                          "justify-xs-flex-end": "standalone-selector--selector-multi-MuiGrid-justify-xs-flex-end",
                                                          "justify-xs-space-around": "standalone-selector--selector-multi-MuiGrid-justify-xs-space-around",
                                                          "justify-xs-space-between": "standalone-selector--selector-multi-MuiGrid-justify-xs-space-between",
                                                          "justify-xs-space-evenly": "standalone-selector--selector-multi-MuiGrid-justify-xs-space-evenly",
                                                          "root": "standalone-selector--selector-multi-MuiGrid-root",
                                                          "spacing-xs-1": "standalone-selector--selector-multi-MuiGrid-spacing-xs-1",
                                                          "spacing-xs-10": "standalone-selector--selector-multi-MuiGrid-spacing-xs-10",
                                                          "spacing-xs-2": "standalone-selector--selector-multi-MuiGrid-spacing-xs-2",
                                                          "spacing-xs-3": "standalone-selector--selector-multi-MuiGrid-spacing-xs-3",
                                                          "spacing-xs-4": "standalone-selector--selector-multi-MuiGrid-spacing-xs-4",
                                                          "spacing-xs-5": "standalone-selector--selector-multi-MuiGrid-spacing-xs-5",
                                                          "spacing-xs-6": "standalone-selector--selector-multi-MuiGrid-spacing-xs-6",
                                                          "spacing-xs-7": "standalone-selector--selector-multi-MuiGrid-spacing-xs-7",
                                                          "spacing-xs-8": "standalone-selector--selector-multi-MuiGrid-spacing-xs-8",
                                                          "spacing-xs-9": "standalone-selector--selector-multi-MuiGrid-spacing-xs-9",
                                                          "wrap-xs-nowrap": "standalone-selector--selector-multi-MuiGrid-wrap-xs-nowrap",
                                                          "wrap-xs-wrap-reverse": "standalone-selector--selector-multi-MuiGrid-wrap-xs-wrap-reverse",
                                                          "zeroMinWidth": "standalone-selector--selector-multi-MuiGrid-zeroMinWidth",
                                                        }
                                                      }
                                                      item={true}
                                                      xs={12}
                                                    >
                                                      <div
                                                        className="standalone-selector--selector-multi-MuiGrid-root standalone-selector--selector-multi-CcMultiSelect-selectedEntries-33 standalone-selector--selector-multi-MuiGrid-item standalone-selector--selector-multi-MuiGrid-grid-xs-12"
                                                      >
                                                        <WithStyles(ForwardRef(Paper))
                                                          elevation={0}
                                                        >
                                                          <ForwardRef(Paper)
                                                            classes={
                                                              Object {
                                                                "elevation0": "standalone-selector--selector-multi-MuiPaper-elevation0",
                                                                "elevation1": "standalone-selector--selector-multi-MuiPaper-elevation1",
                                                                "elevation10": "standalone-selector--selector-multi-MuiPaper-elevation10",
                                                                "elevation11": "standalone-selector--selector-multi-MuiPaper-elevation11",
                                                                "elevation12": "standalone-selector--selector-multi-MuiPaper-elevation12",
                                                                "elevation13": "standalone-selector--selector-multi-MuiPaper-elevation13",
                                                                "elevation14": "standalone-selector--selector-multi-MuiPaper-elevation14",
                                                                "elevation15": "standalone-selector--selector-multi-MuiPaper-elevation15",
                                                                "elevation16": "standalone-selector--selector-multi-MuiPaper-elevation16",
                                                                "elevation17": "standalone-selector--selector-multi-MuiPaper-elevation17",
                                                                "elevation18": "standalone-selector--selector-multi-MuiPaper-elevation18",
                                                                "elevation19": "standalone-selector--selector-multi-MuiPaper-elevation19",
                                                                "elevation2": "standalone-selector--selector-multi-MuiPaper-elevation2",
                                                                "elevation20": "standalone-selector--selector-multi-MuiPaper-elevation20",
                                                                "elevation21": "standalone-selector--selector-multi-MuiPaper-elevation21",
                                                                "elevation22": "standalone-selector--selector-multi-MuiPaper-elevation22",
                                                                "elevation23": "standalone-selector--selector-multi-MuiPaper-elevation23",
                                                                "elevation24": "standalone-selector--selector-multi-MuiPaper-elevation24",
                                                                "elevation3": "standalone-selector--selector-multi-MuiPaper-elevation3",
                                                                "elevation4": "standalone-selector--selector-multi-MuiPaper-elevation4",
                                                                "elevation5": "standalone-selector--selector-multi-MuiPaper-elevation5",
                                                                "elevation6": "standalone-selector--selector-multi-MuiPaper-elevation6",
                                                                "elevation7": "standalone-selector--selector-multi-MuiPaper-elevation7",
                                                                "elevation8": "standalone-selector--selector-multi-MuiPaper-elevation8",
                                                                "elevation9": "standalone-selector--selector-multi-MuiPaper-elevation9",
                                                                "outlined": "standalone-selector--selector-multi-MuiPaper-outlined",
                                                                "root": "standalone-selector--selector-multi-MuiPaper-root",
                                                                "rounded": "standalone-selector--selector-multi-MuiPaper-rounded",
                                                              }
                                                            }
                                                            elevation={0}
                                                          >
                                                            <div
                                                              className="standalone-selector--selector-multi-MuiPaper-root standalone-selector--selector-multi-MuiPaper-elevation0 standalone-selector--selector-multi-MuiPaper-rounded"
                                                            >
                                                              <Memo(MultiSelectEntry)
                                                                data={
                                                                  Object {
                                                                    "canUnselect": [Function],
                                                                    "color": "#00B8D9",
                                                                    "icon": <Memo />,
                                                                    "id": "ocean",
                                                                    "isFixed": true,
                                                                    "label": "Ocean",
                                                                    "onClick": [Function],
                                                                    "type": "Light",
                                                                    "value": "ocean",
                                                                  }
                                                                }
                                                                enableDivider={false}
                                                                enableIcons={false}
                                                                handleDelete={[Function]}
                                                                key="ocean"
                                                                setData={[Function]}
                                                              >
                                                                <WithStyles(ForwardRef(List))
                                                                  className="standalone-selector--selector-multi-CcMultiSelectEntry-root-52 standalone-selector--selector-multi-CcMultiSelectEntry-container-54"
                                                                >
                                                                  <ForwardRef(List)
                                                                    className="standalone-selector--selector-multi-CcMultiSelectEntry-root-52 standalone-selector--selector-multi-CcMultiSelectEntry-container-54"
                                                                    classes={
                                                                      Object {
                                                                        "dense": "standalone-selector--selector-multi-MuiList-dense",
                                                                        "padding": "standalone-selector--selector-multi-MuiList-padding",
                                                                        "root": "standalone-selector--selector-multi-MuiList-root",
                                                                        "subheader": "standalone-selector--selector-multi-MuiList-subheader",
                                                                      }
                                                                    }
                                                                  >
                                                                    <ul
                                                                      className="standalone-selector--selector-multi-MuiList-root standalone-selector--selector-multi-CcMultiSelectEntry-root-52 standalone-selector--selector-multi-CcMultiSelectEntry-container-54 standalone-selector--selector-multi-MuiList-padding"
                                                                    >
                                                                      <WithStyles(WithStyles(ForwardRef(ListItem)))
                                                                        button={true}
                                                                        className="standalone-selector--selector-multi-CcMultiSelectEntry-selected-55"
                                                                        onClick={[Function]}
                                                                      >
                                                                        <WithStyles(ForwardRef(ListItem))
                                                                          button={true}
                                                                          className="standalone-selector--selector-multi-CcMultiSelectEntry-selected-55"
                                                                          classes={
                                                                            Object {
                                                                              "gutters": "standalone-selector--selector-multi-SmallListItem-gutters-61",
                                                                            }
                                                                          }
                                                                          onClick={[Function]}
                                                                        >
                                                                          <ForwardRef(ListItem)
                                                                            button={true}
                                                                            className="standalone-selector--selector-multi-CcMultiSelectEntry-selected-55"
                                                                            classes={
                                                                              Object {
                                                                                "alignItemsFlexStart": "standalone-selector--selector-multi-MuiListItem-alignItemsFlexStart",
                                                                                "button": "standalone-selector--selector-multi-MuiListItem-button",
                                                                                "container": "standalone-selector--selector-multi-MuiListItem-container",
                                                                                "dense": "standalone-selector--selector-multi-MuiListItem-dense",
                                                                                "disabled": "Mui-disabled",
                                                                                "divider": "standalone-selector--selector-multi-MuiListItem-divider",
                                                                                "focusVisible": "Mui-focusVisible",
                                                                                "gutters": "standalone-selector--selector-multi-MuiListItem-gutters standalone-selector--selector-multi-SmallListItem-gutters-61",
                                                                                "root": "standalone-selector--selector-multi-MuiListItem-root",
                                                                                "secondaryAction": "standalone-selector--selector-multi-MuiListItem-secondaryAction",
                                                                                "selected": "Mui-selected",
                                                                              }
                                                                            }
                                                                            onClick={[Function]}
                                                                          >
                                                                            <li
                                                                              className="standalone-selector--selector-multi-MuiListItem-container"
                                                                            >
                                                                              <WithStyles(ForwardRef(ButtonBase))
                                                                                className="standalone-selector--selector-multi-MuiListItem-root standalone-selector--selector-multi-CcMultiSelectEntry-selected-55 standalone-selector--selector-multi-MuiListItem-gutters standalone-selector--selector-multi-SmallListItem-gutters-61 standalone-selector--selector-multi-MuiListItem-button standalone-selector--selector-multi-MuiListItem-secondaryAction"
                                                                                component="div"
                                                                                disabled={false}
                                                                                focusVisibleClassName="Mui-focusVisible"
                                                                                onClick={[Function]}
                                                                              >
                                                                                <ForwardRef(ButtonBase)
                                                                                  className="standalone-selector--selector-multi-MuiListItem-root standalone-selector--selector-multi-CcMultiSelectEntry-selected-55 standalone-selector--selector-multi-MuiListItem-gutters standalone-selector--selector-multi-SmallListItem-gutters-61 standalone-selector--selector-multi-MuiListItem-button standalone-selector--selector-multi-MuiListItem-secondaryAction"
                                                                                  classes={
                                                                                    Object {
                                                                                      "disabled": "Mui-disabled",
                                                                                      "focusVisible": "Mui-focusVisible",
                                                                                      "root": "standalone-selector--selector-multi-MuiButtonBase-root",
                                                                                    }
                                                                                  }
                                                                                  component="div"
                                                                                  disabled={false}
                                                                                  focusVisibleClassName="Mui-focusVisible"
                                                                                  onClick={[Function]}
                                                                                >
                                                                                  <div
                                                                                    aria-disabled={false}
                                                                                    className="standalone-selector--selector-multi-MuiButtonBase-root standalone-selector--selector-multi-MuiListItem-root standalone-selector--selector-multi-CcMultiSelectEntry-selected-55 standalone-selector--selector-multi-MuiListItem-gutters standalone-selector--selector-multi-SmallListItem-gutters-61 standalone-selector--selector-multi-MuiListItem-button standalone-selector--selector-multi-MuiListItem-secondaryAction"
                                                                                    onBlur={[Function]}
                                                                                    onClick={[Function]}
                                                                                    onDragLeave={[Function]}
                                                                                    onFocus={[Function]}
                                                                                    onKeyDown={[Function]}
                                                                                    onKeyUp={[Function]}
                                                                                    onMouseDown={[Function]}
                                                                                    onMouseLeave={[Function]}
                                                                                    onMouseUp={[Function]}
                                                                                    onTouchEnd={[Function]}
                                                                                    onTouchMove={[Function]}
                                                                                    onTouchStart={[Function]}
                                                                                    role="button"
                                                                                    tabIndex={0}
                                                                                  >
                                                                                    <WithStyles(ForwardRef(ListItemText))
                                                                                      className="standalone-selector--selector-multi-CcMultiSelectEntry-label-56"
                                                                                      key=".1"
                                                                                    >
                                                                                      <ForwardRef(ListItemText)
                                                                                        className="standalone-selector--selector-multi-CcMultiSelectEntry-label-56"
                                                                                        classes={
                                                                                          Object {
                                                                                            "dense": "standalone-selector--selector-multi-MuiListItemText-dense",
                                                                                            "inset": "standalone-selector--selector-multi-MuiListItemText-inset",
                                                                                            "multiline": "standalone-selector--selector-multi-MuiListItemText-multiline",
                                                                                            "primary": "standalone-selector--selector-multi-MuiListItemText-primary",
                                                                                            "root": "standalone-selector--selector-multi-MuiListItemText-root",
                                                                                            "secondary": "standalone-selector--selector-multi-MuiListItemText-secondary",
                                                                                          }
                                                                                        }
                                                                                      >
                                                                                        <div
                                                                                          className="standalone-selector--selector-multi-MuiListItemText-root standalone-selector--selector-multi-CcMultiSelectEntry-label-56"
                                                                                        >
                                                                                          <WithStyles(ForwardRef(Typography))
                                                                                            className="standalone-selector--selector-multi-MuiListItemText-primary"
                                                                                            component="span"
                                                                                            display="block"
                                                                                            variant="body1"
                                                                                          >
                                                                                            <ForwardRef(Typography)
                                                                                              className="standalone-selector--selector-multi-MuiListItemText-primary"
                                                                                              classes={
                                                                                                Object {
                                                                                                  "alignCenter": "standalone-selector--selector-multi-MuiTypography-alignCenter",
                                                                                                  "alignJustify": "standalone-selector--selector-multi-MuiTypography-alignJustify",
                                                                                                  "alignLeft": "standalone-selector--selector-multi-MuiTypography-alignLeft",
                                                                                                  "alignRight": "standalone-selector--selector-multi-MuiTypography-alignRight",
                                                                                                  "body1": "standalone-selector--selector-multi-MuiTypography-body1",
                                                                                                  "body2": "standalone-selector--selector-multi-MuiTypography-body2",
                                                                                                  "button": "standalone-selector--selector-multi-MuiTypography-button",
                                                                                                  "caption": "standalone-selector--selector-multi-MuiTypography-caption",
                                                                                                  "colorError": "standalone-selector--selector-multi-MuiTypography-colorError",
                                                                                                  "colorInherit": "standalone-selector--selector-multi-MuiTypography-colorInherit",
                                                                                                  "colorPrimary": "standalone-selector--selector-multi-MuiTypography-colorPrimary",
                                                                                                  "colorSecondary": "standalone-selector--selector-multi-MuiTypography-colorSecondary",
                                                                                                  "colorTextPrimary": "standalone-selector--selector-multi-MuiTypography-colorTextPrimary",
                                                                                                  "colorTextSecondary": "standalone-selector--selector-multi-MuiTypography-colorTextSecondary",
                                                                                                  "displayBlock": "standalone-selector--selector-multi-MuiTypography-displayBlock",
                                                                                                  "displayInline": "standalone-selector--selector-multi-MuiTypography-displayInline",
                                                                                                  "gutterBottom": "standalone-selector--selector-multi-MuiTypography-gutterBottom",
                                                                                                  "h1": "standalone-selector--selector-multi-MuiTypography-h1",
                                                                                                  "h2": "standalone-selector--selector-multi-MuiTypography-h2",
                                                                                                  "h3": "standalone-selector--selector-multi-MuiTypography-h3",
                                                                                                  "h4": "standalone-selector--selector-multi-MuiTypography-h4",
                                                                                                  "h5": "standalone-selector--selector-multi-MuiTypography-h5",
                                                                                                  "h6": "standalone-selector--selector-multi-MuiTypography-h6",
                                                                                                  "noWrap": "standalone-selector--selector-multi-MuiTypography-noWrap",
                                                                                                  "overline": "standalone-selector--selector-multi-MuiTypography-overline",
                                                                                                  "paragraph": "standalone-selector--selector-multi-MuiTypography-paragraph",
                                                                                                  "root": "standalone-selector--selector-multi-MuiTypography-root",
                                                                                                  "srOnly": "standalone-selector--selector-multi-MuiTypography-srOnly",
                                                                                                  "subtitle1": "standalone-selector--selector-multi-MuiTypography-subtitle1",
                                                                                                  "subtitle2": "standalone-selector--selector-multi-MuiTypography-subtitle2",
                                                                                                }
                                                                                              }
                                                                                              component="span"
                                                                                              display="block"
                                                                                              variant="body1"
                                                                                            >
                                                                                              <span
                                                                                                className="standalone-selector--selector-multi-MuiTypography-root standalone-selector--selector-multi-MuiListItemText-primary standalone-selector--selector-multi-MuiTypography-body1 standalone-selector--selector-multi-MuiTypography-displayBlock"
                                                                                              >
                                                                                                Ocean
                                                                                              </span>
                                                                                            </ForwardRef(Typography)>
                                                                                          </WithStyles(ForwardRef(Typography))>
                                                                                        </div>
                                                                                      </ForwardRef(ListItemText)>
                                                                                    </WithStyles(ForwardRef(ListItemText))>
                                                                                    <WithStyles(memo)
                                                                                      center={false}
                                                                                    >
                                                                                      <ForwardRef(TouchRipple)
                                                                                        center={false}
                                                                                        classes={
                                                                                          Object {
                                                                                            "child": "standalone-selector--selector-multi-MuiTouchRipple-child",
                                                                                            "childLeaving": "standalone-selector--selector-multi-MuiTouchRipple-childLeaving",
                                                                                            "childPulsate": "standalone-selector--selector-multi-MuiTouchRipple-childPulsate",
                                                                                            "ripple": "standalone-selector--selector-multi-MuiTouchRipple-ripple",
                                                                                            "ripplePulsate": "standalone-selector--selector-multi-MuiTouchRipple-ripplePulsate",
                                                                                            "rippleVisible": "standalone-selector--selector-multi-MuiTouchRipple-rippleVisible",
                                                                                            "root": "standalone-selector--selector-multi-MuiTouchRipple-root",
                                                                                          }
                                                                                        }
                                                                                      >
                                                                                        <span
                                                                                          className="standalone-selector--selector-multi-MuiTouchRipple-root"
                                                                                        >
                                                                                          <TransitionGroup
                                                                                            childFactory={[Function]}
                                                                                            component={null}
                                                                                            exit={true}
                                                                                          />
                                                                                        </span>
                                                                                      </ForwardRef(TouchRipple)>
                                                                                    </WithStyles(memo)>
                                                                                  </div>
                                                                                </ForwardRef(ButtonBase)>
                                                                              </WithStyles(ForwardRef(ButtonBase))>
                                                                              <WithStyles(ForwardRef(ListItemSecondaryAction))
                                                                                key=".2"
                                                                              >
                                                                                <ForwardRef(ListItemSecondaryAction)
                                                                                  classes={
                                                                                    Object {
                                                                                      "root": "standalone-selector--selector-multi-MuiListItemSecondaryAction-root",
                                                                                    }
                                                                                  }
                                                                                >
                                                                                  <div
                                                                                    className="standalone-selector--selector-multi-MuiListItemSecondaryAction-root"
                                                                                  >
                                                                                    <WithStyles(WithStyles(ForwardRef(IconButton)))
                                                                                      className="standalone-selector--selector-multi-CcMultiSelectEntry-icon-58"
                                                                                      disabled={false}
                                                                                      edge="end"
                                                                                      name="ocean"
                                                                                      onClick={[Function]}
                                                                                    >
                                                                                      <WithStyles(ForwardRef(IconButton))
                                                                                        className="standalone-selector--selector-multi-CcMultiSelectEntry-icon-58"
                                                                                        classes={
                                                                                          Object {
                                                                                            "root": "standalone-selector--selector-multi-WithStyles(ForwardRef(IconButton))-root-62",
                                                                                          }
                                                                                        }
                                                                                        disabled={false}
                                                                                        edge="end"
                                                                                        name="ocean"
                                                                                        onClick={[Function]}
                                                                                      >
                                                                                        <ForwardRef(IconButton)
                                                                                          className="standalone-selector--selector-multi-CcMultiSelectEntry-icon-58"
                                                                                          classes={
                                                                                            Object {
                                                                                              "colorInherit": "standalone-selector--selector-multi-MuiIconButton-colorInherit",
                                                                                              "colorPrimary": "standalone-selector--selector-multi-MuiIconButton-colorPrimary",
                                                                                              "colorSecondary": "standalone-selector--selector-multi-MuiIconButton-colorSecondary",
                                                                                              "disabled": "Mui-disabled",
                                                                                              "edgeEnd": "standalone-selector--selector-multi-MuiIconButton-edgeEnd",
                                                                                              "edgeStart": "standalone-selector--selector-multi-MuiIconButton-edgeStart",
                                                                                              "label": "standalone-selector--selector-multi-MuiIconButton-label",
                                                                                              "root": "standalone-selector--selector-multi-MuiIconButton-root standalone-selector--selector-multi-WithStyles(ForwardRef(IconButton))-root-62",
                                                                                              "sizeSmall": "standalone-selector--selector-multi-MuiIconButton-sizeSmall",
                                                                                            }
                                                                                          }
                                                                                          disabled={false}
                                                                                          edge="end"
                                                                                          name="ocean"
                                                                                          onClick={[Function]}
                                                                                        >
                                                                                          <WithStyles(ForwardRef(ButtonBase))
                                                                                            centerRipple={true}
                                                                                            className="standalone-selector--selector-multi-MuiIconButton-root standalone-selector--selector-multi-WithStyles(ForwardRef(IconButton))-root-62 standalone-selector--selector-multi-CcMultiSelectEntry-icon-58 standalone-selector--selector-multi-MuiIconButton-edgeEnd"
                                                                                            disabled={false}
                                                                                            focusRipple={true}
                                                                                            name="ocean"
                                                                                            onClick={[Function]}
                                                                                          >
                                                                                            <ForwardRef(ButtonBase)
                                                                                              centerRipple={true}
                                                                                              className="standalone-selector--selector-multi-MuiIconButton-root standalone-selector--selector-multi-WithStyles(ForwardRef(IconButton))-root-62 standalone-selector--selector-multi-CcMultiSelectEntry-icon-58 standalone-selector--selector-multi-MuiIconButton-edgeEnd"
                                                                                              classes={
                                                                                                Object {
                                                                                                  "disabled": "Mui-disabled",
                                                                                                  "focusVisible": "Mui-focusVisible",
                                                                                                  "root": "standalone-selector--selector-multi-MuiButtonBase-root",
                                                                                                }
                                                                                              }
                                                                                              disabled={false}
                                                                                              focusRipple={true}
                                                                                              name="ocean"
                                                                                              onClick={[Function]}
                                                                                            >
                                                                                              <button
                                                                                                className="standalone-selector--selector-multi-MuiButtonBase-root standalone-selector--selector-multi-MuiIconButton-root standalone-selector--selector-multi-WithStyles(ForwardRef(IconButton))-root-62 standalone-selector--selector-multi-CcMultiSelectEntry-icon-58 standalone-selector--selector-multi-MuiIconButton-edgeEnd"
                                                                                                disabled={false}
                                                                                                name="ocean"
                                                                                                onBlur={[Function]}
                                                                                                onClick={[Function]}
                                                                                                onDragLeave={[Function]}
                                                                                                onFocus={[Function]}
                                                                                                onKeyDown={[Function]}
                                                                                                onKeyUp={[Function]}
                                                                                                onMouseDown={[Function]}
                                                                                                onMouseLeave={[Function]}
                                                                                                onMouseUp={[Function]}
                                                                                                onTouchEnd={[Function]}
                                                                                                onTouchMove={[Function]}
                                                                                                onTouchStart={[Function]}
                                                                                                tabIndex={0}
                                                                                                type="button"
                                                                                              >
                                                                                                <span
                                                                                                  className="standalone-selector--selector-multi-MuiIconButton-label"
                                                                                                >
                                                                                                  <Memo(RemoveIcon)
                                                                                                    className="standalone-selector--selector-multi-CcMultiSelectEntry-iconSvg-59"
                                                                                                  >
                                                                                                    <WithStyles(ForwardRef(SvgIcon))
                                                                                                      className="standalone-selector--selector-multi-CcMultiSelectEntry-iconSvg-59"
                                                                                                      fill="#1d1d1b"
                                                                                                      viewBox="0 0 34.88 34.88"
                                                                                                    >
                                                                                                      <ForwardRef(SvgIcon)
                                                                                                        className="standalone-selector--selector-multi-CcMultiSelectEntry-iconSvg-59"
                                                                                                        classes={
                                                                                                          Object {
                                                                                                            "colorAction": "standalone-selector--selector-multi-MuiSvgIcon-colorAction",
                                                                                                            "colorDisabled": "standalone-selector--selector-multi-MuiSvgIcon-colorDisabled",
                                                                                                            "colorError": "standalone-selector--selector-multi-MuiSvgIcon-colorError",
                                                                                                            "colorPrimary": "standalone-selector--selector-multi-MuiSvgIcon-colorPrimary",
                                                                                                            "colorSecondary": "standalone-selector--selector-multi-MuiSvgIcon-colorSecondary",
                                                                                                            "fontSizeInherit": "standalone-selector--selector-multi-MuiSvgIcon-fontSizeInherit",
                                                                                                            "fontSizeLarge": "standalone-selector--selector-multi-MuiSvgIcon-fontSizeLarge",
                                                                                                            "fontSizeSmall": "standalone-selector--selector-multi-MuiSvgIcon-fontSizeSmall",
                                                                                                            "root": "standalone-selector--selector-multi-MuiSvgIcon-root",
                                                                                                          }
                                                                                                        }
                                                                                                        fill="#1d1d1b"
                                                                                                        viewBox="0 0 34.88 34.88"
                                                                                                      >
                                                                                                        <svg
                                                                                                          aria-hidden={true}
                                                                                                          className="standalone-selector--selector-multi-MuiSvgIcon-root standalone-selector--selector-multi-CcMultiSelectEntry-iconSvg-59"
                                                                                                          fill="#1d1d1b"
                                                                                                          focusable="false"
                                                                                                          viewBox="0 0 34.88 34.88"
                                                                                                        >
                                                                                                          <path
                                                                                                            d="M26.16,2.36a17.63,17.63,0,0,1,6.36,6.36,16.91,16.91,0,0,1,2.36,8.72,16.94,16.94,0,0,1-2.36,8.72,17.63,17.63,0,0,1-6.36,6.36,16.94,16.94,0,0,1-8.72,2.36,16.91,16.91,0,0,1-8.72-2.36,17.55,17.55,0,0,1-6.36-6.36A16.84,16.84,0,0,1,0,17.44,16.82,16.82,0,0,1,2.36,8.72,17.55,17.55,0,0,1,8.72,2.36,16.91,16.91,0,0,1,17.44,0,16.94,16.94,0,0,1,26.16,2.36ZM21.38,17.44,26,12.87a1,1,0,0,0,0-1.2L23.2,8.86a.76.76,0,0,0-.56-.21,1,1,0,0,0-.63.21L17.44,13.5,12.87,8.86a1,1,0,0,0-1.2,0L8.86,11.67a.76.76,0,0,0-.21.56,1,1,0,0,0,.21.64l4.64,4.57L8.86,22a1,1,0,0,0-.21.6,1,1,0,0,0,.21.59L11.67,26a.76.76,0,0,0,.56.21,1,1,0,0,0,.64-.21l4.57-4.64L22,26a1,1,0,0,0,.6.21A1,1,0,0,0,23.2,26L26,23.2a.75.75,0,0,0,.21-.56A1,1,0,0,0,26,22Z"
                                                                                                          />
                                                                                                        </svg>
                                                                                                      </ForwardRef(SvgIcon)>
                                                                                                    </WithStyles(ForwardRef(SvgIcon))>
                                                                                                  </Memo(RemoveIcon)>
                                                                                                </span>
                                                                                                <WithStyles(memo)
                                                                                                  center={true}
                                                                                                >
                                                                                                  <ForwardRef(TouchRipple)
                                                                                                    center={true}
                                                                                                    classes={
                                                                                                      Object {
                                                                                                        "child": "standalone-selector--selector-multi-MuiTouchRipple-child",
                                                                                                        "childLeaving": "standalone-selector--selector-multi-MuiTouchRipple-childLeaving",
                                                                                                        "childPulsate": "standalone-selector--selector-multi-MuiTouchRipple-childPulsate",
                                                                                                        "ripple": "standalone-selector--selector-multi-MuiTouchRipple-ripple",
                                                                                                        "ripplePulsate": "standalone-selector--selector-multi-MuiTouchRipple-ripplePulsate",
                                                                                                        "rippleVisible": "standalone-selector--selector-multi-MuiTouchRipple-rippleVisible",
                                                                                                        "root": "standalone-selector--selector-multi-MuiTouchRipple-root",
                                                                                                      }
                                                                                                    }
                                                                                                  >
                                                                                                    <span
                                                                                                      className="standalone-selector--selector-multi-MuiTouchRipple-root"
                                                                                                    >
                                                                                                      <TransitionGroup
                                                                                                        childFactory={[Function]}
                                                                                                        component={null}
                                                                                                        exit={true}
                                                                                                      />
                                                                                                    </span>
                                                                                                  </ForwardRef(TouchRipple)>
                                                                                                </WithStyles(memo)>
                                                                                              </button>
                                                                                            </ForwardRef(ButtonBase)>
                                                                                          </WithStyles(ForwardRef(ButtonBase))>
                                                                                        </ForwardRef(IconButton)>
                                                                                      </WithStyles(ForwardRef(IconButton))>
                                                                                    </WithStyles(WithStyles(ForwardRef(IconButton)))>
                                                                                  </div>
                                                                                </ForwardRef(ListItemSecondaryAction)>
                                                                              </WithStyles(ForwardRef(ListItemSecondaryAction))>
                                                                            </li>
                                                                          </ForwardRef(ListItem)>
                                                                        </WithStyles(ForwardRef(ListItem))>
                                                                      </WithStyles(WithStyles(ForwardRef(ListItem)))>
                                                                    </ul>
                                                                  </ForwardRef(List)>
                                                                </WithStyles(ForwardRef(List))>
                                                              </Memo(MultiSelectEntry)>
                                                            </div>
                                                          </ForwardRef(Paper)>
                                                        </WithStyles(ForwardRef(Paper))>
                                                      </div>
                                                    </ForwardRef(Grid)>
                                                  </WithStyles(ForwardRef(Grid))>
                                                </div>
                                              </ForwardRef(Grid)>
                                            </WithStyles(ForwardRef(Grid))>
                                          </Memo(MultiSelect)>
                                        </fieldset>
                                      </ForwardRef(FormControl)>
                                    </WithStyles(ForwardRef(FormControl))>
                                  </div>
                                </Styled(MuiBox)>
                              </Component>
                            </StylesProvider>
                          </AdvThemeSelector>
                        </ThemeSelector>
                      </Memo(DialogContextProvider)>
                    </Router>
                  </Memo(PermissionContextProvider)>
                </QueryClientProvider>
              </ThemeProvider>
            </Memo(ThemeProvider)>
          </MuiPickersUtilsProvider>
        </Memo(MuiPickerUtils)>
      </I18nextProvider>
    </Memo(CCI18nProvider)>
  </Suspense>
</Memo(ComponentsCareFramework)>
`;

exports[`Storyshots Standalone/Selector MultiSelectWithCheckBox 1`] = `
<Memo(ComponentsCareFramework)
  defaultTheme={[Function]}
>
  <Suspense
    fallback={<Memo(Loader) />}
  >
    <Memo(CCI18nProvider)>
      <I18nextProvider
        i18n={
          I18n {
            "addResource": [Function],
            "addResourceBundle": [Function],
            "addResources": [Function],
            "format": undefined,
            "getDataByLanguage": [Function],
            "getResource": [Function],
            "getResourceBundle": [Function],
            "hasResourceBundle": [Function],
            "isInitialized": true,
            "isLanguageChangingTo": undefined,
            "language": "en",
            "languages": Array [
              "en",
            ],
            "logger": Logger {
              "debug": true,
              "logger": Object {
                "error": [Function],
                "log": [Function],
                "output": [Function],
                "type": "logger",
                "warn": [Function],
              },
              "options": Object {
                "appendNamespaceToCIMode": false,
                "appendNamespaceToMissingKey": false,
                "contextSeparator": "_",
                "debug": true,
                "defaultNS": "translation",
                "fallbackLng": Array [
                  "en",
                ],
                "fallbackNS": false,
                "initImmediate": false,
                "interpolation": Object {
                  "escapeValue": false,
                },
                "joinArrays": false,
                "keySeparator": ".",
                "load": "all",
                "missingInterpolationHandler": false,
                "missingKeyHandler": false,
                "nonExplicitSupportedLngs": true,
                "nonExplicitWhitelist": false,
                "ns": Array [],
                "nsSeparator": ":",
                "overloadTranslationOptionHandler": [Function],
                "parseMissingKeyHandler": false,
                "partialBundledLanguages": false,
                "pluralSeparator": "_",
                "postProcess": false,
                "postProcessPassResolved": false,
                "preload": false,
                "resources": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
                "returnEmptyString": true,
                "returnNull": true,
                "returnObjects": false,
                "returnedObjectHandler": false,
                "saveMissing": false,
                "saveMissingPlurals": true,
                "saveMissingTo": "fallback",
                "simplifyPluralSuffix": true,
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "updateMissing": false,
                "whitelist": false,
              },
              "prefix": "i18next:",
            },
            "modules": Object {
              "external": Array [],
              "languageDetector": [Function],
            },
            "observers": Object {
              "languageChanged": Array [
                [Function],
                [Function],
                [Function],
              ],
            },
            "options": Object {
              "appendNamespaceToCIMode": false,
              "appendNamespaceToMissingKey": false,
              "contextSeparator": "_",
              "debug": true,
              "defaultNS": "translation",
              "fallbackLng": Array [
                "en",
              ],
              "fallbackNS": false,
              "initImmediate": false,
              "interpolation": Object {
                "escapeValue": false,
              },
              "joinArrays": false,
              "keySeparator": ".",
              "load": "all",
              "missingInterpolationHandler": false,
              "missingKeyHandler": false,
              "nonExplicitSupportedLngs": true,
              "nonExplicitWhitelist": false,
              "ns": Array [],
              "nsSeparator": ":",
              "overloadTranslationOptionHandler": [Function],
              "parseMissingKeyHandler": false,
              "partialBundledLanguages": false,
              "pluralSeparator": "_",
              "postProcess": false,
              "postProcessPassResolved": false,
              "preload": false,
              "resources": Object {
                "de": Object {},
                "en": Object {},
                "fr": Object {},
                "ru": Object {},
                "uz": Object {},
              },
              "returnEmptyString": true,
              "returnNull": true,
              "returnObjects": false,
              "returnedObjectHandler": false,
              "saveMissing": false,
              "saveMissingPlurals": true,
              "saveMissingTo": "fallback",
              "simplifyPluralSuffix": true,
              "supportedLngs": Array [
                "de",
                "en",
                "fr",
                "ru",
                "uz",
                "cimode",
              ],
              "updateMissing": false,
              "whitelist": false,
            },
            "removeResourceBundle": [Function],
            "reportNamespaces": ReportNamespaces {
              "usedNamespaces": Object {
                "translation": true,
              },
            },
            "services": Object {
              "backendConnector": Connector {
                "backend": null,
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::backendConnector:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::backendConnector:",
                },
                "observers": Object {
                  "*": Array [
                    [Function],
                  ],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "queue": Array [],
                "services": [Circular],
                "state": Object {},
                "store": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
              },
              "interpolator": Interpolator {
                "alwaysFormat": false,
                "escape": [Function],
                "escapeValue": false,
                "format": [Function],
                "formatSeparator": ",",
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::interpolator:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::interpolator:",
                },
                "maxReplaces": 1000,
                "nestingOptionsSeparator": ",",
                "nestingPrefix": "\\\\$t\\\\(",
                "nestingRegexp": /\\\\\\$t\\\\\\(\\(\\.\\+\\?\\)\\\\\\)/g,
                "nestingSuffix": "\\\\)",
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "{{",
                "regexp": /\\{\\{\\(\\.\\+\\?\\)\\}\\}/g,
                "regexpUnescape": /\\{\\{-\\(\\.\\+\\?\\)\\}\\}/g,
                "suffix": "}}",
                "unescapePrefix": "-",
                "unescapeSuffix": "",
                "useRawValueToEscape": false,
              },
              "languageDetector": Browser {
                "detectors": Object {
                  "cookie": Object {
                    "cacheUserLanguage": [Function],
                    "lookup": [Function],
                    "name": "cookie",
                  },
                  "htmlTag": Object {
                    "lookup": [Function],
                    "name": "htmlTag",
                  },
                  "localStorage": Object {
                    "cacheUserLanguage": [Function],
                    "lookup": [Function],
                    "name": "localStorage",
                  },
                  "navigator": Object {
                    "lookup": [Function],
                    "name": "navigator",
                  },
                  "path": Object {
                    "lookup": [Function],
                    "name": "path",
                  },
                  "querystring": Object {
                    "lookup": [Function],
                    "name": "querystring",
                  },
                  "sessionStorage": Object {
                    "cacheUserLanguage": [Function],
                    "lookup": [Function],
                    "name": "sessionStorage",
                  },
                  "subdomain": Object {
                    "lookup": [Function],
                    "name": "subdomain",
                  },
                },
                "i18nOptions": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "options": Object {
                  "caches": Array [
                    "localStorage",
                  ],
                  "excludeCacheFor": Array [
                    "cimode",
                  ],
                  "lookupCookie": "i18next",
                  "lookupLocalStorage": "i18nextLng",
                  "lookupQuerystring": "lng",
                  "lookupSessionStorage": "i18nextLng",
                  "order": Array [
                    "querystring",
                    "cookie",
                    "localStorage",
                    "sessionStorage",
                    "navigator",
                    "htmlTag",
                  ],
                },
                "services": [Circular],
                "type": "languageDetector",
              },
              "languageUtils": LanguageUtil {
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::languageUtils:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::languageUtils:",
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "whitelist": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
              },
              "logger": Logger {
                "debug": true,
                "logger": Object {
                  "error": [Function],
                  "log": [Function],
                  "output": [Function],
                  "type": "logger",
                  "warn": [Function],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "i18next:",
              },
              "pluralResolver": PluralResolver {
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::pluralResolver:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::pluralResolver:",
                },
                "options": Object {
                  "compatibilityJSON": undefined,
                  "prepend": "_",
                  "simplifyPluralSuffix": true,
                },
                "rules": Object {
                  "ach": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "af": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ak": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "am": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "an": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ar": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                      3,
                      11,
                      100,
                    ],
                    "plurals": [Function],
                  },
                  "arn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ast": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ay": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "az": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "be": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "bg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "br": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ca": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "cgg": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "cnr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "csb": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cy": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      8,
                    ],
                    "plurals": [Function],
                  },
                  "da": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "de": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dev": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dz": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "el": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "en": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "es": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "et": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fa": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "fi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fil": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ga": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      7,
                      11,
                    ],
                    "plurals": [Function],
                  },
                  "gd": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "gl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gun": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ha": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "he": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "hi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ht": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "hu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ia": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "id": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "is": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "it": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "iw": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "ja": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jbo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jv": Object {
                    "numbers": Array [
                      0,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ka": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kk": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "km": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ko": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ku": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "kw": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      4,
                    ],
                    "plurals": [Function],
                  },
                  "ky": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ln": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "lo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lt": Object {
                    "numbers": Array [
                      1,
                      2,
                      10,
                    ],
                    "plurals": [Function],
                  },
                  "lv": Object {
                    "numbers": Array [
                      1,
                      2,
                      0,
                    ],
                    "plurals": [Function],
                  },
                  "mai": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mfe": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ml": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mnk": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ms": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "mt": Object {
                    "numbers": Array [
                      1,
                      2,
                      11,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "nah": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ne": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "no": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nso": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "oc": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "or": Object {
                    "numbers": Array [
                      2,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "pa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pl": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "pms": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ps": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-BR": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-PT": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "rm": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ro": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "ru": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sah": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sco": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "se": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "si": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sl": Object {
                    "numbers": Array [
                      5,
                      1,
                      2,
                      3,
                    ],
                    "plurals": [Function],
                  },
                  "so": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "son": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sq": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "su": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sv": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sw": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ta": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "te": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "th": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ti": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tt": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ug": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "uk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "uz": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "vi": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "wa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "wo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "yo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "zh": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                },
              },
              "resourceStore": Object {
                "de": Object {},
                "en": Object {},
                "fr": Object {},
                "ru": Object {},
                "uz": Object {},
              },
              "utils": Object {
                "hasLoadedNamespace": [Function],
              },
            },
            "store": Object {
              "de": Object {},
              "en": Object {},
              "fr": Object {},
              "ru": Object {},
              "uz": Object {},
            },
            "translator": Translator {
              "backendConnector": Connector {
                "backend": null,
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::backendConnector:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::backendConnector:",
                },
                "observers": Object {
                  "*": Array [
                    [Function],
                  ],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "queue": Array [],
                "services": Object {
                  "backendConnector": [Circular],
                  "interpolator": Interpolator {
                    "alwaysFormat": false,
                    "escape": [Function],
                    "escapeValue": false,
                    "format": [Function],
                    "formatSeparator": ",",
                    "logger": Logger {
                      "debug": true,
                      "logger": Object {
                        "error": [Function],
                        "log": [Function],
                        "output": [Function],
                        "type": "logger",
                        "warn": [Function],
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "prefix": "i18next::interpolator:",
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "prefix": "i18next::interpolator:",
                    },
                    "maxReplaces": 1000,
                    "nestingOptionsSeparator": ",",
                    "nestingPrefix": "\\\\$t\\\\(",
                    "nestingRegexp": /\\\\\\$t\\\\\\(\\(\\.\\+\\?\\)\\\\\\)/g,
                    "nestingSuffix": "\\\\)",
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "{{",
                    "regexp": /\\{\\{\\(\\.\\+\\?\\)\\}\\}/g,
                    "regexpUnescape": /\\{\\{-\\(\\.\\+\\?\\)\\}\\}/g,
                    "suffix": "}}",
                    "unescapePrefix": "-",
                    "unescapeSuffix": "",
                    "useRawValueToEscape": false,
                  },
                  "languageDetector": Browser {
                    "detectors": Object {
                      "cookie": Object {
                        "cacheUserLanguage": [Function],
                        "lookup": [Function],
                        "name": "cookie",
                      },
                      "htmlTag": Object {
                        "lookup": [Function],
                        "name": "htmlTag",
                      },
                      "localStorage": Object {
                        "cacheUserLanguage": [Function],
                        "lookup": [Function],
                        "name": "localStorage",
                      },
                      "navigator": Object {
                        "lookup": [Function],
                        "name": "navigator",
                      },
                      "path": Object {
                        "lookup": [Function],
                        "name": "path",
                      },
                      "querystring": Object {
                        "lookup": [Function],
                        "name": "querystring",
                      },
                      "sessionStorage": Object {
                        "cacheUserLanguage": [Function],
                        "lookup": [Function],
                        "name": "sessionStorage",
                      },
                      "subdomain": Object {
                        "lookup": [Function],
                        "name": "subdomain",
                      },
                    },
                    "i18nOptions": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "options": Object {
                      "caches": Array [
                        "localStorage",
                      ],
                      "excludeCacheFor": Array [
                        "cimode",
                      ],
                      "lookupCookie": "i18next",
                      "lookupLocalStorage": "i18nextLng",
                      "lookupQuerystring": "lng",
                      "lookupSessionStorage": "i18nextLng",
                      "order": Array [
                        "querystring",
                        "cookie",
                        "localStorage",
                        "sessionStorage",
                        "navigator",
                        "htmlTag",
                      ],
                    },
                    "services": [Circular],
                    "type": "languageDetector",
                  },
                  "languageUtils": LanguageUtil {
                    "logger": Logger {
                      "debug": true,
                      "logger": Object {
                        "error": [Function],
                        "log": [Function],
                        "output": [Function],
                        "type": "logger",
                        "warn": [Function],
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "prefix": "i18next::languageUtils:",
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "prefix": "i18next::languageUtils:",
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "whitelist": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                  },
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next:",
                  },
                  "pluralResolver": PluralResolver {
                    "languageUtils": LanguageUtil {
                      "logger": Logger {
                        "debug": true,
                        "logger": Object {
                          "error": [Function],
                          "log": [Function],
                          "output": [Function],
                          "type": "logger",
                          "warn": [Function],
                        },
                        "options": Object {
                          "appendNamespaceToCIMode": false,
                          "appendNamespaceToMissingKey": false,
                          "contextSeparator": "_",
                          "debug": true,
                          "defaultNS": "translation",
                          "fallbackLng": Array [
                            "en",
                          ],
                          "fallbackNS": false,
                          "initImmediate": false,
                          "interpolation": Object {
                            "escapeValue": false,
                          },
                          "joinArrays": false,
                          "keySeparator": ".",
                          "load": "all",
                          "missingInterpolationHandler": false,
                          "missingKeyHandler": false,
                          "nonExplicitSupportedLngs": true,
                          "nonExplicitWhitelist": false,
                          "ns": Array [],
                          "nsSeparator": ":",
                          "overloadTranslationOptionHandler": [Function],
                          "parseMissingKeyHandler": false,
                          "partialBundledLanguages": false,
                          "pluralSeparator": "_",
                          "postProcess": false,
                          "postProcessPassResolved": false,
                          "prefix": "i18next::languageUtils:",
                          "preload": false,
                          "resources": Object {
                            "de": Object {},
                            "en": Object {},
                            "fr": Object {},
                            "ru": Object {},
                            "uz": Object {},
                          },
                          "returnEmptyString": true,
                          "returnNull": true,
                          "returnObjects": false,
                          "returnedObjectHandler": false,
                          "saveMissing": false,
                          "saveMissingPlurals": true,
                          "saveMissingTo": "fallback",
                          "simplifyPluralSuffix": true,
                          "supportedLngs": Array [
                            "de",
                            "en",
                            "fr",
                            "ru",
                            "uz",
                            "cimode",
                          ],
                          "updateMissing": false,
                          "whitelist": false,
                        },
                        "prefix": "i18next::languageUtils:",
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "whitelist": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                    },
                    "logger": Logger {
                      "debug": true,
                      "logger": Object {
                        "error": [Function],
                        "log": [Function],
                        "output": [Function],
                        "type": "logger",
                        "warn": [Function],
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "prefix": "i18next::pluralResolver:",
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "prefix": "i18next::pluralResolver:",
                    },
                    "options": Object {
                      "compatibilityJSON": undefined,
                      "prepend": "_",
                      "simplifyPluralSuffix": true,
                    },
                    "rules": Object {
                      "ach": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "af": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ak": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "am": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "an": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ar": Object {
                        "numbers": Array [
                          0,
                          1,
                          2,
                          3,
                          11,
                          100,
                        ],
                        "plurals": [Function],
                      },
                      "arn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ast": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ay": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "az": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "be": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "bg": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "bn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "bo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "br": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "bs": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "ca": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "cgg": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "cnr": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "cs": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "csb": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "cy": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          8,
                        ],
                        "plurals": [Function],
                      },
                      "da": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "de": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "dev": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "dz": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "el": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "en": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "eo": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "es": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "et": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "eu": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fa": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "fi": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fil": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fo": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fr": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fur": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fy": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ga": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          7,
                          11,
                        ],
                        "plurals": [Function],
                      },
                      "gd": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          20,
                        ],
                        "plurals": [Function],
                      },
                      "gl": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "gu": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "gun": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ha": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "he": Object {
                        "numbers": Array [
                          1,
                          2,
                          20,
                          21,
                        ],
                        "plurals": [Function],
                      },
                      "hi": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "hr": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "ht": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "hu": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "hy": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ia": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "id": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "is": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "it": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "iw": Object {
                        "numbers": Array [
                          1,
                          2,
                          20,
                          21,
                        ],
                        "plurals": [Function],
                      },
                      "ja": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "jbo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "jv": Object {
                        "numbers": Array [
                          0,
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ka": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "kk": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "km": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "kn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ko": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ku": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "kw": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          4,
                        ],
                        "plurals": [Function],
                      },
                      "ky": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "lb": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ln": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "lo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "lt": Object {
                        "numbers": Array [
                          1,
                          2,
                          10,
                        ],
                        "plurals": [Function],
                      },
                      "lv": Object {
                        "numbers": Array [
                          1,
                          2,
                          0,
                        ],
                        "plurals": [Function],
                      },
                      "mai": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mfe": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mg": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mi": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mk": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ml": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mnk": Object {
                        "numbers": Array [
                          0,
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mr": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ms": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "mt": Object {
                        "numbers": Array [
                          1,
                          2,
                          11,
                          20,
                        ],
                        "plurals": [Function],
                      },
                      "nah": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nap": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nb": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ne": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nl": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "no": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nso": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "oc": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "or": Object {
                        "numbers": Array [
                          2,
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "pa": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pap": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pl": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "pms": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ps": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pt": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pt-BR": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pt-PT": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "rm": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ro": Object {
                        "numbers": Array [
                          1,
                          2,
                          20,
                        ],
                        "plurals": [Function],
                      },
                      "ru": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "sah": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "sco": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "se": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "si": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sk": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "sl": Object {
                        "numbers": Array [
                          5,
                          1,
                          2,
                          3,
                        ],
                        "plurals": [Function],
                      },
                      "so": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "son": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sq": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sr": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "su": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "sv": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sw": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ta": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "te": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tg": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "th": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ti": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tk": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tr": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tt": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ug": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "uk": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "ur": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "uz": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "vi": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "wa": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "wo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "yo": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "zh": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                    },
                  },
                  "resourceStore": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "utils": Object {
                    "hasLoadedNamespace": [Function],
                  },
                },
                "state": Object {},
                "store": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
              },
              "interpolator": Interpolator {
                "alwaysFormat": false,
                "escape": [Function],
                "escapeValue": false,
                "format": [Function],
                "formatSeparator": ",",
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::interpolator:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::interpolator:",
                },
                "maxReplaces": 1000,
                "nestingOptionsSeparator": ",",
                "nestingPrefix": "\\\\$t\\\\(",
                "nestingRegexp": /\\\\\\$t\\\\\\(\\(\\.\\+\\?\\)\\\\\\)/g,
                "nestingSuffix": "\\\\)",
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "{{",
                "regexp": /\\{\\{\\(\\.\\+\\?\\)\\}\\}/g,
                "regexpUnescape": /\\{\\{-\\(\\.\\+\\?\\)\\}\\}/g,
                "suffix": "}}",
                "unescapePrefix": "-",
                "unescapeSuffix": "",
                "useRawValueToEscape": false,
              },
              "language": "en",
              "languageUtils": LanguageUtil {
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::languageUtils:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::languageUtils:",
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "whitelist": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
              },
              "logger": Logger {
                "debug": true,
                "logger": Object {
                  "error": [Function],
                  "log": [Function],
                  "output": [Function],
                  "type": "logger",
                  "warn": [Function],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "prefix": "i18next::translator:",
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "i18next::translator:",
              },
              "observers": Object {
                "*": Array [
                  [Function],
                ],
              },
              "options": Object {
                "appendNamespaceToCIMode": false,
                "appendNamespaceToMissingKey": false,
                "contextSeparator": "_",
                "debug": true,
                "defaultNS": "translation",
                "fallbackLng": Array [
                  "en",
                ],
                "fallbackNS": false,
                "initImmediate": false,
                "interpolation": Object {
                  "escapeValue": false,
                },
                "joinArrays": false,
                "keySeparator": ".",
                "load": "all",
                "missingInterpolationHandler": false,
                "missingKeyHandler": false,
                "nonExplicitSupportedLngs": true,
                "nonExplicitWhitelist": false,
                "ns": Array [],
                "nsSeparator": ":",
                "overloadTranslationOptionHandler": [Function],
                "parseMissingKeyHandler": false,
                "partialBundledLanguages": false,
                "pluralSeparator": "_",
                "postProcess": false,
                "postProcessPassResolved": false,
                "preload": false,
                "resources": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
                "returnEmptyString": true,
                "returnNull": true,
                "returnObjects": false,
                "returnedObjectHandler": false,
                "saveMissing": false,
                "saveMissingPlurals": true,
                "saveMissingTo": "fallback",
                "simplifyPluralSuffix": true,
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "updateMissing": false,
                "whitelist": false,
              },
              "pluralResolver": PluralResolver {
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::pluralResolver:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::pluralResolver:",
                },
                "options": Object {
                  "compatibilityJSON": undefined,
                  "prepend": "_",
                  "simplifyPluralSuffix": true,
                },
                "rules": Object {
                  "ach": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "af": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ak": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "am": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "an": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ar": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                      3,
                      11,
                      100,
                    ],
                    "plurals": [Function],
                  },
                  "arn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ast": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ay": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "az": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "be": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "bg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "br": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ca": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "cgg": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "cnr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "csb": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cy": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      8,
                    ],
                    "plurals": [Function],
                  },
                  "da": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "de": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dev": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dz": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "el": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "en": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "es": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "et": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fa": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "fi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fil": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ga": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      7,
                      11,
                    ],
                    "plurals": [Function],
                  },
                  "gd": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "gl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gun": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ha": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "he": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "hi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ht": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "hu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ia": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "id": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "is": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "it": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "iw": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "ja": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jbo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jv": Object {
                    "numbers": Array [
                      0,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ka": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kk": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "km": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ko": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ku": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "kw": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      4,
                    ],
                    "plurals": [Function],
                  },
                  "ky": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ln": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "lo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lt": Object {
                    "numbers": Array [
                      1,
                      2,
                      10,
                    ],
                    "plurals": [Function],
                  },
                  "lv": Object {
                    "numbers": Array [
                      1,
                      2,
                      0,
                    ],
                    "plurals": [Function],
                  },
                  "mai": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mfe": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ml": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mnk": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ms": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "mt": Object {
                    "numbers": Array [
                      1,
                      2,
                      11,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "nah": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ne": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "no": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nso": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "oc": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "or": Object {
                    "numbers": Array [
                      2,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "pa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pl": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "pms": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ps": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-BR": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-PT": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "rm": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ro": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "ru": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sah": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sco": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "se": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "si": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sl": Object {
                    "numbers": Array [
                      5,
                      1,
                      2,
                      3,
                    ],
                    "plurals": [Function],
                  },
                  "so": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "son": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sq": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "su": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sv": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sw": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ta": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "te": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "th": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ti": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tt": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ug": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "uk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "uz": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "vi": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "wa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "wo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "yo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "zh": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                },
              },
              "resourceStore": Object {
                "de": Object {},
                "en": Object {},
                "fr": Object {},
                "ru": Object {},
                "uz": Object {},
              },
              "utils": Object {
                "hasLoadedNamespace": [Function],
              },
            },
          }
        }
        key="en"
      >
        <Memo(MuiPickerUtils)>
          <MuiPickersUtilsProvider
            libInstance={[Function]}
            locale="en"
            utils={[Function]}
          >
            <Memo(ThemeProvider)
              defaultTheme={[Function]}
            >
              <ThemeProvider
                theme={
                  Object {
                    "breakpoints": Object {
                      "between": [Function],
                      "down": [Function],
                      "keys": Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ],
                      "only": [Function],
                      "up": [Function],
                      "values": Object {
                        "lg": 1280,
                        "md": 960,
                        "sm": 600,
                        "xl": 1920,
                        "xs": 0,
                      },
                      "width": [Function],
                    },
                    "direction": "ltr",
                    "mixins": Object {
                      "gutters": [Function],
                      "toolbar": Object {
                        "@media (min-width:0px) and (orientation: landscape)": Object {
                          "minHeight": 48,
                        },
                        "@media (min-width:600px)": Object {
                          "minHeight": 64,
                        },
                        "minHeight": 56,
                      },
                    },
                    "overrides": Object {},
                    "palette": Object {
                      "action": Object {
                        "activatedOpacity": 0.12,
                        "active": "rgba(0, 0, 0, 0.54)",
                        "disabled": "rgba(0, 0, 0, 0.26)",
                        "disabledBackground": "rgba(0, 0, 0, 0.12)",
                        "disabledOpacity": 0.38,
                        "focus": "rgba(0, 0, 0, 0.12)",
                        "focusOpacity": 0.12,
                        "hover": "rgba(0, 0, 0, 0.04)",
                        "hoverOpacity": 0.04,
                        "selected": "rgba(0, 0, 0, 0.08)",
                        "selectedOpacity": 0.08,
                      },
                      "augmentColor": [Function],
                      "background": Object {
                        "default": "#fafafa",
                        "paper": "#fff",
                      },
                      "common": Object {
                        "black": "#000",
                        "white": "#fff",
                      },
                      "contrastThreshold": 3,
                      "divider": "rgba(0, 0, 0, 0.12)",
                      "error": Object {
                        "contrastText": "#fff",
                        "dark": "#d32f2f",
                        "light": "#e57373",
                        "main": "#f44336",
                      },
                      "getContrastText": [Function],
                      "grey": Object {
                        "100": "#f5f5f5",
                        "200": "#eeeeee",
                        "300": "#e0e0e0",
                        "400": "#bdbdbd",
                        "50": "#fafafa",
                        "500": "#9e9e9e",
                        "600": "#757575",
                        "700": "#616161",
                        "800": "#424242",
                        "900": "#212121",
                        "A100": "#d5d5d5",
                        "A200": "#aaaaaa",
                        "A400": "#303030",
                        "A700": "#616161",
                      },
                      "info": Object {
                        "contrastText": "#fff",
                        "dark": "#1976d2",
                        "light": "#64b5f6",
                        "main": "#2196f3",
                      },
                      "primary": Object {
                        "contrastText": "#fff",
                        "dark": "rgb(44, 56, 126)",
                        "light": "rgb(101, 115, 195)",
                        "main": "#3f51b5",
                      },
                      "secondary": Object {
                        "contrastText": "#fff",
                        "dark": "rgb(171, 0, 60)",
                        "light": "rgb(247, 51, 120)",
                        "main": "#f50057",
                      },
                      "success": Object {
                        "contrastText": "rgba(0, 0, 0, 0.87)",
                        "dark": "#388e3c",
                        "light": "#81c784",
                        "main": "#4caf50",
                      },
                      "text": Object {
                        "disabled": "rgba(0, 0, 0, 0.38)",
                        "hint": "rgba(0, 0, 0, 0.38)",
                        "primary": "rgba(0, 0, 0, 0.87)",
                        "secondary": "rgba(0, 0, 0, 0.54)",
                      },
                      "tonalOffset": 0.2,
                      "type": "light",
                      "warning": Object {
                        "contrastText": "rgba(0, 0, 0, 0.87)",
                        "dark": "#f57c00",
                        "light": "#ffb74d",
                        "main": "#ff9800",
                      },
                    },
                    "props": Object {},
                    "shadows": Array [
                      "none",
                      "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                      "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                      "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                      "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                      "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                      "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                      "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                      "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                      "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                      "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                      "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                      "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                      "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                      "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                      "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                      "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                      "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                      "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                      "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                      "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                      "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                      "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                      "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                      "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                    ],
                    "shape": Object {
                      "borderRadius": 4,
                    },
                    "spacing": [Function],
                    "transitions": Object {
                      "create": [Function],
                      "duration": Object {
                        "complex": 375,
                        "enteringScreen": 225,
                        "leavingScreen": 195,
                        "short": 250,
                        "shorter": 200,
                        "shortest": 150,
                        "standard": 300,
                      },
                      "easing": Object {
                        "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                        "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                        "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                        "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                      },
                      "getAutoHeightDuration": [Function],
                    },
                    "typography": Object {
                      "body1": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.00938em",
                        "lineHeight": 1.5,
                      },
                      "body2": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.875rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.01071em",
                        "lineHeight": 1.43,
                      },
                      "button": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.875rem",
                        "fontWeight": 500,
                        "letterSpacing": "0.02857em",
                        "lineHeight": 1.75,
                        "textTransform": "uppercase",
                      },
                      "caption": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.75rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.03333em",
                        "lineHeight": 1.66,
                      },
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": 14,
                      "fontWeightBold": 700,
                      "fontWeightLight": 300,
                      "fontWeightMedium": 500,
                      "fontWeightRegular": 400,
                      "h1": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "6rem",
                        "fontWeight": 300,
                        "letterSpacing": "-0.01562em",
                        "lineHeight": 1.167,
                      },
                      "h2": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "3.75rem",
                        "fontWeight": 300,
                        "letterSpacing": "-0.00833em",
                        "lineHeight": 1.2,
                      },
                      "h3": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "3rem",
                        "fontWeight": 400,
                        "letterSpacing": "0em",
                        "lineHeight": 1.167,
                      },
                      "h4": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "2.125rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.00735em",
                        "lineHeight": 1.235,
                      },
                      "h5": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1.5rem",
                        "fontWeight": 400,
                        "letterSpacing": "0em",
                        "lineHeight": 1.334,
                      },
                      "h6": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1.25rem",
                        "fontWeight": 500,
                        "letterSpacing": "0.0075em",
                        "lineHeight": 1.6,
                      },
                      "htmlFontSize": 16,
                      "overline": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.75rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.08333em",
                        "lineHeight": 2.66,
                        "textTransform": "uppercase",
                      },
                      "pxToRem": [Function],
                      "round": [Function],
                      "subtitle1": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.00938em",
                        "lineHeight": 1.75,
                      },
                      "subtitle2": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.875rem",
                        "fontWeight": 500,
                        "letterSpacing": "0.00714em",
                        "lineHeight": 1.57,
                      },
                    },
                    "zIndex": Object {
                      "appBar": 1100,
                      "drawer": 1200,
                      "mobileStepper": 1000,
                      "modal": 1300,
                      "snackbar": 1400,
                      "speedDial": 1050,
                      "tooltip": 1500,
                    },
                    Symbol(mui.nested): false,
                  }
                }
              >
                <WithStyles(CssBaseline)>
                  <CssBaseline
                    classes={Object {}}
                  />
                </WithStyles(CssBaseline)>
                <QueryClientProvider
                  client={
                    QueryClient {
                      "defaultOptions": Object {},
                      "mutationCache": MutationCache {
                        "config": Object {},
                        "listeners": Array [],
                        "mutationId": 0,
                        "mutations": Array [],
                      },
                      "mutationDefaults": Array [],
                      "queryCache": QueryCache {
                        "config": Object {},
                        "listeners": Array [],
                        "queries": Array [],
                        "queriesMap": Object {},
                      },
                      "queryDefaults": Array [],
                      "unsubscribeFocus": [Function],
                      "unsubscribeOnline": [Function],
                    }
                  }
                >
                  <Memo(PermissionContextProvider)>
                    <Router
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "createHref": [Function],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                    >
                      <Memo(DialogContextProvider)>
                        <ThemeSelector>
                          <AdvThemeSelector>
                            <LanguageSelector />
                            <StylesProvider
                              generateClassName={[Function]}
                            >
                              <Component>
                                <Memo(MultiSelectWithCheckBox)
                                  fullWidth={true}
                                  label="Example label"
                                  onChange={[Function]}
                                  options={
                                    Array [
                                      Object {
                                        "label": "Value 1",
                                        "value": "value1",
                                      },
                                      Object {
                                        "label": "Value 2",
                                        "value": "value2",
                                      },
                                      Object {
                                        "label": "Value 3",
                                        "value": "value3",
                                      },
                                    ]
                                  }
                                  placeholder="Select.."
                                  renderValue={[Function]}
                                  values={
                                    Array [
                                      "value1",
                                      "value2",
                                    ]
                                  }
                                >
                                  <WithStyles(ForwardRef(InputLabel))
                                    shrink={true}
                                  >
                                    <ForwardRef(InputLabel)
                                      classes={
                                        Object {
                                          "animated": "standalone-selector--multi-select-with-check-box-story-MuiInputLabel-animated",
                                          "asterisk": "standalone-selector--multi-select-with-check-box-story-MuiInputLabel-asterisk",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "filled": "standalone-selector--multi-select-with-check-box-story-MuiInputLabel-filled",
                                          "focused": "Mui-focused",
                                          "formControl": "standalone-selector--multi-select-with-check-box-story-MuiInputLabel-formControl",
                                          "marginDense": "standalone-selector--multi-select-with-check-box-story-MuiInputLabel-marginDense",
                                          "outlined": "standalone-selector--multi-select-with-check-box-story-MuiInputLabel-outlined",
                                          "required": "Mui-required",
                                          "root": "standalone-selector--multi-select-with-check-box-story-MuiInputLabel-root",
                                          "shrink": "standalone-selector--multi-select-with-check-box-story-MuiInputLabel-shrink",
                                        }
                                      }
                                      shrink={true}
                                    >
                                      <WithStyles(ForwardRef(FormLabel))
                                        className="standalone-selector--multi-select-with-check-box-story-MuiInputLabel-root standalone-selector--multi-select-with-check-box-story-MuiInputLabel-animated standalone-selector--multi-select-with-check-box-story-MuiInputLabel-shrink"
                                        classes={
                                          Object {
                                            "asterisk": "standalone-selector--multi-select-with-check-box-story-MuiInputLabel-asterisk",
                                            "disabled": "Mui-disabled",
                                            "error": "Mui-error",
                                            "focused": "Mui-focused",
                                            "required": "Mui-required",
                                          }
                                        }
                                        data-shrink={true}
                                      >
                                        <ForwardRef(FormLabel)
                                          className="standalone-selector--multi-select-with-check-box-story-MuiInputLabel-root standalone-selector--multi-select-with-check-box-story-MuiInputLabel-animated standalone-selector--multi-select-with-check-box-story-MuiInputLabel-shrink"
                                          classes={
                                            Object {
                                              "asterisk": "standalone-selector--multi-select-with-check-box-story-MuiFormLabel-asterisk standalone-selector--multi-select-with-check-box-story-MuiInputLabel-asterisk",
                                              "colorSecondary": "standalone-selector--multi-select-with-check-box-story-MuiFormLabel-colorSecondary",
                                              "disabled": "Mui-disabled Mui-disabled",
                                              "error": "Mui-error Mui-error",
                                              "filled": "standalone-selector--multi-select-with-check-box-story-MuiFormLabel-filled",
                                              "focused": "Mui-focused Mui-focused",
                                              "required": "Mui-required Mui-required",
                                              "root": "standalone-selector--multi-select-with-check-box-story-MuiFormLabel-root",
                                            }
                                          }
                                          data-shrink={true}
                                        >
                                          <label
                                            className="standalone-selector--multi-select-with-check-box-story-MuiFormLabel-root standalone-selector--multi-select-with-check-box-story-MuiInputLabel-root standalone-selector--multi-select-with-check-box-story-MuiInputLabel-animated standalone-selector--multi-select-with-check-box-story-MuiInputLabel-shrink"
                                            data-shrink={true}
                                          >
                                            Example label
                                          </label>
                                        </ForwardRef(FormLabel)>
                                      </WithStyles(ForwardRef(FormLabel))>
                                    </ForwardRef(InputLabel)>
                                  </WithStyles(ForwardRef(InputLabel))>
                                  <WithStyles(ForwardRef(Select))
                                    IconComponent={
                                      Object {
                                        "$$typeof": Symbol(react.memo),
                                        "compare": null,
                                        "type": Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "render": [Function],
                                        },
                                      }
                                    }
                                    MenuProps={
                                      Object {
                                        "PaperProps": Object {
                                          "style": Object {
                                            "border": "1px solid #d3d4d5",
                                            "marginTop": 5,
                                          },
                                        },
                                        "anchorOrigin": Object {
                                          "horizontal": "left",
                                          "vertical": "bottom",
                                        },
                                        "getContentAnchorEl": null,
                                        "transformOrigin": Object {
                                          "horizontal": "left",
                                          "vertical": "top",
                                        },
                                      }
                                    }
                                    classes={Object {}}
                                    displayEmpty={true}
                                    fullWidth={true}
                                    input={<WithStyles(WithStyles(ForwardRef(InputBase))) />}
                                    multiple={true}
                                    onChange={[Function]}
                                    placeholder="Select.."
                                    renderValue={[Function]}
                                    value={
                                      Array [
                                        "value1",
                                        "value2",
                                      ]
                                    }
                                  >
                                    <ForwardRef(Select)
                                      IconComponent={
                                        Object {
                                          "$$typeof": Symbol(react.memo),
                                          "compare": null,
                                          "type": Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "render": [Function],
                                          },
                                        }
                                      }
                                      MenuProps={
                                        Object {
                                          "PaperProps": Object {
                                            "style": Object {
                                              "border": "1px solid #d3d4d5",
                                              "marginTop": 5,
                                            },
                                          },
                                          "anchorOrigin": Object {
                                            "horizontal": "left",
                                            "vertical": "bottom",
                                          },
                                          "getContentAnchorEl": null,
                                          "transformOrigin": Object {
                                            "horizontal": "left",
                                            "vertical": "top",
                                          },
                                        }
                                      }
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "filled": "standalone-selector--multi-select-with-check-box-story-MuiSelect-filled",
                                          "icon": "standalone-selector--multi-select-with-check-box-story-MuiSelect-icon",
                                          "iconFilled": "standalone-selector--multi-select-with-check-box-story-MuiSelect-iconFilled",
                                          "iconOpen": "standalone-selector--multi-select-with-check-box-story-MuiSelect-iconOpen",
                                          "iconOutlined": "standalone-selector--multi-select-with-check-box-story-MuiSelect-iconOutlined",
                                          "nativeInput": "standalone-selector--multi-select-with-check-box-story-MuiSelect-nativeInput",
                                          "outlined": "standalone-selector--multi-select-with-check-box-story-MuiSelect-outlined",
                                          "root": "standalone-selector--multi-select-with-check-box-story-MuiSelect-root",
                                          "select": "standalone-selector--multi-select-with-check-box-story-MuiSelect-select",
                                          "selectMenu": "standalone-selector--multi-select-with-check-box-story-MuiSelect-selectMenu",
                                        }
                                      }
                                      displayEmpty={true}
                                      fullWidth={true}
                                      input={<WithStyles(WithStyles(ForwardRef(InputBase))) />}
                                      multiple={true}
                                      onChange={[Function]}
                                      placeholder="Select.."
                                      renderValue={[Function]}
                                      value={
                                        Array [
                                          "value1",
                                          "value2",
                                        ]
                                      }
                                    >
                                      <WithStyles(WithStyles(ForwardRef(InputBase)))
                                        fullWidth={true}
                                        inputComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "propTypes": Object {
                                              "IconComponent": [Function],
                                              "MenuProps": [Function],
                                              "SelectDisplayProps": [Function],
                                              "aria-label": [Function],
                                              "autoFocus": [Function],
                                              "autoWidth": [Function],
                                              "children": [Function],
                                              "className": [Function],
                                              "classes": [Function],
                                              "defaultValue": [Function],
                                              "disabled": [Function],
                                              "displayEmpty": [Function],
                                              "inputRef": [Function],
                                              "labelId": [Function],
                                              "multiple": [Function],
                                              "name": [Function],
                                              "onBlur": [Function],
                                              "onChange": [Function],
                                              "onClose": [Function],
                                              "onFocus": [Function],
                                              "onOpen": [Function],
                                              "open": [Function],
                                              "readOnly": [Function],
                                              "renderValue": [Function],
                                              "tabIndex": [Function],
                                              "type": [Function],
                                              "value": [Function],
                                              "variant": [Function],
                                            },
                                            "render": [Function],
                                          }
                                        }
                                        inputProps={
                                          Object {
                                            "IconComponent": Object {
                                              "$$typeof": Symbol(react.memo),
                                              "compare": null,
                                              "type": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "render": [Function],
                                              },
                                            },
                                            "MenuProps": Object {
                                              "PaperProps": Object {
                                                "style": Object {
                                                  "border": "1px solid #d3d4d5",
                                                  "marginTop": 5,
                                                },
                                              },
                                              "anchorOrigin": Object {
                                                "horizontal": "left",
                                                "vertical": "bottom",
                                              },
                                              "getContentAnchorEl": null,
                                              "transformOrigin": Object {
                                                "horizontal": "left",
                                                "vertical": "top",
                                              },
                                            },
                                            "SelectDisplayProps": Object {
                                              "id": undefined,
                                            },
                                            "autoWidth": false,
                                            "children": Array [
                                              <WithStyles(WithStyles(ForwardRef(MenuItem)))
                                                value="value1"
                                              >
                                                <WithStyles(ForwardRef(Checkbox))
                                                  checked={true}
                                                  className="standalone-selector--multi-select-with-check-box-story-makeStyles-checkboxStyle-4"
                                                />
                                                <WithStyles(WithStyles(ForwardRef(ListItemText)))
                                                  primary="Value 1"
                                                />
                                              </WithStyles(WithStyles(ForwardRef(MenuItem)))>,
                                              <WithStyles(WithStyles(ForwardRef(MenuItem)))
                                                value="value2"
                                              >
                                                <WithStyles(ForwardRef(Checkbox))
                                                  checked={true}
                                                  className="standalone-selector--multi-select-with-check-box-story-makeStyles-checkboxStyle-4"
                                                />
                                                <WithStyles(WithStyles(ForwardRef(ListItemText)))
                                                  primary="Value 2"
                                                />
                                              </WithStyles(WithStyles(ForwardRef(MenuItem)))>,
                                              <WithStyles(WithStyles(ForwardRef(MenuItem)))
                                                value="value3"
                                              >
                                                <WithStyles(ForwardRef(Checkbox))
                                                  checked={false}
                                                  className="standalone-selector--multi-select-with-check-box-story-makeStyles-checkboxStyle-4"
                                                />
                                                <WithStyles(WithStyles(ForwardRef(ListItemText)))
                                                  primary="Value 3"
                                                />
                                              </WithStyles(WithStyles(ForwardRef(MenuItem)))>,
                                            ],
                                            "classes": Object {
                                              "disabled": "Mui-disabled",
                                              "filled": "standalone-selector--multi-select-with-check-box-story-MuiSelect-filled",
                                              "icon": "standalone-selector--multi-select-with-check-box-story-MuiSelect-icon",
                                              "iconFilled": "standalone-selector--multi-select-with-check-box-story-MuiSelect-iconFilled",
                                              "iconOpen": "standalone-selector--multi-select-with-check-box-story-MuiSelect-iconOpen",
                                              "iconOutlined": "standalone-selector--multi-select-with-check-box-story-MuiSelect-iconOutlined",
                                              "nativeInput": "standalone-selector--multi-select-with-check-box-story-MuiSelect-nativeInput",
                                              "outlined": "standalone-selector--multi-select-with-check-box-story-MuiSelect-outlined",
                                              "root": "standalone-selector--multi-select-with-check-box-story-MuiSelect-root",
                                              "select": "standalone-selector--multi-select-with-check-box-story-MuiSelect-select",
                                              "selectMenu": "standalone-selector--multi-select-with-check-box-story-MuiSelect-selectMenu",
                                            },
                                            "displayEmpty": true,
                                            "labelId": undefined,
                                            "multiple": true,
                                            "onClose": undefined,
                                            "onOpen": undefined,
                                            "open": undefined,
                                            "renderValue": [Function],
                                            "type": undefined,
                                            "variant": "standard",
                                          }
                                        }
                                        onChange={[Function]}
                                        placeholder="Select.."
                                        value={
                                          Array [
                                            "value1",
                                            "value2",
                                          ]
                                        }
                                      >
                                        <WithStyles(ForwardRef(InputBase))
                                          classes={
                                            Object {
                                              "input": "standalone-selector--multi-select-with-check-box-story-WithStyles(ForwardRef(InputBase))-input-6",
                                              "root": "standalone-selector--multi-select-with-check-box-story-WithStyles(ForwardRef(InputBase))-root-5",
                                            }
                                          }
                                          fullWidth={true}
                                          inputComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "propTypes": Object {
                                                "IconComponent": [Function],
                                                "MenuProps": [Function],
                                                "SelectDisplayProps": [Function],
                                                "aria-label": [Function],
                                                "autoFocus": [Function],
                                                "autoWidth": [Function],
                                                "children": [Function],
                                                "className": [Function],
                                                "classes": [Function],
                                                "defaultValue": [Function],
                                                "disabled": [Function],
                                                "displayEmpty": [Function],
                                                "inputRef": [Function],
                                                "labelId": [Function],
                                                "multiple": [Function],
                                                "name": [Function],
                                                "onBlur": [Function],
                                                "onChange": [Function],
                                                "onClose": [Function],
                                                "onFocus": [Function],
                                                "onOpen": [Function],
                                                "open": [Function],
                                                "readOnly": [Function],
                                                "renderValue": [Function],
                                                "tabIndex": [Function],
                                                "type": [Function],
                                                "value": [Function],
                                                "variant": [Function],
                                              },
                                              "render": [Function],
                                            }
                                          }
                                          inputProps={
                                            Object {
                                              "IconComponent": Object {
                                                "$$typeof": Symbol(react.memo),
                                                "compare": null,
                                                "type": Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "render": [Function],
                                                },
                                              },
                                              "MenuProps": Object {
                                                "PaperProps": Object {
                                                  "style": Object {
                                                    "border": "1px solid #d3d4d5",
                                                    "marginTop": 5,
                                                  },
                                                },
                                                "anchorOrigin": Object {
                                                  "horizontal": "left",
                                                  "vertical": "bottom",
                                                },
                                                "getContentAnchorEl": null,
                                                "transformOrigin": Object {
                                                  "horizontal": "left",
                                                  "vertical": "top",
                                                },
                                              },
                                              "SelectDisplayProps": Object {
                                                "id": undefined,
                                              },
                                              "autoWidth": false,
                                              "children": Array [
                                                <WithStyles(WithStyles(ForwardRef(MenuItem)))
                                                  value="value1"
                                                >
                                                  <WithStyles(ForwardRef(Checkbox))
                                                    checked={true}
                                                    className="standalone-selector--multi-select-with-check-box-story-makeStyles-checkboxStyle-4"
                                                  />
                                                  <WithStyles(WithStyles(ForwardRef(ListItemText)))
                                                    primary="Value 1"
                                                  />
                                                </WithStyles(WithStyles(ForwardRef(MenuItem)))>,
                                                <WithStyles(WithStyles(ForwardRef(MenuItem)))
                                                  value="value2"
                                                >
                                                  <WithStyles(ForwardRef(Checkbox))
                                                    checked={true}
                                                    className="standalone-selector--multi-select-with-check-box-story-makeStyles-checkboxStyle-4"
                                                  />
                                                  <WithStyles(WithStyles(ForwardRef(ListItemText)))
                                                    primary="Value 2"
                                                  />
                                                </WithStyles(WithStyles(ForwardRef(MenuItem)))>,
                                                <WithStyles(WithStyles(ForwardRef(MenuItem)))
                                                  value="value3"
                                                >
                                                  <WithStyles(ForwardRef(Checkbox))
                                                    checked={false}
                                                    className="standalone-selector--multi-select-with-check-box-story-makeStyles-checkboxStyle-4"
                                                  />
                                                  <WithStyles(WithStyles(ForwardRef(ListItemText)))
                                                    primary="Value 3"
                                                  />
                                                </WithStyles(WithStyles(ForwardRef(MenuItem)))>,
                                              ],
                                              "classes": Object {
                                                "disabled": "Mui-disabled",
                                                "filled": "standalone-selector--multi-select-with-check-box-story-MuiSelect-filled",
                                                "icon": "standalone-selector--multi-select-with-check-box-story-MuiSelect-icon",
                                                "iconFilled": "standalone-selector--multi-select-with-check-box-story-MuiSelect-iconFilled",
                                                "iconOpen": "standalone-selector--multi-select-with-check-box-story-MuiSelect-iconOpen",
                                                "iconOutlined": "standalone-selector--multi-select-with-check-box-story-MuiSelect-iconOutlined",
                                                "nativeInput": "standalone-selector--multi-select-with-check-box-story-MuiSelect-nativeInput",
                                                "outlined": "standalone-selector--multi-select-with-check-box-story-MuiSelect-outlined",
                                                "root": "standalone-selector--multi-select-with-check-box-story-MuiSelect-root",
                                                "select": "standalone-selector--multi-select-with-check-box-story-MuiSelect-select",
                                                "selectMenu": "standalone-selector--multi-select-with-check-box-story-MuiSelect-selectMenu",
                                              },
                                              "displayEmpty": true,
                                              "labelId": undefined,
                                              "multiple": true,
                                              "onClose": undefined,
                                              "onOpen": undefined,
                                              "open": undefined,
                                              "renderValue": [Function],
                                              "type": undefined,
                                              "variant": "standard",
                                            }
                                          }
                                          onChange={[Function]}
                                          placeholder="Select.."
                                          value={
                                            Array [
                                              "value1",
                                              "value2",
                                            ]
                                          }
                                        >
                                          <ForwardRef(InputBase)
                                            classes={
                                              Object {
                                                "adornedEnd": "standalone-selector--multi-select-with-check-box-story-MuiInputBase-adornedEnd",
                                                "adornedStart": "standalone-selector--multi-select-with-check-box-story-MuiInputBase-adornedStart",
                                                "colorSecondary": "standalone-selector--multi-select-with-check-box-story-MuiInputBase-colorSecondary",
                                                "disabled": "Mui-disabled",
                                                "error": "Mui-error",
                                                "focused": "Mui-focused",
                                                "formControl": "standalone-selector--multi-select-with-check-box-story-MuiInputBase-formControl",
                                                "fullWidth": "standalone-selector--multi-select-with-check-box-story-MuiInputBase-fullWidth",
                                                "input": "standalone-selector--multi-select-with-check-box-story-MuiInputBase-input standalone-selector--multi-select-with-check-box-story-WithStyles(ForwardRef(InputBase))-input-6",
                                                "inputAdornedEnd": "standalone-selector--multi-select-with-check-box-story-MuiInputBase-inputAdornedEnd",
                                                "inputAdornedStart": "standalone-selector--multi-select-with-check-box-story-MuiInputBase-inputAdornedStart",
                                                "inputHiddenLabel": "standalone-selector--multi-select-with-check-box-story-MuiInputBase-inputHiddenLabel",
                                                "inputMarginDense": "standalone-selector--multi-select-with-check-box-story-MuiInputBase-inputMarginDense",
                                                "inputMultiline": "standalone-selector--multi-select-with-check-box-story-MuiInputBase-inputMultiline",
                                                "inputTypeSearch": "standalone-selector--multi-select-with-check-box-story-MuiInputBase-inputTypeSearch",
                                                "marginDense": "standalone-selector--multi-select-with-check-box-story-MuiInputBase-marginDense",
                                                "multiline": "standalone-selector--multi-select-with-check-box-story-MuiInputBase-multiline",
                                                "root": "standalone-selector--multi-select-with-check-box-story-MuiInputBase-root standalone-selector--multi-select-with-check-box-story-WithStyles(ForwardRef(InputBase))-root-5",
                                              }
                                            }
                                            fullWidth={true}
                                            inputComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "propTypes": Object {
                                                  "IconComponent": [Function],
                                                  "MenuProps": [Function],
                                                  "SelectDisplayProps": [Function],
                                                  "aria-label": [Function],
                                                  "autoFocus": [Function],
                                                  "autoWidth": [Function],
                                                  "children": [Function],
                                                  "className": [Function],
                                                  "classes": [Function],
                                                  "defaultValue": [Function],
                                                  "disabled": [Function],
                                                  "displayEmpty": [Function],
                                                  "inputRef": [Function],
                                                  "labelId": [Function],
                                                  "multiple": [Function],
                                                  "name": [Function],
                                                  "onBlur": [Function],
                                                  "onChange": [Function],
                                                  "onClose": [Function],
                                                  "onFocus": [Function],
                                                  "onOpen": [Function],
                                                  "open": [Function],
                                                  "readOnly": [Function],
                                                  "renderValue": [Function],
                                                  "tabIndex": [Function],
                                                  "type": [Function],
                                                  "value": [Function],
                                                  "variant": [Function],
                                                },
                                                "render": [Function],
                                              }
                                            }
                                            inputProps={
                                              Object {
                                                "IconComponent": Object {
                                                  "$$typeof": Symbol(react.memo),
                                                  "compare": null,
                                                  "type": Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "render": [Function],
                                                  },
                                                },
                                                "MenuProps": Object {
                                                  "PaperProps": Object {
                                                    "style": Object {
                                                      "border": "1px solid #d3d4d5",
                                                      "marginTop": 5,
                                                    },
                                                  },
                                                  "anchorOrigin": Object {
                                                    "horizontal": "left",
                                                    "vertical": "bottom",
                                                  },
                                                  "getContentAnchorEl": null,
                                                  "transformOrigin": Object {
                                                    "horizontal": "left",
                                                    "vertical": "top",
                                                  },
                                                },
                                                "SelectDisplayProps": Object {
                                                  "id": undefined,
                                                },
                                                "autoWidth": false,
                                                "children": Array [
                                                  <WithStyles(WithStyles(ForwardRef(MenuItem)))
                                                    value="value1"
                                                  >
                                                    <WithStyles(ForwardRef(Checkbox))
                                                      checked={true}
                                                      className="standalone-selector--multi-select-with-check-box-story-makeStyles-checkboxStyle-4"
                                                    />
                                                    <WithStyles(WithStyles(ForwardRef(ListItemText)))
                                                      primary="Value 1"
                                                    />
                                                  </WithStyles(WithStyles(ForwardRef(MenuItem)))>,
                                                  <WithStyles(WithStyles(ForwardRef(MenuItem)))
                                                    value="value2"
                                                  >
                                                    <WithStyles(ForwardRef(Checkbox))
                                                      checked={true}
                                                      className="standalone-selector--multi-select-with-check-box-story-makeStyles-checkboxStyle-4"
                                                    />
                                                    <WithStyles(WithStyles(ForwardRef(ListItemText)))
                                                      primary="Value 2"
                                                    />
                                                  </WithStyles(WithStyles(ForwardRef(MenuItem)))>,
                                                  <WithStyles(WithStyles(ForwardRef(MenuItem)))
                                                    value="value3"
                                                  >
                                                    <WithStyles(ForwardRef(Checkbox))
                                                      checked={false}
                                                      className="standalone-selector--multi-select-with-check-box-story-makeStyles-checkboxStyle-4"
                                                    />
                                                    <WithStyles(WithStyles(ForwardRef(ListItemText)))
                                                      primary="Value 3"
                                                    />
                                                  </WithStyles(WithStyles(ForwardRef(MenuItem)))>,
                                                ],
                                                "classes": Object {
                                                  "disabled": "Mui-disabled",
                                                  "filled": "standalone-selector--multi-select-with-check-box-story-MuiSelect-filled",
                                                  "icon": "standalone-selector--multi-select-with-check-box-story-MuiSelect-icon",
                                                  "iconFilled": "standalone-selector--multi-select-with-check-box-story-MuiSelect-iconFilled",
                                                  "iconOpen": "standalone-selector--multi-select-with-check-box-story-MuiSelect-iconOpen",
                                                  "iconOutlined": "standalone-selector--multi-select-with-check-box-story-MuiSelect-iconOutlined",
                                                  "nativeInput": "standalone-selector--multi-select-with-check-box-story-MuiSelect-nativeInput",
                                                  "outlined": "standalone-selector--multi-select-with-check-box-story-MuiSelect-outlined",
                                                  "root": "standalone-selector--multi-select-with-check-box-story-MuiSelect-root",
                                                  "select": "standalone-selector--multi-select-with-check-box-story-MuiSelect-select",
                                                  "selectMenu": "standalone-selector--multi-select-with-check-box-story-MuiSelect-selectMenu",
                                                },
                                                "displayEmpty": true,
                                                "labelId": undefined,
                                                "multiple": true,
                                                "onClose": undefined,
                                                "onOpen": undefined,
                                                "open": undefined,
                                                "renderValue": [Function],
                                                "type": undefined,
                                                "variant": "standard",
                                              }
                                            }
                                            onChange={[Function]}
                                            placeholder="Select.."
                                            value={
                                              Array [
                                                "value1",
                                                "value2",
                                              ]
                                            }
                                          >
                                            <div
                                              className="standalone-selector--multi-select-with-check-box-story-MuiInputBase-root standalone-selector--multi-select-with-check-box-story-WithStyles(ForwardRef(InputBase))-root-5 standalone-selector--multi-select-with-check-box-story-MuiInputBase-fullWidth"
                                              onClick={[Function]}
                                            >
                                              <ForwardRef(SelectInput)
                                                IconComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.memo),
                                                    "compare": null,
                                                    "type": Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "render": [Function],
                                                    },
                                                  }
                                                }
                                                MenuProps={
                                                  Object {
                                                    "PaperProps": Object {
                                                      "style": Object {
                                                        "border": "1px solid #d3d4d5",
                                                        "marginTop": 5,
                                                      },
                                                    },
                                                    "anchorOrigin": Object {
                                                      "horizontal": "left",
                                                      "vertical": "bottom",
                                                    },
                                                    "getContentAnchorEl": null,
                                                    "transformOrigin": Object {
                                                      "horizontal": "left",
                                                      "vertical": "top",
                                                    },
                                                  }
                                                }
                                                SelectDisplayProps={
                                                  Object {
                                                    "id": undefined,
                                                  }
                                                }
                                                autoWidth={false}
                                                className="standalone-selector--multi-select-with-check-box-story-MuiInputBase-input standalone-selector--multi-select-with-check-box-story-WithStyles(ForwardRef(InputBase))-input-6"
                                                classes={
                                                  Object {
                                                    "disabled": "Mui-disabled",
                                                    "filled": "standalone-selector--multi-select-with-check-box-story-MuiSelect-filled",
                                                    "icon": "standalone-selector--multi-select-with-check-box-story-MuiSelect-icon",
                                                    "iconFilled": "standalone-selector--multi-select-with-check-box-story-MuiSelect-iconFilled",
                                                    "iconOpen": "standalone-selector--multi-select-with-check-box-story-MuiSelect-iconOpen",
                                                    "iconOutlined": "standalone-selector--multi-select-with-check-box-story-MuiSelect-iconOutlined",
                                                    "nativeInput": "standalone-selector--multi-select-with-check-box-story-MuiSelect-nativeInput",
                                                    "outlined": "standalone-selector--multi-select-with-check-box-story-MuiSelect-outlined",
                                                    "root": "standalone-selector--multi-select-with-check-box-story-MuiSelect-root",
                                                    "select": "standalone-selector--multi-select-with-check-box-story-MuiSelect-select",
                                                    "selectMenu": "standalone-selector--multi-select-with-check-box-story-MuiSelect-selectMenu",
                                                  }
                                                }
                                                displayEmpty={true}
                                                inputRef={[Function]}
                                                multiple={true}
                                                onAnimationStart={[Function]}
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onFocus={[Function]}
                                                placeholder="Select.."
                                                renderValue={[Function]}
                                                value={
                                                  Array [
                                                    "value1",
                                                    "value2",
                                                  ]
                                                }
                                                variant="standard"
                                              >
                                                <div
                                                  aria-haspopup="listbox"
                                                  className="standalone-selector--multi-select-with-check-box-story-MuiSelect-root standalone-selector--multi-select-with-check-box-story-MuiSelect-select standalone-selector--multi-select-with-check-box-story-MuiSelect-selectMenu standalone-selector--multi-select-with-check-box-story-MuiInputBase-input standalone-selector--multi-select-with-check-box-story-WithStyles(ForwardRef(InputBase))-input-6"
                                                  onBlur={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  onMouseDown={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  Value 1, Value 2
                                                </div>
                                                <input
                                                  aria-hidden={true}
                                                  className="standalone-selector--multi-select-with-check-box-story-MuiSelect-nativeInput"
                                                  onAnimationStart={[Function]}
                                                  onChange={[Function]}
                                                  placeholder="Select.."
                                                  tabIndex={-1}
                                                  value="value1,value2"
                                                />
                                                <ForwardRef(ExpandMoreIcon)
                                                  className="standalone-selector--multi-select-with-check-box-story-MuiSelect-icon"
                                                >
                                                  <WithStyles(ForwardRef(SvgIcon))
                                                    className="standalone-selector--multi-select-with-check-box-story-MuiSelect-icon"
                                                  >
                                                    <ForwardRef(SvgIcon)
                                                      className="standalone-selector--multi-select-with-check-box-story-MuiSelect-icon"
                                                      classes={
                                                        Object {
                                                          "colorAction": "standalone-selector--multi-select-with-check-box-story-MuiSvgIcon-colorAction",
                                                          "colorDisabled": "standalone-selector--multi-select-with-check-box-story-MuiSvgIcon-colorDisabled",
                                                          "colorError": "standalone-selector--multi-select-with-check-box-story-MuiSvgIcon-colorError",
                                                          "colorPrimary": "standalone-selector--multi-select-with-check-box-story-MuiSvgIcon-colorPrimary",
                                                          "colorSecondary": "standalone-selector--multi-select-with-check-box-story-MuiSvgIcon-colorSecondary",
                                                          "fontSizeInherit": "standalone-selector--multi-select-with-check-box-story-MuiSvgIcon-fontSizeInherit",
                                                          "fontSizeLarge": "standalone-selector--multi-select-with-check-box-story-MuiSvgIcon-fontSizeLarge",
                                                          "fontSizeSmall": "standalone-selector--multi-select-with-check-box-story-MuiSvgIcon-fontSizeSmall",
                                                          "root": "standalone-selector--multi-select-with-check-box-story-MuiSvgIcon-root",
                                                        }
                                                      }
                                                    >
                                                      <svg
                                                        aria-hidden={true}
                                                        className="standalone-selector--multi-select-with-check-box-story-MuiSvgIcon-root standalone-selector--multi-select-with-check-box-story-MuiSelect-icon"
                                                        focusable="false"
                                                        viewBox="0 0 24 24"
                                                      >
                                                        <path
                                                          d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
                                                        />
                                                      </svg>
                                                    </ForwardRef(SvgIcon)>
                                                  </WithStyles(ForwardRef(SvgIcon))>
                                                </ForwardRef(ExpandMoreIcon)>
                                                <WithStyles(ForwardRef(Menu))
                                                  MenuListProps={
                                                    Object {
                                                      "aria-labelledby": undefined,
                                                      "disableListWrap": true,
                                                      "role": "listbox",
                                                    }
                                                  }
                                                  PaperProps={
                                                    Object {
                                                      "style": Object {
                                                        "border": "1px solid #d3d4d5",
                                                        "marginTop": 5,
                                                        "minWidth": undefined,
                                                      },
                                                    }
                                                  }
                                                  anchorEl={
                                                    <div
                                                      aria-haspopup="listbox"
                                                      class="standalone-selector--multi-select-with-check-box-story-MuiSelect-root standalone-selector--multi-select-with-check-box-story-MuiSelect-select standalone-selector--multi-select-with-check-box-story-MuiSelect-selectMenu standalone-selector--multi-select-with-check-box-story-MuiInputBase-input standalone-selector--multi-select-with-check-box-story-WithStyles(ForwardRef(InputBase))-input-6"
                                                      role="button"
                                                      tabindex="0"
                                                    >
                                                      Value 1, Value 2
                                                    </div>
                                                  }
                                                  anchorOrigin={
                                                    Object {
                                                      "horizontal": "left",
                                                      "vertical": "bottom",
                                                    }
                                                  }
                                                  getContentAnchorEl={null}
                                                  id="menu-"
                                                  onClose={[Function]}
                                                  open={false}
                                                  transformOrigin={
                                                    Object {
                                                      "horizontal": "left",
                                                      "vertical": "top",
                                                    }
                                                  }
                                                >
                                                  <ForwardRef(Menu)
                                                    MenuListProps={
                                                      Object {
                                                        "aria-labelledby": undefined,
                                                        "disableListWrap": true,
                                                        "role": "listbox",
                                                      }
                                                    }
                                                    PaperProps={
                                                      Object {
                                                        "style": Object {
                                                          "border": "1px solid #d3d4d5",
                                                          "marginTop": 5,
                                                          "minWidth": undefined,
                                                        },
                                                      }
                                                    }
                                                    anchorEl={
                                                      <div
                                                        aria-haspopup="listbox"
                                                        class="standalone-selector--multi-select-with-check-box-story-MuiSelect-root standalone-selector--multi-select-with-check-box-story-MuiSelect-select standalone-selector--multi-select-with-check-box-story-MuiSelect-selectMenu standalone-selector--multi-select-with-check-box-story-MuiInputBase-input standalone-selector--multi-select-with-check-box-story-WithStyles(ForwardRef(InputBase))-input-6"
                                                        role="button"
                                                        tabindex="0"
                                                      >
                                                        Value 1, Value 2
                                                      </div>
                                                    }
                                                    anchorOrigin={
                                                      Object {
                                                        "horizontal": "left",
                                                        "vertical": "bottom",
                                                      }
                                                    }
                                                    classes={
                                                      Object {
                                                        "list": "standalone-selector--multi-select-with-check-box-story-MuiMenu-list",
                                                        "paper": "standalone-selector--multi-select-with-check-box-story-MuiMenu-paper",
                                                      }
                                                    }
                                                    getContentAnchorEl={null}
                                                    id="menu-"
                                                    onClose={[Function]}
                                                    open={false}
                                                    transformOrigin={
                                                      Object {
                                                        "horizontal": "left",
                                                        "vertical": "top",
                                                      }
                                                    }
                                                  >
                                                    <WithStyles(ForwardRef(Popover))
                                                      PaperProps={
                                                        Object {
                                                          "classes": Object {
                                                            "root": "standalone-selector--multi-select-with-check-box-story-MuiMenu-paper",
                                                          },
                                                          "style": Object {
                                                            "border": "1px solid #d3d4d5",
                                                            "marginTop": 5,
                                                            "minWidth": undefined,
                                                          },
                                                        }
                                                      }
                                                      anchorEl={
                                                        <div
                                                          aria-haspopup="listbox"
                                                          class="standalone-selector--multi-select-with-check-box-story-MuiSelect-root standalone-selector--multi-select-with-check-box-story-MuiSelect-select standalone-selector--multi-select-with-check-box-story-MuiSelect-selectMenu standalone-selector--multi-select-with-check-box-story-MuiInputBase-input standalone-selector--multi-select-with-check-box-story-WithStyles(ForwardRef(InputBase))-input-6"
                                                          role="button"
                                                          tabindex="0"
                                                        >
                                                          Value 1, Value 2
                                                        </div>
                                                      }
                                                      anchorOrigin={
                                                        Object {
                                                          "horizontal": "left",
                                                          "vertical": "bottom",
                                                        }
                                                      }
                                                      getContentAnchorEl={null}
                                                      id="menu-"
                                                      onClose={[Function]}
                                                      onEntering={[Function]}
                                                      open={false}
                                                      transformOrigin={
                                                        Object {
                                                          "horizontal": "left",
                                                          "vertical": "top",
                                                        }
                                                      }
                                                      transitionDuration="auto"
                                                    >
                                                      <ForwardRef(Popover)
                                                        PaperProps={
                                                          Object {
                                                            "classes": Object {
                                                              "root": "standalone-selector--multi-select-with-check-box-story-MuiMenu-paper",
                                                            },
                                                            "style": Object {
                                                              "border": "1px solid #d3d4d5",
                                                              "marginTop": 5,
                                                              "minWidth": undefined,
                                                            },
                                                          }
                                                        }
                                                        anchorEl={
                                                          <div
                                                            aria-haspopup="listbox"
                                                            class="standalone-selector--multi-select-with-check-box-story-MuiSelect-root standalone-selector--multi-select-with-check-box-story-MuiSelect-select standalone-selector--multi-select-with-check-box-story-MuiSelect-selectMenu standalone-selector--multi-select-with-check-box-story-MuiInputBase-input standalone-selector--multi-select-with-check-box-story-WithStyles(ForwardRef(InputBase))-input-6"
                                                            role="button"
                                                            tabindex="0"
                                                          >
                                                            Value 1, Value 2
                                                          </div>
                                                        }
                                                        anchorOrigin={
                                                          Object {
                                                            "horizontal": "left",
                                                            "vertical": "bottom",
                                                          }
                                                        }
                                                        classes={
                                                          Object {
                                                            "paper": "standalone-selector--multi-select-with-check-box-story-MuiPopover-paper",
                                                            "root": "standalone-selector--multi-select-with-check-box-story-MuiPopover-root",
                                                          }
                                                        }
                                                        getContentAnchorEl={null}
                                                        id="menu-"
                                                        onClose={[Function]}
                                                        onEntering={[Function]}
                                                        open={false}
                                                        transformOrigin={
                                                          Object {
                                                            "horizontal": "left",
                                                            "vertical": "top",
                                                          }
                                                        }
                                                        transitionDuration="auto"
                                                      >
                                                        <ForwardRef(Modal)
                                                          BackdropProps={
                                                            Object {
                                                              "invisible": true,
                                                            }
                                                          }
                                                          className="standalone-selector--multi-select-with-check-box-story-MuiPopover-root"
                                                          container={
                                                            <body
                                                              style=""
                                                            >
                                                              <div
                                                                class="app"
                                                                id="app"
                                                              >
                                                                <label
                                                                  class="standalone-selector--multi-select-with-check-box-story-MuiFormLabel-root standalone-selector--multi-select-with-check-box-story-MuiInputLabel-root standalone-selector--multi-select-with-check-box-story-MuiInputLabel-animated standalone-selector--multi-select-with-check-box-story-MuiInputLabel-shrink"
                                                                  data-shrink="true"
                                                                >
                                                                  Example label
                                                                </label>
                                                                <div
                                                                  class="standalone-selector--multi-select-with-check-box-story-MuiInputBase-root standalone-selector--multi-select-with-check-box-story-WithStyles(ForwardRef(InputBase))-root-5 standalone-selector--multi-select-with-check-box-story-MuiInputBase-fullWidth"
                                                                >
                                                                  <div
                                                                    aria-haspopup="listbox"
                                                                    class="standalone-selector--multi-select-with-check-box-story-MuiSelect-root standalone-selector--multi-select-with-check-box-story-MuiSelect-select standalone-selector--multi-select-with-check-box-story-MuiSelect-selectMenu standalone-selector--multi-select-with-check-box-story-MuiInputBase-input standalone-selector--multi-select-with-check-box-story-WithStyles(ForwardRef(InputBase))-input-6"
                                                                    role="button"
                                                                    tabindex="0"
                                                                  >
                                                                    Value 1, Value 2
                                                                  </div>
                                                                  <input
                                                                    aria-hidden="true"
                                                                    class="standalone-selector--multi-select-with-check-box-story-MuiSelect-nativeInput"
                                                                    placeholder="Select.."
                                                                    tabindex="-1"
                                                                    value="value1,value2"
                                                                  />
                                                                  <svg
                                                                    aria-hidden="true"
                                                                    class="standalone-selector--multi-select-with-check-box-story-MuiSvgIcon-root standalone-selector--multi-select-with-check-box-story-MuiSelect-icon"
                                                                    focusable="false"
                                                                    viewBox="0 0 24 24"
                                                                  >
                                                                    <path
                                                                      d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
                                                                    />
                                                                  </svg>
                                                                </div>
                                                              </div>
                                                            </body>
                                                          }
                                                          id="menu-"
                                                          onClose={[Function]}
                                                          open={false}
                                                        />
                                                      </ForwardRef(Popover)>
                                                    </WithStyles(ForwardRef(Popover))>
                                                  </ForwardRef(Menu)>
                                                </WithStyles(ForwardRef(Menu))>
                                              </ForwardRef(SelectInput)>
                                            </div>
                                          </ForwardRef(InputBase)>
                                        </WithStyles(ForwardRef(InputBase))>
                                      </WithStyles(WithStyles(ForwardRef(InputBase)))>
                                    </ForwardRef(Select)>
                                  </WithStyles(ForwardRef(Select))>
                                </Memo(MultiSelectWithCheckBox)>
                              </Component>
                            </StylesProvider>
                          </AdvThemeSelector>
                        </ThemeSelector>
                      </Memo(DialogContextProvider)>
                    </Router>
                  </Memo(PermissionContextProvider)>
                </QueryClientProvider>
              </ThemeProvider>
            </Memo(ThemeProvider)>
          </MuiPickersUtilsProvider>
        </Memo(MuiPickerUtils)>
      </I18nextProvider>
    </Memo(CCI18nProvider)>
  </Suspense>
</Memo(ComponentsCareFramework)>
`;

exports[`Storyshots Standalone/Selector MultiWithTags 1`] = `
<Memo(ComponentsCareFramework)
  defaultTheme={[Function]}
>
  <Suspense
    fallback={<Memo(Loader) />}
  >
    <Memo(CCI18nProvider)>
      <I18nextProvider
        i18n={
          I18n {
            "addResource": [Function],
            "addResourceBundle": [Function],
            "addResources": [Function],
            "format": undefined,
            "getDataByLanguage": [Function],
            "getResource": [Function],
            "getResourceBundle": [Function],
            "hasResourceBundle": [Function],
            "isInitialized": true,
            "isLanguageChangingTo": undefined,
            "language": "en",
            "languages": Array [
              "en",
            ],
            "logger": Logger {
              "debug": true,
              "logger": Object {
                "error": [Function],
                "log": [Function],
                "output": [Function],
                "type": "logger",
                "warn": [Function],
              },
              "options": Object {
                "appendNamespaceToCIMode": false,
                "appendNamespaceToMissingKey": false,
                "contextSeparator": "_",
                "debug": true,
                "defaultNS": "translation",
                "fallbackLng": Array [
                  "en",
                ],
                "fallbackNS": false,
                "initImmediate": false,
                "interpolation": Object {
                  "escapeValue": false,
                },
                "joinArrays": false,
                "keySeparator": ".",
                "load": "all",
                "missingInterpolationHandler": false,
                "missingKeyHandler": false,
                "nonExplicitSupportedLngs": true,
                "nonExplicitWhitelist": false,
                "ns": Array [],
                "nsSeparator": ":",
                "overloadTranslationOptionHandler": [Function],
                "parseMissingKeyHandler": false,
                "partialBundledLanguages": false,
                "pluralSeparator": "_",
                "postProcess": false,
                "postProcessPassResolved": false,
                "preload": false,
                "resources": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
                "returnEmptyString": true,
                "returnNull": true,
                "returnObjects": false,
                "returnedObjectHandler": false,
                "saveMissing": false,
                "saveMissingPlurals": true,
                "saveMissingTo": "fallback",
                "simplifyPluralSuffix": true,
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "updateMissing": false,
                "whitelist": false,
              },
              "prefix": "i18next:",
            },
            "modules": Object {
              "external": Array [],
              "languageDetector": [Function],
            },
            "observers": Object {
              "languageChanged": Array [
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
              ],
            },
            "options": Object {
              "appendNamespaceToCIMode": false,
              "appendNamespaceToMissingKey": false,
              "contextSeparator": "_",
              "debug": true,
              "defaultNS": "translation",
              "fallbackLng": Array [
                "en",
              ],
              "fallbackNS": false,
              "initImmediate": false,
              "interpolation": Object {
                "escapeValue": false,
              },
              "joinArrays": false,
              "keySeparator": ".",
              "load": "all",
              "missingInterpolationHandler": false,
              "missingKeyHandler": false,
              "nonExplicitSupportedLngs": true,
              "nonExplicitWhitelist": false,
              "ns": Array [],
              "nsSeparator": ":",
              "overloadTranslationOptionHandler": [Function],
              "parseMissingKeyHandler": false,
              "partialBundledLanguages": false,
              "pluralSeparator": "_",
              "postProcess": false,
              "postProcessPassResolved": false,
              "preload": false,
              "resources": Object {
                "de": Object {},
                "en": Object {},
                "fr": Object {},
                "ru": Object {},
                "uz": Object {},
              },
              "returnEmptyString": true,
              "returnNull": true,
              "returnObjects": false,
              "returnedObjectHandler": false,
              "saveMissing": false,
              "saveMissingPlurals": true,
              "saveMissingTo": "fallback",
              "simplifyPluralSuffix": true,
              "supportedLngs": Array [
                "de",
                "en",
                "fr",
                "ru",
                "uz",
                "cimode",
              ],
              "updateMissing": false,
              "whitelist": false,
            },
            "removeResourceBundle": [Function],
            "reportNamespaces": ReportNamespaces {
              "usedNamespaces": Object {
                "translation": true,
              },
            },
            "services": Object {
              "backendConnector": Connector {
                "backend": null,
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::backendConnector:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::backendConnector:",
                },
                "observers": Object {
                  "*": Array [
                    [Function],
                  ],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "queue": Array [],
                "services": [Circular],
                "state": Object {},
                "store": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
              },
              "interpolator": Interpolator {
                "alwaysFormat": false,
                "escape": [Function],
                "escapeValue": false,
                "format": [Function],
                "formatSeparator": ",",
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::interpolator:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::interpolator:",
                },
                "maxReplaces": 1000,
                "nestingOptionsSeparator": ",",
                "nestingPrefix": "\\\\$t\\\\(",
                "nestingRegexp": /\\\\\\$t\\\\\\(\\(\\.\\+\\?\\)\\\\\\)/g,
                "nestingSuffix": "\\\\)",
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "{{",
                "regexp": /\\{\\{\\(\\.\\+\\?\\)\\}\\}/g,
                "regexpUnescape": /\\{\\{-\\(\\.\\+\\?\\)\\}\\}/g,
                "suffix": "}}",
                "unescapePrefix": "-",
                "unescapeSuffix": "",
                "useRawValueToEscape": false,
              },
              "languageDetector": Browser {
                "detectors": Object {
                  "cookie": Object {
                    "cacheUserLanguage": [Function],
                    "lookup": [Function],
                    "name": "cookie",
                  },
                  "htmlTag": Object {
                    "lookup": [Function],
                    "name": "htmlTag",
                  },
                  "localStorage": Object {
                    "cacheUserLanguage": [Function],
                    "lookup": [Function],
                    "name": "localStorage",
                  },
                  "navigator": Object {
                    "lookup": [Function],
                    "name": "navigator",
                  },
                  "path": Object {
                    "lookup": [Function],
                    "name": "path",
                  },
                  "querystring": Object {
                    "lookup": [Function],
                    "name": "querystring",
                  },
                  "sessionStorage": Object {
                    "cacheUserLanguage": [Function],
                    "lookup": [Function],
                    "name": "sessionStorage",
                  },
                  "subdomain": Object {
                    "lookup": [Function],
                    "name": "subdomain",
                  },
                },
                "i18nOptions": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "options": Object {
                  "caches": Array [
                    "localStorage",
                  ],
                  "excludeCacheFor": Array [
                    "cimode",
                  ],
                  "lookupCookie": "i18next",
                  "lookupLocalStorage": "i18nextLng",
                  "lookupQuerystring": "lng",
                  "lookupSessionStorage": "i18nextLng",
                  "order": Array [
                    "querystring",
                    "cookie",
                    "localStorage",
                    "sessionStorage",
                    "navigator",
                    "htmlTag",
                  ],
                },
                "services": [Circular],
                "type": "languageDetector",
              },
              "languageUtils": LanguageUtil {
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::languageUtils:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::languageUtils:",
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "whitelist": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
              },
              "logger": Logger {
                "debug": true,
                "logger": Object {
                  "error": [Function],
                  "log": [Function],
                  "output": [Function],
                  "type": "logger",
                  "warn": [Function],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "i18next:",
              },
              "pluralResolver": PluralResolver {
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::pluralResolver:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::pluralResolver:",
                },
                "options": Object {
                  "compatibilityJSON": undefined,
                  "prepend": "_",
                  "simplifyPluralSuffix": true,
                },
                "rules": Object {
                  "ach": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "af": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ak": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "am": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "an": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ar": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                      3,
                      11,
                      100,
                    ],
                    "plurals": [Function],
                  },
                  "arn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ast": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ay": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "az": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "be": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "bg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "br": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ca": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "cgg": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "cnr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "csb": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cy": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      8,
                    ],
                    "plurals": [Function],
                  },
                  "da": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "de": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dev": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dz": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "el": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "en": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "es": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "et": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fa": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "fi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fil": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ga": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      7,
                      11,
                    ],
                    "plurals": [Function],
                  },
                  "gd": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "gl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gun": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ha": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "he": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "hi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ht": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "hu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ia": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "id": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "is": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "it": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "iw": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "ja": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jbo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jv": Object {
                    "numbers": Array [
                      0,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ka": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kk": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "km": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ko": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ku": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "kw": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      4,
                    ],
                    "plurals": [Function],
                  },
                  "ky": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ln": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "lo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lt": Object {
                    "numbers": Array [
                      1,
                      2,
                      10,
                    ],
                    "plurals": [Function],
                  },
                  "lv": Object {
                    "numbers": Array [
                      1,
                      2,
                      0,
                    ],
                    "plurals": [Function],
                  },
                  "mai": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mfe": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ml": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mnk": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ms": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "mt": Object {
                    "numbers": Array [
                      1,
                      2,
                      11,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "nah": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ne": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "no": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nso": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "oc": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "or": Object {
                    "numbers": Array [
                      2,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "pa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pl": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "pms": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ps": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-BR": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-PT": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "rm": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ro": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "ru": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sah": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sco": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "se": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "si": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sl": Object {
                    "numbers": Array [
                      5,
                      1,
                      2,
                      3,
                    ],
                    "plurals": [Function],
                  },
                  "so": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "son": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sq": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "su": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sv": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sw": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ta": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "te": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "th": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ti": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tt": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ug": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "uk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "uz": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "vi": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "wa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "wo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "yo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "zh": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                },
              },
              "resourceStore": Object {
                "de": Object {},
                "en": Object {},
                "fr": Object {},
                "ru": Object {},
                "uz": Object {},
              },
              "utils": Object {
                "hasLoadedNamespace": [Function],
              },
            },
            "store": Object {
              "de": Object {},
              "en": Object {},
              "fr": Object {},
              "ru": Object {},
              "uz": Object {},
            },
            "translator": Translator {
              "backendConnector": Connector {
                "backend": null,
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::backendConnector:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::backendConnector:",
                },
                "observers": Object {
                  "*": Array [
                    [Function],
                  ],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "queue": Array [],
                "services": Object {
                  "backendConnector": [Circular],
                  "interpolator": Interpolator {
                    "alwaysFormat": false,
                    "escape": [Function],
                    "escapeValue": false,
                    "format": [Function],
                    "formatSeparator": ",",
                    "logger": Logger {
                      "debug": true,
                      "logger": Object {
                        "error": [Function],
                        "log": [Function],
                        "output": [Function],
                        "type": "logger",
                        "warn": [Function],
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "prefix": "i18next::interpolator:",
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "prefix": "i18next::interpolator:",
                    },
                    "maxReplaces": 1000,
                    "nestingOptionsSeparator": ",",
                    "nestingPrefix": "\\\\$t\\\\(",
                    "nestingRegexp": /\\\\\\$t\\\\\\(\\(\\.\\+\\?\\)\\\\\\)/g,
                    "nestingSuffix": "\\\\)",
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "{{",
                    "regexp": /\\{\\{\\(\\.\\+\\?\\)\\}\\}/g,
                    "regexpUnescape": /\\{\\{-\\(\\.\\+\\?\\)\\}\\}/g,
                    "suffix": "}}",
                    "unescapePrefix": "-",
                    "unescapeSuffix": "",
                    "useRawValueToEscape": false,
                  },
                  "languageDetector": Browser {
                    "detectors": Object {
                      "cookie": Object {
                        "cacheUserLanguage": [Function],
                        "lookup": [Function],
                        "name": "cookie",
                      },
                      "htmlTag": Object {
                        "lookup": [Function],
                        "name": "htmlTag",
                      },
                      "localStorage": Object {
                        "cacheUserLanguage": [Function],
                        "lookup": [Function],
                        "name": "localStorage",
                      },
                      "navigator": Object {
                        "lookup": [Function],
                        "name": "navigator",
                      },
                      "path": Object {
                        "lookup": [Function],
                        "name": "path",
                      },
                      "querystring": Object {
                        "lookup": [Function],
                        "name": "querystring",
                      },
                      "sessionStorage": Object {
                        "cacheUserLanguage": [Function],
                        "lookup": [Function],
                        "name": "sessionStorage",
                      },
                      "subdomain": Object {
                        "lookup": [Function],
                        "name": "subdomain",
                      },
                    },
                    "i18nOptions": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "options": Object {
                      "caches": Array [
                        "localStorage",
                      ],
                      "excludeCacheFor": Array [
                        "cimode",
                      ],
                      "lookupCookie": "i18next",
                      "lookupLocalStorage": "i18nextLng",
                      "lookupQuerystring": "lng",
                      "lookupSessionStorage": "i18nextLng",
                      "order": Array [
                        "querystring",
                        "cookie",
                        "localStorage",
                        "sessionStorage",
                        "navigator",
                        "htmlTag",
                      ],
                    },
                    "services": [Circular],
                    "type": "languageDetector",
                  },
                  "languageUtils": LanguageUtil {
                    "logger": Logger {
                      "debug": true,
                      "logger": Object {
                        "error": [Function],
                        "log": [Function],
                        "output": [Function],
                        "type": "logger",
                        "warn": [Function],
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "prefix": "i18next::languageUtils:",
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "prefix": "i18next::languageUtils:",
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "whitelist": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                  },
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next:",
                  },
                  "pluralResolver": PluralResolver {
                    "languageUtils": LanguageUtil {
                      "logger": Logger {
                        "debug": true,
                        "logger": Object {
                          "error": [Function],
                          "log": [Function],
                          "output": [Function],
                          "type": "logger",
                          "warn": [Function],
                        },
                        "options": Object {
                          "appendNamespaceToCIMode": false,
                          "appendNamespaceToMissingKey": false,
                          "contextSeparator": "_",
                          "debug": true,
                          "defaultNS": "translation",
                          "fallbackLng": Array [
                            "en",
                          ],
                          "fallbackNS": false,
                          "initImmediate": false,
                          "interpolation": Object {
                            "escapeValue": false,
                          },
                          "joinArrays": false,
                          "keySeparator": ".",
                          "load": "all",
                          "missingInterpolationHandler": false,
                          "missingKeyHandler": false,
                          "nonExplicitSupportedLngs": true,
                          "nonExplicitWhitelist": false,
                          "ns": Array [],
                          "nsSeparator": ":",
                          "overloadTranslationOptionHandler": [Function],
                          "parseMissingKeyHandler": false,
                          "partialBundledLanguages": false,
                          "pluralSeparator": "_",
                          "postProcess": false,
                          "postProcessPassResolved": false,
                          "prefix": "i18next::languageUtils:",
                          "preload": false,
                          "resources": Object {
                            "de": Object {},
                            "en": Object {},
                            "fr": Object {},
                            "ru": Object {},
                            "uz": Object {},
                          },
                          "returnEmptyString": true,
                          "returnNull": true,
                          "returnObjects": false,
                          "returnedObjectHandler": false,
                          "saveMissing": false,
                          "saveMissingPlurals": true,
                          "saveMissingTo": "fallback",
                          "simplifyPluralSuffix": true,
                          "supportedLngs": Array [
                            "de",
                            "en",
                            "fr",
                            "ru",
                            "uz",
                            "cimode",
                          ],
                          "updateMissing": false,
                          "whitelist": false,
                        },
                        "prefix": "i18next::languageUtils:",
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "whitelist": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                    },
                    "logger": Logger {
                      "debug": true,
                      "logger": Object {
                        "error": [Function],
                        "log": [Function],
                        "output": [Function],
                        "type": "logger",
                        "warn": [Function],
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "prefix": "i18next::pluralResolver:",
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "prefix": "i18next::pluralResolver:",
                    },
                    "options": Object {
                      "compatibilityJSON": undefined,
                      "prepend": "_",
                      "simplifyPluralSuffix": true,
                    },
                    "rules": Object {
                      "ach": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "af": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ak": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "am": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "an": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ar": Object {
                        "numbers": Array [
                          0,
                          1,
                          2,
                          3,
                          11,
                          100,
                        ],
                        "plurals": [Function],
                      },
                      "arn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ast": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ay": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "az": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "be": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "bg": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "bn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "bo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "br": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "bs": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "ca": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "cgg": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "cnr": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "cs": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "csb": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "cy": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          8,
                        ],
                        "plurals": [Function],
                      },
                      "da": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "de": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "dev": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "dz": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "el": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "en": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "eo": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "es": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "et": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "eu": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fa": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "fi": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fil": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fo": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fr": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fur": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fy": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ga": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          7,
                          11,
                        ],
                        "plurals": [Function],
                      },
                      "gd": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          20,
                        ],
                        "plurals": [Function],
                      },
                      "gl": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "gu": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "gun": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ha": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "he": Object {
                        "numbers": Array [
                          1,
                          2,
                          20,
                          21,
                        ],
                        "plurals": [Function],
                      },
                      "hi": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "hr": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "ht": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "hu": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "hy": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ia": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "id": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "is": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "it": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "iw": Object {
                        "numbers": Array [
                          1,
                          2,
                          20,
                          21,
                        ],
                        "plurals": [Function],
                      },
                      "ja": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "jbo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "jv": Object {
                        "numbers": Array [
                          0,
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ka": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "kk": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "km": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "kn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ko": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ku": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "kw": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          4,
                        ],
                        "plurals": [Function],
                      },
                      "ky": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "lb": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ln": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "lo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "lt": Object {
                        "numbers": Array [
                          1,
                          2,
                          10,
                        ],
                        "plurals": [Function],
                      },
                      "lv": Object {
                        "numbers": Array [
                          1,
                          2,
                          0,
                        ],
                        "plurals": [Function],
                      },
                      "mai": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mfe": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mg": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mi": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mk": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ml": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mnk": Object {
                        "numbers": Array [
                          0,
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mr": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ms": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "mt": Object {
                        "numbers": Array [
                          1,
                          2,
                          11,
                          20,
                        ],
                        "plurals": [Function],
                      },
                      "nah": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nap": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nb": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ne": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nl": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "no": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nso": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "oc": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "or": Object {
                        "numbers": Array [
                          2,
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "pa": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pap": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pl": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "pms": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ps": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pt": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pt-BR": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pt-PT": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "rm": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ro": Object {
                        "numbers": Array [
                          1,
                          2,
                          20,
                        ],
                        "plurals": [Function],
                      },
                      "ru": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "sah": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "sco": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "se": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "si": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sk": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "sl": Object {
                        "numbers": Array [
                          5,
                          1,
                          2,
                          3,
                        ],
                        "plurals": [Function],
                      },
                      "so": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "son": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sq": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sr": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "su": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "sv": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sw": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ta": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "te": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tg": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "th": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ti": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tk": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tr": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tt": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ug": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "uk": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "ur": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "uz": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "vi": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "wa": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "wo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "yo": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "zh": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                    },
                  },
                  "resourceStore": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "utils": Object {
                    "hasLoadedNamespace": [Function],
                  },
                },
                "state": Object {},
                "store": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
              },
              "interpolator": Interpolator {
                "alwaysFormat": false,
                "escape": [Function],
                "escapeValue": false,
                "format": [Function],
                "formatSeparator": ",",
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::interpolator:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::interpolator:",
                },
                "maxReplaces": 1000,
                "nestingOptionsSeparator": ",",
                "nestingPrefix": "\\\\$t\\\\(",
                "nestingRegexp": /\\\\\\$t\\\\\\(\\(\\.\\+\\?\\)\\\\\\)/g,
                "nestingSuffix": "\\\\)",
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "{{",
                "regexp": /\\{\\{\\(\\.\\+\\?\\)\\}\\}/g,
                "regexpUnescape": /\\{\\{-\\(\\.\\+\\?\\)\\}\\}/g,
                "suffix": "}}",
                "unescapePrefix": "-",
                "unescapeSuffix": "",
                "useRawValueToEscape": false,
              },
              "language": "en",
              "languageUtils": LanguageUtil {
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::languageUtils:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::languageUtils:",
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "whitelist": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
              },
              "logger": Logger {
                "debug": true,
                "logger": Object {
                  "error": [Function],
                  "log": [Function],
                  "output": [Function],
                  "type": "logger",
                  "warn": [Function],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "prefix": "i18next::translator:",
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "i18next::translator:",
              },
              "observers": Object {
                "*": Array [
                  [Function],
                ],
              },
              "options": Object {
                "appendNamespaceToCIMode": false,
                "appendNamespaceToMissingKey": false,
                "contextSeparator": "_",
                "debug": true,
                "defaultNS": "translation",
                "fallbackLng": Array [
                  "en",
                ],
                "fallbackNS": false,
                "initImmediate": false,
                "interpolation": Object {
                  "escapeValue": false,
                },
                "joinArrays": false,
                "keySeparator": ".",
                "load": "all",
                "missingInterpolationHandler": false,
                "missingKeyHandler": false,
                "nonExplicitSupportedLngs": true,
                "nonExplicitWhitelist": false,
                "ns": Array [],
                "nsSeparator": ":",
                "overloadTranslationOptionHandler": [Function],
                "parseMissingKeyHandler": false,
                "partialBundledLanguages": false,
                "pluralSeparator": "_",
                "postProcess": false,
                "postProcessPassResolved": false,
                "preload": false,
                "resources": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
                "returnEmptyString": true,
                "returnNull": true,
                "returnObjects": false,
                "returnedObjectHandler": false,
                "saveMissing": false,
                "saveMissingPlurals": true,
                "saveMissingTo": "fallback",
                "simplifyPluralSuffix": true,
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "updateMissing": false,
                "whitelist": false,
              },
              "pluralResolver": PluralResolver {
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::pluralResolver:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::pluralResolver:",
                },
                "options": Object {
                  "compatibilityJSON": undefined,
                  "prepend": "_",
                  "simplifyPluralSuffix": true,
                },
                "rules": Object {
                  "ach": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "af": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ak": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "am": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "an": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ar": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                      3,
                      11,
                      100,
                    ],
                    "plurals": [Function],
                  },
                  "arn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ast": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ay": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "az": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "be": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "bg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "br": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ca": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "cgg": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "cnr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "csb": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cy": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      8,
                    ],
                    "plurals": [Function],
                  },
                  "da": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "de": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dev": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dz": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "el": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "en": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "es": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "et": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fa": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "fi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fil": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ga": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      7,
                      11,
                    ],
                    "plurals": [Function],
                  },
                  "gd": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "gl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gun": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ha": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "he": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "hi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ht": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "hu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ia": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "id": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "is": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "it": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "iw": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "ja": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jbo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jv": Object {
                    "numbers": Array [
                      0,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ka": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kk": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "km": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ko": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ku": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "kw": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      4,
                    ],
                    "plurals": [Function],
                  },
                  "ky": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ln": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "lo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lt": Object {
                    "numbers": Array [
                      1,
                      2,
                      10,
                    ],
                    "plurals": [Function],
                  },
                  "lv": Object {
                    "numbers": Array [
                      1,
                      2,
                      0,
                    ],
                    "plurals": [Function],
                  },
                  "mai": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mfe": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ml": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mnk": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ms": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "mt": Object {
                    "numbers": Array [
                      1,
                      2,
                      11,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "nah": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ne": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "no": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nso": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "oc": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "or": Object {
                    "numbers": Array [
                      2,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "pa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pl": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "pms": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ps": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-BR": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-PT": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "rm": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ro": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "ru": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sah": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sco": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "se": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "si": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sl": Object {
                    "numbers": Array [
                      5,
                      1,
                      2,
                      3,
                    ],
                    "plurals": [Function],
                  },
                  "so": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "son": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sq": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "su": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sv": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sw": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ta": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "te": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "th": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ti": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tt": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ug": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "uk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "uz": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "vi": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "wa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "wo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "yo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "zh": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                },
              },
              "resourceStore": Object {
                "de": Object {},
                "en": Object {},
                "fr": Object {},
                "ru": Object {},
                "uz": Object {},
              },
              "utils": Object {
                "hasLoadedNamespace": [Function],
              },
            },
          }
        }
        key="en"
      >
        <Memo(MuiPickerUtils)>
          <MuiPickersUtilsProvider
            libInstance={[Function]}
            locale="en"
            utils={[Function]}
          >
            <Memo(ThemeProvider)
              defaultTheme={[Function]}
            >
              <ThemeProvider
                theme={
                  Object {
                    "breakpoints": Object {
                      "between": [Function],
                      "down": [Function],
                      "keys": Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ],
                      "only": [Function],
                      "up": [Function],
                      "values": Object {
                        "lg": 1280,
                        "md": 960,
                        "sm": 600,
                        "xl": 1920,
                        "xs": 0,
                      },
                      "width": [Function],
                    },
                    "direction": "ltr",
                    "mixins": Object {
                      "gutters": [Function],
                      "toolbar": Object {
                        "@media (min-width:0px) and (orientation: landscape)": Object {
                          "minHeight": 48,
                        },
                        "@media (min-width:600px)": Object {
                          "minHeight": 64,
                        },
                        "minHeight": 56,
                      },
                    },
                    "overrides": Object {},
                    "palette": Object {
                      "action": Object {
                        "activatedOpacity": 0.12,
                        "active": "rgba(0, 0, 0, 0.54)",
                        "disabled": "rgba(0, 0, 0, 0.26)",
                        "disabledBackground": "rgba(0, 0, 0, 0.12)",
                        "disabledOpacity": 0.38,
                        "focus": "rgba(0, 0, 0, 0.12)",
                        "focusOpacity": 0.12,
                        "hover": "rgba(0, 0, 0, 0.04)",
                        "hoverOpacity": 0.04,
                        "selected": "rgba(0, 0, 0, 0.08)",
                        "selectedOpacity": 0.08,
                      },
                      "augmentColor": [Function],
                      "background": Object {
                        "default": "#fafafa",
                        "paper": "#fff",
                      },
                      "common": Object {
                        "black": "#000",
                        "white": "#fff",
                      },
                      "contrastThreshold": 3,
                      "divider": "rgba(0, 0, 0, 0.12)",
                      "error": Object {
                        "contrastText": "#fff",
                        "dark": "#d32f2f",
                        "light": "#e57373",
                        "main": "#f44336",
                      },
                      "getContrastText": [Function],
                      "grey": Object {
                        "100": "#f5f5f5",
                        "200": "#eeeeee",
                        "300": "#e0e0e0",
                        "400": "#bdbdbd",
                        "50": "#fafafa",
                        "500": "#9e9e9e",
                        "600": "#757575",
                        "700": "#616161",
                        "800": "#424242",
                        "900": "#212121",
                        "A100": "#d5d5d5",
                        "A200": "#aaaaaa",
                        "A400": "#303030",
                        "A700": "#616161",
                      },
                      "info": Object {
                        "contrastText": "#fff",
                        "dark": "#1976d2",
                        "light": "#64b5f6",
                        "main": "#2196f3",
                      },
                      "primary": Object {
                        "contrastText": "#fff",
                        "dark": "rgb(44, 56, 126)",
                        "light": "rgb(101, 115, 195)",
                        "main": "#3f51b5",
                      },
                      "secondary": Object {
                        "contrastText": "#fff",
                        "dark": "rgb(171, 0, 60)",
                        "light": "rgb(247, 51, 120)",
                        "main": "#f50057",
                      },
                      "success": Object {
                        "contrastText": "rgba(0, 0, 0, 0.87)",
                        "dark": "#388e3c",
                        "light": "#81c784",
                        "main": "#4caf50",
                      },
                      "text": Object {
                        "disabled": "rgba(0, 0, 0, 0.38)",
                        "hint": "rgba(0, 0, 0, 0.38)",
                        "primary": "rgba(0, 0, 0, 0.87)",
                        "secondary": "rgba(0, 0, 0, 0.54)",
                      },
                      "tonalOffset": 0.2,
                      "type": "light",
                      "warning": Object {
                        "contrastText": "rgba(0, 0, 0, 0.87)",
                        "dark": "#f57c00",
                        "light": "#ffb74d",
                        "main": "#ff9800",
                      },
                    },
                    "props": Object {},
                    "shadows": Array [
                      "none",
                      "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                      "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                      "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                      "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                      "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                      "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                      "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                      "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                      "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                      "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                      "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                      "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                      "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                      "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                      "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                      "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                      "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                      "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                      "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                      "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                      "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                      "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                      "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                      "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                    ],
                    "shape": Object {
                      "borderRadius": 4,
                    },
                    "spacing": [Function],
                    "transitions": Object {
                      "create": [Function],
                      "duration": Object {
                        "complex": 375,
                        "enteringScreen": 225,
                        "leavingScreen": 195,
                        "short": 250,
                        "shorter": 200,
                        "shortest": 150,
                        "standard": 300,
                      },
                      "easing": Object {
                        "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                        "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                        "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                        "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                      },
                      "getAutoHeightDuration": [Function],
                    },
                    "typography": Object {
                      "body1": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.00938em",
                        "lineHeight": 1.5,
                      },
                      "body2": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.875rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.01071em",
                        "lineHeight": 1.43,
                      },
                      "button": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.875rem",
                        "fontWeight": 500,
                        "letterSpacing": "0.02857em",
                        "lineHeight": 1.75,
                        "textTransform": "uppercase",
                      },
                      "caption": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.75rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.03333em",
                        "lineHeight": 1.66,
                      },
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": 14,
                      "fontWeightBold": 700,
                      "fontWeightLight": 300,
                      "fontWeightMedium": 500,
                      "fontWeightRegular": 400,
                      "h1": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "6rem",
                        "fontWeight": 300,
                        "letterSpacing": "-0.01562em",
                        "lineHeight": 1.167,
                      },
                      "h2": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "3.75rem",
                        "fontWeight": 300,
                        "letterSpacing": "-0.00833em",
                        "lineHeight": 1.2,
                      },
                      "h3": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "3rem",
                        "fontWeight": 400,
                        "letterSpacing": "0em",
                        "lineHeight": 1.167,
                      },
                      "h4": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "2.125rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.00735em",
                        "lineHeight": 1.235,
                      },
                      "h5": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1.5rem",
                        "fontWeight": 400,
                        "letterSpacing": "0em",
                        "lineHeight": 1.334,
                      },
                      "h6": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1.25rem",
                        "fontWeight": 500,
                        "letterSpacing": "0.0075em",
                        "lineHeight": 1.6,
                      },
                      "htmlFontSize": 16,
                      "overline": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.75rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.08333em",
                        "lineHeight": 2.66,
                        "textTransform": "uppercase",
                      },
                      "pxToRem": [Function],
                      "round": [Function],
                      "subtitle1": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.00938em",
                        "lineHeight": 1.75,
                      },
                      "subtitle2": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.875rem",
                        "fontWeight": 500,
                        "letterSpacing": "0.00714em",
                        "lineHeight": 1.57,
                      },
                    },
                    "zIndex": Object {
                      "appBar": 1100,
                      "drawer": 1200,
                      "mobileStepper": 1000,
                      "modal": 1300,
                      "snackbar": 1400,
                      "speedDial": 1050,
                      "tooltip": 1500,
                    },
                    Symbol(mui.nested): false,
                  }
                }
              >
                <WithStyles(CssBaseline)>
                  <CssBaseline
                    classes={Object {}}
                  />
                </WithStyles(CssBaseline)>
                <QueryClientProvider
                  client={
                    QueryClient {
                      "defaultOptions": Object {},
                      "mutationCache": MutationCache {
                        "config": Object {},
                        "listeners": Array [],
                        "mutationId": 0,
                        "mutations": Array [],
                      },
                      "mutationDefaults": Array [],
                      "queryCache": QueryCache {
                        "config": Object {},
                        "listeners": Array [],
                        "queries": Array [],
                        "queriesMap": Object {},
                      },
                      "queryDefaults": Array [],
                      "unsubscribeFocus": [Function],
                      "unsubscribeOnline": [Function],
                    }
                  }
                >
                  <Memo(PermissionContextProvider)>
                    <Router
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "createHref": [Function],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                    >
                      <Memo(DialogContextProvider)>
                        <ThemeSelector>
                          <AdvThemeSelector>
                            <LanguageSelector />
                            <StylesProvider
                              generateClassName={[Function]}
                            >
                              <Component>
                                <Memo(MultiSelectWithTags)
                                  autocompleteId="multi-select-with-tags"
                                  disabled={false}
                                  displaySwitch={false}
                                  enableIcons={false}
                                  loadDataOptions={[Function]}
                                  loadGroupEntries={[Function]}
                                  loadGroupOptions={[Function]}
                                  loadingText="Loading.."
                                  onChange={[Function]}
                                  openInfo={[Function]}
                                  searchInputLabel="or search for a single item"
                                  selected={Array []}
                                  switchLabel="Select from all"
                                  title="Select a group"
                                >
                                  <div>
                                    <WithStyles(ForwardRef(Typography))
                                      color="textSecondary"
                                      component="label"
                                      variant="caption"
                                    >
                                      <ForwardRef(Typography)
                                        classes={
                                          Object {
                                            "alignCenter": "standalone-selector--selector-multi-with-tags-MuiTypography-alignCenter",
                                            "alignJustify": "standalone-selector--selector-multi-with-tags-MuiTypography-alignJustify",
                                            "alignLeft": "standalone-selector--selector-multi-with-tags-MuiTypography-alignLeft",
                                            "alignRight": "standalone-selector--selector-multi-with-tags-MuiTypography-alignRight",
                                            "body1": "standalone-selector--selector-multi-with-tags-MuiTypography-body1",
                                            "body2": "standalone-selector--selector-multi-with-tags-MuiTypography-body2",
                                            "button": "standalone-selector--selector-multi-with-tags-MuiTypography-button",
                                            "caption": "standalone-selector--selector-multi-with-tags-MuiTypography-caption",
                                            "colorError": "standalone-selector--selector-multi-with-tags-MuiTypography-colorError",
                                            "colorInherit": "standalone-selector--selector-multi-with-tags-MuiTypography-colorInherit",
                                            "colorPrimary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorPrimary",
                                            "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorSecondary",
                                            "colorTextPrimary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorTextPrimary",
                                            "colorTextSecondary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorTextSecondary",
                                            "displayBlock": "standalone-selector--selector-multi-with-tags-MuiTypography-displayBlock",
                                            "displayInline": "standalone-selector--selector-multi-with-tags-MuiTypography-displayInline",
                                            "gutterBottom": "standalone-selector--selector-multi-with-tags-MuiTypography-gutterBottom",
                                            "h1": "standalone-selector--selector-multi-with-tags-MuiTypography-h1",
                                            "h2": "standalone-selector--selector-multi-with-tags-MuiTypography-h2",
                                            "h3": "standalone-selector--selector-multi-with-tags-MuiTypography-h3",
                                            "h4": "standalone-selector--selector-multi-with-tags-MuiTypography-h4",
                                            "h5": "standalone-selector--selector-multi-with-tags-MuiTypography-h5",
                                            "h6": "standalone-selector--selector-multi-with-tags-MuiTypography-h6",
                                            "noWrap": "standalone-selector--selector-multi-with-tags-MuiTypography-noWrap",
                                            "overline": "standalone-selector--selector-multi-with-tags-MuiTypography-overline",
                                            "paragraph": "standalone-selector--selector-multi-with-tags-MuiTypography-paragraph",
                                            "root": "standalone-selector--selector-multi-with-tags-MuiTypography-root",
                                            "srOnly": "standalone-selector--selector-multi-with-tags-MuiTypography-srOnly",
                                            "subtitle1": "standalone-selector--selector-multi-with-tags-MuiTypography-subtitle1",
                                            "subtitle2": "standalone-selector--selector-multi-with-tags-MuiTypography-subtitle2",
                                          }
                                        }
                                        color="textSecondary"
                                        component="label"
                                        variant="caption"
                                      >
                                        <label
                                          className="standalone-selector--selector-multi-with-tags-MuiTypography-root standalone-selector--selector-multi-with-tags-MuiTypography-caption standalone-selector--selector-multi-with-tags-MuiTypography-colorTextSecondary"
                                        >
                                          Select a group
                                        </label>
                                      </ForwardRef(Typography)>
                                    </WithStyles(ForwardRef(Typography))>
                                    <Memo(SingleSelect)
                                      autocompleteId="multi-select-with-tags-group-select"
                                      disabled={false}
                                      enableIcons={false}
                                      loadingText="Loading.."
                                      onLoad={[Function]}
                                      onSelect={[Function]}
                                      refreshToken="0"
                                      selected={null}
                                    >
                                      <Memo(BaseSelector)
                                        autocompleteId="multi-select-with-tags-group-select"
                                        disabled={false}
                                        enableIcons={false}
                                        loadingText="Loading.."
                                        onLoad={[Function]}
                                        onSelect={[Function]}
                                        refreshToken="0"
                                        selected={null}
                                      >
                                        <Memo(InlineSwitch)
                                          displaySwitch={false}
                                          setSwitchValue={[Function]}
                                          switchValue={false}
                                        >
                                          <WithStyles(ForwardRef(Typography))
                                            className="standalone-selector--selector-multi-with-tags-InlineSwitch-labelWithSwitch-33"
                                            component="div"
                                          >
                                            <ForwardRef(Typography)
                                              className="standalone-selector--selector-multi-with-tags-InlineSwitch-labelWithSwitch-33"
                                              classes={
                                                Object {
                                                  "alignCenter": "standalone-selector--selector-multi-with-tags-MuiTypography-alignCenter",
                                                  "alignJustify": "standalone-selector--selector-multi-with-tags-MuiTypography-alignJustify",
                                                  "alignLeft": "standalone-selector--selector-multi-with-tags-MuiTypography-alignLeft",
                                                  "alignRight": "standalone-selector--selector-multi-with-tags-MuiTypography-alignRight",
                                                  "body1": "standalone-selector--selector-multi-with-tags-MuiTypography-body1",
                                                  "body2": "standalone-selector--selector-multi-with-tags-MuiTypography-body2",
                                                  "button": "standalone-selector--selector-multi-with-tags-MuiTypography-button",
                                                  "caption": "standalone-selector--selector-multi-with-tags-MuiTypography-caption",
                                                  "colorError": "standalone-selector--selector-multi-with-tags-MuiTypography-colorError",
                                                  "colorInherit": "standalone-selector--selector-multi-with-tags-MuiTypography-colorInherit",
                                                  "colorPrimary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorPrimary",
                                                  "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorSecondary",
                                                  "colorTextPrimary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorTextPrimary",
                                                  "colorTextSecondary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorTextSecondary",
                                                  "displayBlock": "standalone-selector--selector-multi-with-tags-MuiTypography-displayBlock",
                                                  "displayInline": "standalone-selector--selector-multi-with-tags-MuiTypography-displayInline",
                                                  "gutterBottom": "standalone-selector--selector-multi-with-tags-MuiTypography-gutterBottom",
                                                  "h1": "standalone-selector--selector-multi-with-tags-MuiTypography-h1",
                                                  "h2": "standalone-selector--selector-multi-with-tags-MuiTypography-h2",
                                                  "h3": "standalone-selector--selector-multi-with-tags-MuiTypography-h3",
                                                  "h4": "standalone-selector--selector-multi-with-tags-MuiTypography-h4",
                                                  "h5": "standalone-selector--selector-multi-with-tags-MuiTypography-h5",
                                                  "h6": "standalone-selector--selector-multi-with-tags-MuiTypography-h6",
                                                  "noWrap": "standalone-selector--selector-multi-with-tags-MuiTypography-noWrap",
                                                  "overline": "standalone-selector--selector-multi-with-tags-MuiTypography-overline",
                                                  "paragraph": "standalone-selector--selector-multi-with-tags-MuiTypography-paragraph",
                                                  "root": "standalone-selector--selector-multi-with-tags-MuiTypography-root",
                                                  "srOnly": "standalone-selector--selector-multi-with-tags-MuiTypography-srOnly",
                                                  "subtitle1": "standalone-selector--selector-multi-with-tags-MuiTypography-subtitle1",
                                                  "subtitle2": "standalone-selector--selector-multi-with-tags-MuiTypography-subtitle2",
                                                }
                                              }
                                              component="div"
                                            >
                                              <div
                                                className="standalone-selector--selector-multi-with-tags-MuiTypography-root standalone-selector--selector-multi-with-tags-InlineSwitch-labelWithSwitch-33 standalone-selector--selector-multi-with-tags-MuiTypography-body1"
                                              >
                                                <WithStyles(ForwardRef(Typography))
                                                  component="div"
                                                >
                                                  <ForwardRef(Typography)
                                                    classes={
                                                      Object {
                                                        "alignCenter": "standalone-selector--selector-multi-with-tags-MuiTypography-alignCenter",
                                                        "alignJustify": "standalone-selector--selector-multi-with-tags-MuiTypography-alignJustify",
                                                        "alignLeft": "standalone-selector--selector-multi-with-tags-MuiTypography-alignLeft",
                                                        "alignRight": "standalone-selector--selector-multi-with-tags-MuiTypography-alignRight",
                                                        "body1": "standalone-selector--selector-multi-with-tags-MuiTypography-body1",
                                                        "body2": "standalone-selector--selector-multi-with-tags-MuiTypography-body2",
                                                        "button": "standalone-selector--selector-multi-with-tags-MuiTypography-button",
                                                        "caption": "standalone-selector--selector-multi-with-tags-MuiTypography-caption",
                                                        "colorError": "standalone-selector--selector-multi-with-tags-MuiTypography-colorError",
                                                        "colorInherit": "standalone-selector--selector-multi-with-tags-MuiTypography-colorInherit",
                                                        "colorPrimary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorPrimary",
                                                        "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorSecondary",
                                                        "colorTextPrimary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorTextPrimary",
                                                        "colorTextSecondary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorTextSecondary",
                                                        "displayBlock": "standalone-selector--selector-multi-with-tags-MuiTypography-displayBlock",
                                                        "displayInline": "standalone-selector--selector-multi-with-tags-MuiTypography-displayInline",
                                                        "gutterBottom": "standalone-selector--selector-multi-with-tags-MuiTypography-gutterBottom",
                                                        "h1": "standalone-selector--selector-multi-with-tags-MuiTypography-h1",
                                                        "h2": "standalone-selector--selector-multi-with-tags-MuiTypography-h2",
                                                        "h3": "standalone-selector--selector-multi-with-tags-MuiTypography-h3",
                                                        "h4": "standalone-selector--selector-multi-with-tags-MuiTypography-h4",
                                                        "h5": "standalone-selector--selector-multi-with-tags-MuiTypography-h5",
                                                        "h6": "standalone-selector--selector-multi-with-tags-MuiTypography-h6",
                                                        "noWrap": "standalone-selector--selector-multi-with-tags-MuiTypography-noWrap",
                                                        "overline": "standalone-selector--selector-multi-with-tags-MuiTypography-overline",
                                                        "paragraph": "standalone-selector--selector-multi-with-tags-MuiTypography-paragraph",
                                                        "root": "standalone-selector--selector-multi-with-tags-MuiTypography-root",
                                                        "srOnly": "standalone-selector--selector-multi-with-tags-MuiTypography-srOnly",
                                                        "subtitle1": "standalone-selector--selector-multi-with-tags-MuiTypography-subtitle1",
                                                        "subtitle2": "standalone-selector--selector-multi-with-tags-MuiTypography-subtitle2",
                                                      }
                                                    }
                                                    component="div"
                                                  >
                                                    <div
                                                      className="standalone-selector--selector-multi-with-tags-MuiTypography-root standalone-selector--selector-multi-with-tags-MuiTypography-body1"
                                                    >
                                                      <WithStyles(ForwardRef(Paper))
                                                        className="standalone-selector--selector-multi-with-tags-CcBaseSelectorCustom-wrapper-29 standalone-selector--selector-multi-with-tags-CcBaseSelectorCustom-wrapper-31"
                                                        elevation={0}
                                                      >
                                                        <ForwardRef(Paper)
                                                          className="standalone-selector--selector-multi-with-tags-CcBaseSelectorCustom-wrapper-29 standalone-selector--selector-multi-with-tags-CcBaseSelectorCustom-wrapper-31"
                                                          classes={
                                                            Object {
                                                              "elevation0": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation0",
                                                              "elevation1": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation1",
                                                              "elevation10": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation10",
                                                              "elevation11": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation11",
                                                              "elevation12": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation12",
                                                              "elevation13": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation13",
                                                              "elevation14": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation14",
                                                              "elevation15": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation15",
                                                              "elevation16": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation16",
                                                              "elevation17": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation17",
                                                              "elevation18": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation18",
                                                              "elevation19": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation19",
                                                              "elevation2": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation2",
                                                              "elevation20": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation20",
                                                              "elevation21": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation21",
                                                              "elevation22": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation22",
                                                              "elevation23": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation23",
                                                              "elevation24": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation24",
                                                              "elevation3": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation3",
                                                              "elevation4": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation4",
                                                              "elevation5": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation5",
                                                              "elevation6": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation6",
                                                              "elevation7": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation7",
                                                              "elevation8": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation8",
                                                              "elevation9": "standalone-selector--selector-multi-with-tags-MuiPaper-elevation9",
                                                              "outlined": "standalone-selector--selector-multi-with-tags-MuiPaper-outlined",
                                                              "root": "standalone-selector--selector-multi-with-tags-MuiPaper-root",
                                                              "rounded": "standalone-selector--selector-multi-with-tags-MuiPaper-rounded",
                                                            }
                                                          }
                                                          elevation={0}
                                                        >
                                                          <div
                                                            className="standalone-selector--selector-multi-with-tags-MuiPaper-root standalone-selector--selector-multi-with-tags-CcBaseSelectorCustom-wrapper-29 standalone-selector--selector-multi-with-tags-CcBaseSelectorCustom-wrapper-31 standalone-selector--selector-multi-with-tags-MuiPaper-elevation0 standalone-selector--selector-multi-with-tags-MuiPaper-rounded"
                                                          >
                                                            <WithStyles(ForwardRef(Autocomplete))
                                                              autoComplete={true}
                                                              blurOnSelect={true}
                                                              classes={Object {}}
                                                              closeText="standalone.selector.base-selector.close-icon-text"
                                                              disabled={false}
                                                              filterOptions={[Function]}
                                                              getOptionDisabled={[Function]}
                                                              getOptionLabel={[Function]}
                                                              getOptionSelected={[Function]}
                                                              id="multi-select-with-tags-group-select"
                                                              inputValue=""
                                                              key="0 no-add-new"
                                                              loading={true}
                                                              loadingText="Loading.."
                                                              noOptionsText="standalone.selector.base-selector.no-options-text"
                                                              onChange={[Function]}
                                                              onClose={[Function]}
                                                              onInputChange={[Function]}
                                                              onOpen={[Function]}
                                                              open={false}
                                                              openText="standalone.selector.base-selector.open-icon-text"
                                                              options={Array []}
                                                              popupIcon={<Memo />}
                                                              renderInput={[Function]}
                                                              renderOption={[Function]}
                                                              selectOnFocus={true}
                                                              value={null}
                                                            >
                                                              <ForwardRef(Autocomplete)
                                                                autoComplete={true}
                                                                blurOnSelect={true}
                                                                classes={
                                                                  Object {
                                                                    "clearIndicator": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-clearIndicator",
                                                                    "clearIndicatorDirty": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-clearIndicatorDirty",
                                                                    "endAdornment": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-endAdornment",
                                                                    "focused": "Mui-focused",
                                                                    "fullWidth": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-fullWidth",
                                                                    "groupLabel": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-groupLabel",
                                                                    "groupUl": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-groupUl",
                                                                    "hasClearIcon": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-hasClearIcon",
                                                                    "hasPopupIcon": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-hasPopupIcon",
                                                                    "input": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-input",
                                                                    "inputFocused": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused",
                                                                    "inputRoot": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputRoot",
                                                                    "listbox": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-listbox",
                                                                    "loading": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-loading",
                                                                    "noOptions": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-noOptions",
                                                                    "option": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-option",
                                                                    "paper": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-paper",
                                                                    "popper": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-popper",
                                                                    "popperDisablePortal": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-popperDisablePortal",
                                                                    "popupIndicator": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-popupIndicator",
                                                                    "popupIndicatorOpen": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-popupIndicatorOpen",
                                                                    "root": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-root",
                                                                    "tag": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-tag",
                                                                    "tagSizeSmall": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-tagSizeSmall",
                                                                  }
                                                                }
                                                                closeText="standalone.selector.base-selector.close-icon-text"
                                                                disabled={false}
                                                                filterOptions={[Function]}
                                                                getOptionDisabled={[Function]}
                                                                getOptionLabel={[Function]}
                                                                getOptionSelected={[Function]}
                                                                id="multi-select-with-tags-group-select"
                                                                inputValue=""
                                                                loading={true}
                                                                loadingText="Loading.."
                                                                noOptionsText="standalone.selector.base-selector.no-options-text"
                                                                onChange={[Function]}
                                                                onClose={[Function]}
                                                                onInputChange={[Function]}
                                                                onOpen={[Function]}
                                                                open={false}
                                                                openText="standalone.selector.base-selector.open-icon-text"
                                                                options={Array []}
                                                                popupIcon={<Memo />}
                                                                renderInput={[Function]}
                                                                renderOption={[Function]}
                                                                selectOnFocus={true}
                                                                value={null}
                                                              >
                                                                <div
                                                                  aria-expanded={false}
                                                                  aria-owns={null}
                                                                  className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-root standalone-selector--selector-multi-with-tags-MuiAutocomplete-hasClearIcon standalone-selector--selector-multi-with-tags-MuiAutocomplete-hasPopupIcon"
                                                                  onClick={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  onMouseDown={[Function]}
                                                                  role="combobox"
                                                                >
                                                                  <ForwardRef
                                                                    className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputRoot"
                                                                    disabled={false}
                                                                    endAdornment={
                                                                      <div
                                                                        className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-endAdornment"
                                                                      >
                                                                        <WithStyles(ForwardRef(IconButton))
                                                                          aria-label="Clear"
                                                                          className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-clearIndicator"
                                                                          onClick={[Function]}
                                                                          tabIndex={-1}
                                                                          title="Clear"
                                                                        >
                                                                          <Memo
                                                                            fontSize="small"
                                                                          />
                                                                        </WithStyles(ForwardRef(IconButton))>
                                                                        <WithStyles(ForwardRef(IconButton))
                                                                          aria-label="standalone.selector.base-selector.open-icon-text"
                                                                          className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-popupIndicator"
                                                                          disabled={false}
                                                                          onClick={[Function]}
                                                                          tabIndex={-1}
                                                                          title="standalone.selector.base-selector.open-icon-text"
                                                                        >
                                                                          <Memo />
                                                                        </WithStyles(ForwardRef(IconButton))>
                                                                      </div>
                                                                    }
                                                                    fullWidth={true}
                                                                    id="multi-select-with-tags-group-select"
                                                                    inputProps={
                                                                      Object {
                                                                        "aria-activedescendant": null,
                                                                        "aria-autocomplete": "both",
                                                                        "aria-controls": null,
                                                                        "autoCapitalize": "none",
                                                                        "autoComplete": "off",
                                                                        "className": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused",
                                                                        "disabled": false,
                                                                        "id": "multi-select-with-tags-group-select",
                                                                        "onBlur": [Function],
                                                                        "onChange": [Function],
                                                                        "onFocus": [Function],
                                                                        "onMouseDown": [Function],
                                                                        "ref": Object {
                                                                          "current": <input
                                                                            aria-autocomplete="both"
                                                                            autocapitalize="none"
                                                                            autocomplete="off"
                                                                            class="standalone-selector--selector-multi-with-tags-MuiInputBase-input standalone-selector--selector-multi-with-tags-MuiOutlinedInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-37 standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-with-tags-MuiOutlinedInput-inputAdornedEnd"
                                                                            id="multi-select-with-tags-group-select"
                                                                            spellcheck="false"
                                                                            type="text"
                                                                            value=""
                                                                          />,
                                                                        },
                                                                        "spellCheck": "false",
                                                                        "value": "",
                                                                      }
                                                                    }
                                                                    onChange={[Function]}
                                                                  >
                                                                    <WithStyles(ForwardRef(OutlinedInput))
                                                                      className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputRoot"
                                                                      classes={
                                                                        Object {
                                                                          "input": "standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-37",
                                                                          "multiline": "standalone-selector--selector-multi-with-tags-CcUIKitInput-multiline-36",
                                                                          "root": "standalone-selector--selector-multi-with-tags-CcUIKitInput-root-34",
                                                                        }
                                                                      }
                                                                      disabled={false}
                                                                      endAdornment={
                                                                        <div
                                                                          className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-endAdornment"
                                                                        >
                                                                          <WithStyles(ForwardRef(IconButton))
                                                                            aria-label="Clear"
                                                                            className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-clearIndicator"
                                                                            onClick={[Function]}
                                                                            tabIndex={-1}
                                                                            title="Clear"
                                                                          >
                                                                            <Memo
                                                                              fontSize="small"
                                                                            />
                                                                          </WithStyles(ForwardRef(IconButton))>
                                                                          <WithStyles(ForwardRef(IconButton))
                                                                            aria-label="standalone.selector.base-selector.open-icon-text"
                                                                            className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-popupIndicator"
                                                                            disabled={false}
                                                                            onClick={[Function]}
                                                                            tabIndex={-1}
                                                                            title="standalone.selector.base-selector.open-icon-text"
                                                                          >
                                                                            <Memo />
                                                                          </WithStyles(ForwardRef(IconButton))>
                                                                        </div>
                                                                      }
                                                                      fullWidth={true}
                                                                      id="multi-select-with-tags-group-select"
                                                                      inputProps={
                                                                        Object {
                                                                          "aria-activedescendant": null,
                                                                          "aria-autocomplete": "both",
                                                                          "aria-controls": null,
                                                                          "autoCapitalize": "none",
                                                                          "autoComplete": "off",
                                                                          "className": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused",
                                                                          "disabled": false,
                                                                          "id": "multi-select-with-tags-group-select",
                                                                          "onBlur": [Function],
                                                                          "onChange": [Function],
                                                                          "onFocus": [Function],
                                                                          "onMouseDown": [Function],
                                                                          "ref": Object {
                                                                            "current": <input
                                                                              aria-autocomplete="both"
                                                                              autocapitalize="none"
                                                                              autocomplete="off"
                                                                              class="standalone-selector--selector-multi-with-tags-MuiInputBase-input standalone-selector--selector-multi-with-tags-MuiOutlinedInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-37 standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-with-tags-MuiOutlinedInput-inputAdornedEnd"
                                                                              id="multi-select-with-tags-group-select"
                                                                              spellcheck="false"
                                                                              type="text"
                                                                              value=""
                                                                            />,
                                                                          },
                                                                          "spellCheck": "false",
                                                                          "value": "",
                                                                        }
                                                                      }
                                                                      onChange={[Function]}
                                                                    >
                                                                      <ForwardRef(OutlinedInput)
                                                                        className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputRoot"
                                                                        classes={
                                                                          Object {
                                                                            "adornedEnd": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-adornedEnd",
                                                                            "adornedStart": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-adornedStart",
                                                                            "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-colorSecondary",
                                                                            "disabled": "Mui-disabled",
                                                                            "error": "Mui-error",
                                                                            "focused": "Mui-focused",
                                                                            "input": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-37",
                                                                            "inputAdornedEnd": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-inputAdornedEnd",
                                                                            "inputAdornedStart": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-inputAdornedStart",
                                                                            "inputMarginDense": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-inputMarginDense",
                                                                            "inputMultiline": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-inputMultiline",
                                                                            "marginDense": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-marginDense",
                                                                            "multiline": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-multiline standalone-selector--selector-multi-with-tags-CcUIKitInput-multiline-36",
                                                                            "notchedOutline": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-notchedOutline",
                                                                            "root": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-root standalone-selector--selector-multi-with-tags-CcUIKitInput-root-34",
                                                                          }
                                                                        }
                                                                        disabled={false}
                                                                        endAdornment={
                                                                          <div
                                                                            className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-endAdornment"
                                                                          >
                                                                            <WithStyles(ForwardRef(IconButton))
                                                                              aria-label="Clear"
                                                                              className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-clearIndicator"
                                                                              onClick={[Function]}
                                                                              tabIndex={-1}
                                                                              title="Clear"
                                                                            >
                                                                              <Memo
                                                                                fontSize="small"
                                                                              />
                                                                            </WithStyles(ForwardRef(IconButton))>
                                                                            <WithStyles(ForwardRef(IconButton))
                                                                              aria-label="standalone.selector.base-selector.open-icon-text"
                                                                              className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-popupIndicator"
                                                                              disabled={false}
                                                                              onClick={[Function]}
                                                                              tabIndex={-1}
                                                                              title="standalone.selector.base-selector.open-icon-text"
                                                                            >
                                                                              <Memo />
                                                                            </WithStyles(ForwardRef(IconButton))>
                                                                          </div>
                                                                        }
                                                                        fullWidth={true}
                                                                        id="multi-select-with-tags-group-select"
                                                                        inputProps={
                                                                          Object {
                                                                            "aria-activedescendant": null,
                                                                            "aria-autocomplete": "both",
                                                                            "aria-controls": null,
                                                                            "autoCapitalize": "none",
                                                                            "autoComplete": "off",
                                                                            "className": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused",
                                                                            "disabled": false,
                                                                            "id": "multi-select-with-tags-group-select",
                                                                            "onBlur": [Function],
                                                                            "onChange": [Function],
                                                                            "onFocus": [Function],
                                                                            "onMouseDown": [Function],
                                                                            "ref": Object {
                                                                              "current": <input
                                                                                aria-autocomplete="both"
                                                                                autocapitalize="none"
                                                                                autocomplete="off"
                                                                                class="standalone-selector--selector-multi-with-tags-MuiInputBase-input standalone-selector--selector-multi-with-tags-MuiOutlinedInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-37 standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-with-tags-MuiOutlinedInput-inputAdornedEnd"
                                                                                id="multi-select-with-tags-group-select"
                                                                                spellcheck="false"
                                                                                type="text"
                                                                                value=""
                                                                              />,
                                                                            },
                                                                            "spellCheck": "false",
                                                                            "value": "",
                                                                          }
                                                                        }
                                                                        onChange={[Function]}
                                                                      >
                                                                        <WithStyles(ForwardRef(InputBase))
                                                                          className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputRoot"
                                                                          classes={
                                                                            Object {
                                                                              "adornedEnd": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-adornedEnd",
                                                                              "adornedStart": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-adornedStart",
                                                                              "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-colorSecondary",
                                                                              "disabled": "Mui-disabled",
                                                                              "error": "Mui-error",
                                                                              "focused": "Mui-focused",
                                                                              "input": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-37",
                                                                              "inputAdornedEnd": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-inputAdornedEnd",
                                                                              "inputAdornedStart": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-inputAdornedStart",
                                                                              "inputMarginDense": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-inputMarginDense",
                                                                              "inputMultiline": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-inputMultiline",
                                                                              "marginDense": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-marginDense",
                                                                              "multiline": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-multiline standalone-selector--selector-multi-with-tags-CcUIKitInput-multiline-36",
                                                                              "notchedOutline": null,
                                                                              "root": "standalone-selector--selector-multi-with-tags-MuiOutlinedInput-root standalone-selector--selector-multi-with-tags-CcUIKitInput-root-34",
                                                                            }
                                                                          }
                                                                          disabled={false}
                                                                          endAdornment={
                                                                            <div
                                                                              className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-endAdornment"
                                                                            >
                                                                              <WithStyles(ForwardRef(IconButton))
                                                                                aria-label="Clear"
                                                                                className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-clearIndicator"
                                                                                onClick={[Function]}
                                                                                tabIndex={-1}
                                                                                title="Clear"
                                                                              >
                                                                                <Memo
                                                                                  fontSize="small"
                                                                                />
                                                                              </WithStyles(ForwardRef(IconButton))>
                                                                              <WithStyles(ForwardRef(IconButton))
                                                                                aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-popupIndicator"
                                                                                disabled={false}
                                                                                onClick={[Function]}
                                                                                tabIndex={-1}
                                                                                title="standalone.selector.base-selector.open-icon-text"
                                                                              >
                                                                                <Memo />
                                                                              </WithStyles(ForwardRef(IconButton))>
                                                                            </div>
                                                                          }
                                                                          fullWidth={true}
                                                                          id="multi-select-with-tags-group-select"
                                                                          inputComponent="input"
                                                                          inputProps={
                                                                            Object {
                                                                              "aria-activedescendant": null,
                                                                              "aria-autocomplete": "both",
                                                                              "aria-controls": null,
                                                                              "autoCapitalize": "none",
                                                                              "autoComplete": "off",
                                                                              "className": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused",
                                                                              "disabled": false,
                                                                              "id": "multi-select-with-tags-group-select",
                                                                              "onBlur": [Function],
                                                                              "onChange": [Function],
                                                                              "onFocus": [Function],
                                                                              "onMouseDown": [Function],
                                                                              "ref": Object {
                                                                                "current": <input
                                                                                  aria-autocomplete="both"
                                                                                  autocapitalize="none"
                                                                                  autocomplete="off"
                                                                                  class="standalone-selector--selector-multi-with-tags-MuiInputBase-input standalone-selector--selector-multi-with-tags-MuiOutlinedInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-37 standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-with-tags-MuiOutlinedInput-inputAdornedEnd"
                                                                                  id="multi-select-with-tags-group-select"
                                                                                  spellcheck="false"
                                                                                  type="text"
                                                                                  value=""
                                                                                />,
                                                                              },
                                                                              "spellCheck": "false",
                                                                              "value": "",
                                                                            }
                                                                          }
                                                                          multiline={false}
                                                                          onChange={[Function]}
                                                                          renderSuffix={[Function]}
                                                                          type="text"
                                                                        >
                                                                          <ForwardRef(InputBase)
                                                                            className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputRoot"
                                                                            classes={
                                                                              Object {
                                                                                "adornedEnd": "standalone-selector--selector-multi-with-tags-MuiInputBase-adornedEnd standalone-selector--selector-multi-with-tags-MuiOutlinedInput-adornedEnd",
                                                                                "adornedStart": "standalone-selector--selector-multi-with-tags-MuiInputBase-adornedStart standalone-selector--selector-multi-with-tags-MuiOutlinedInput-adornedStart",
                                                                                "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiInputBase-colorSecondary standalone-selector--selector-multi-with-tags-MuiOutlinedInput-colorSecondary",
                                                                                "disabled": "Mui-disabled Mui-disabled",
                                                                                "error": "Mui-error Mui-error",
                                                                                "focused": "Mui-focused Mui-focused",
                                                                                "formControl": "standalone-selector--selector-multi-with-tags-MuiInputBase-formControl",
                                                                                "fullWidth": "standalone-selector--selector-multi-with-tags-MuiInputBase-fullWidth",
                                                                                "input": "standalone-selector--selector-multi-with-tags-MuiInputBase-input standalone-selector--selector-multi-with-tags-MuiOutlinedInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-37",
                                                                                "inputAdornedEnd": "standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-with-tags-MuiOutlinedInput-inputAdornedEnd",
                                                                                "inputAdornedStart": "standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedStart standalone-selector--selector-multi-with-tags-MuiOutlinedInput-inputAdornedStart",
                                                                                "inputHiddenLabel": "standalone-selector--selector-multi-with-tags-MuiInputBase-inputHiddenLabel",
                                                                                "inputMarginDense": "standalone-selector--selector-multi-with-tags-MuiInputBase-inputMarginDense standalone-selector--selector-multi-with-tags-MuiOutlinedInput-inputMarginDense",
                                                                                "inputMultiline": "standalone-selector--selector-multi-with-tags-MuiInputBase-inputMultiline standalone-selector--selector-multi-with-tags-MuiOutlinedInput-inputMultiline",
                                                                                "inputTypeSearch": "standalone-selector--selector-multi-with-tags-MuiInputBase-inputTypeSearch",
                                                                                "marginDense": "standalone-selector--selector-multi-with-tags-MuiInputBase-marginDense standalone-selector--selector-multi-with-tags-MuiOutlinedInput-marginDense",
                                                                                "multiline": "standalone-selector--selector-multi-with-tags-MuiInputBase-multiline standalone-selector--selector-multi-with-tags-MuiOutlinedInput-multiline standalone-selector--selector-multi-with-tags-CcUIKitInput-multiline-36",
                                                                                "root": "standalone-selector--selector-multi-with-tags-MuiInputBase-root standalone-selector--selector-multi-with-tags-MuiOutlinedInput-root standalone-selector--selector-multi-with-tags-CcUIKitInput-root-34",
                                                                              }
                                                                            }
                                                                            disabled={false}
                                                                            endAdornment={
                                                                              <div
                                                                                className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-endAdornment"
                                                                              >
                                                                                <WithStyles(ForwardRef(IconButton))
                                                                                  aria-label="Clear"
                                                                                  className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-clearIndicator"
                                                                                  onClick={[Function]}
                                                                                  tabIndex={-1}
                                                                                  title="Clear"
                                                                                >
                                                                                  <Memo
                                                                                    fontSize="small"
                                                                                  />
                                                                                </WithStyles(ForwardRef(IconButton))>
                                                                                <WithStyles(ForwardRef(IconButton))
                                                                                  aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                  className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-popupIndicator"
                                                                                  disabled={false}
                                                                                  onClick={[Function]}
                                                                                  tabIndex={-1}
                                                                                  title="standalone.selector.base-selector.open-icon-text"
                                                                                >
                                                                                  <Memo />
                                                                                </WithStyles(ForwardRef(IconButton))>
                                                                              </div>
                                                                            }
                                                                            fullWidth={true}
                                                                            id="multi-select-with-tags-group-select"
                                                                            inputComponent="input"
                                                                            inputProps={
                                                                              Object {
                                                                                "aria-activedescendant": null,
                                                                                "aria-autocomplete": "both",
                                                                                "aria-controls": null,
                                                                                "autoCapitalize": "none",
                                                                                "autoComplete": "off",
                                                                                "className": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused",
                                                                                "disabled": false,
                                                                                "id": "multi-select-with-tags-group-select",
                                                                                "onBlur": [Function],
                                                                                "onChange": [Function],
                                                                                "onFocus": [Function],
                                                                                "onMouseDown": [Function],
                                                                                "ref": Object {
                                                                                  "current": <input
                                                                                    aria-autocomplete="both"
                                                                                    autocapitalize="none"
                                                                                    autocomplete="off"
                                                                                    class="standalone-selector--selector-multi-with-tags-MuiInputBase-input standalone-selector--selector-multi-with-tags-MuiOutlinedInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-37 standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-with-tags-MuiOutlinedInput-inputAdornedEnd"
                                                                                    id="multi-select-with-tags-group-select"
                                                                                    spellcheck="false"
                                                                                    type="text"
                                                                                    value=""
                                                                                  />,
                                                                                },
                                                                                "spellCheck": "false",
                                                                                "value": "",
                                                                              }
                                                                            }
                                                                            multiline={false}
                                                                            onChange={[Function]}
                                                                            renderSuffix={[Function]}
                                                                            type="text"
                                                                          >
                                                                            <div
                                                                              className="standalone-selector--selector-multi-with-tags-MuiInputBase-root standalone-selector--selector-multi-with-tags-MuiOutlinedInput-root standalone-selector--selector-multi-with-tags-CcUIKitInput-root-34 standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputRoot standalone-selector--selector-multi-with-tags-MuiInputBase-fullWidth standalone-selector--selector-multi-with-tags-MuiInputBase-adornedEnd standalone-selector--selector-multi-with-tags-MuiOutlinedInput-adornedEnd"
                                                                              onClick={[Function]}
                                                                            >
                                                                              <input
                                                                                aria-activedescendant={null}
                                                                                aria-autocomplete="both"
                                                                                aria-controls={null}
                                                                                autoCapitalize="none"
                                                                                autoComplete="off"
                                                                                className="standalone-selector--selector-multi-with-tags-MuiInputBase-input standalone-selector--selector-multi-with-tags-MuiOutlinedInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-37 standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-with-tags-MuiOutlinedInput-inputAdornedEnd"
                                                                                disabled={false}
                                                                                id="multi-select-with-tags-group-select"
                                                                                onAnimationStart={[Function]}
                                                                                onBlur={[Function]}
                                                                                onChange={[Function]}
                                                                                onFocus={[Function]}
                                                                                onMouseDown={[Function]}
                                                                                spellCheck="false"
                                                                                type="text"
                                                                                value=""
                                                                              />
                                                                              <div
                                                                                className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-endAdornment"
                                                                              >
                                                                                <WithStyles(ForwardRef(IconButton))
                                                                                  aria-label="Clear"
                                                                                  className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-clearIndicator"
                                                                                  onClick={[Function]}
                                                                                  tabIndex={-1}
                                                                                  title="Clear"
                                                                                >
                                                                                  <ForwardRef(IconButton)
                                                                                    aria-label="Clear"
                                                                                    className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-clearIndicator"
                                                                                    classes={
                                                                                      Object {
                                                                                        "colorInherit": "standalone-selector--selector-multi-with-tags-MuiIconButton-colorInherit",
                                                                                        "colorPrimary": "standalone-selector--selector-multi-with-tags-MuiIconButton-colorPrimary",
                                                                                        "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiIconButton-colorSecondary",
                                                                                        "disabled": "Mui-disabled",
                                                                                        "edgeEnd": "standalone-selector--selector-multi-with-tags-MuiIconButton-edgeEnd",
                                                                                        "edgeStart": "standalone-selector--selector-multi-with-tags-MuiIconButton-edgeStart",
                                                                                        "label": "standalone-selector--selector-multi-with-tags-MuiIconButton-label",
                                                                                        "root": "standalone-selector--selector-multi-with-tags-MuiIconButton-root",
                                                                                        "sizeSmall": "standalone-selector--selector-multi-with-tags-MuiIconButton-sizeSmall",
                                                                                      }
                                                                                    }
                                                                                    onClick={[Function]}
                                                                                    tabIndex={-1}
                                                                                    title="Clear"
                                                                                  >
                                                                                    <WithStyles(ForwardRef(ButtonBase))
                                                                                      aria-label="Clear"
                                                                                      centerRipple={true}
                                                                                      className="standalone-selector--selector-multi-with-tags-MuiIconButton-root standalone-selector--selector-multi-with-tags-MuiAutocomplete-clearIndicator"
                                                                                      disabled={false}
                                                                                      focusRipple={true}
                                                                                      onClick={[Function]}
                                                                                      tabIndex={-1}
                                                                                      title="Clear"
                                                                                    >
                                                                                      <ForwardRef(ButtonBase)
                                                                                        aria-label="Clear"
                                                                                        centerRipple={true}
                                                                                        className="standalone-selector--selector-multi-with-tags-MuiIconButton-root standalone-selector--selector-multi-with-tags-MuiAutocomplete-clearIndicator"
                                                                                        classes={
                                                                                          Object {
                                                                                            "disabled": "Mui-disabled",
                                                                                            "focusVisible": "Mui-focusVisible",
                                                                                            "root": "standalone-selector--selector-multi-with-tags-MuiButtonBase-root",
                                                                                          }
                                                                                        }
                                                                                        disabled={false}
                                                                                        focusRipple={true}
                                                                                        onClick={[Function]}
                                                                                        tabIndex={-1}
                                                                                        title="Clear"
                                                                                      >
                                                                                        <button
                                                                                          aria-label="Clear"
                                                                                          className="standalone-selector--selector-multi-with-tags-MuiButtonBase-root standalone-selector--selector-multi-with-tags-MuiIconButton-root standalone-selector--selector-multi-with-tags-MuiAutocomplete-clearIndicator"
                                                                                          disabled={false}
                                                                                          onBlur={[Function]}
                                                                                          onClick={[Function]}
                                                                                          onDragLeave={[Function]}
                                                                                          onFocus={[Function]}
                                                                                          onKeyDown={[Function]}
                                                                                          onKeyUp={[Function]}
                                                                                          onMouseDown={[Function]}
                                                                                          onMouseLeave={[Function]}
                                                                                          onMouseUp={[Function]}
                                                                                          onTouchEnd={[Function]}
                                                                                          onTouchMove={[Function]}
                                                                                          onTouchStart={[Function]}
                                                                                          tabIndex={-1}
                                                                                          title="Clear"
                                                                                          type="button"
                                                                                        >
                                                                                          <span
                                                                                            className="standalone-selector--selector-multi-with-tags-MuiIconButton-label"
                                                                                          >
                                                                                            <ForwardRef(CloseIcon)
                                                                                              fontSize="small"
                                                                                            >
                                                                                              <WithStyles(ForwardRef(SvgIcon))
                                                                                                fontSize="small"
                                                                                              >
                                                                                                <ForwardRef(SvgIcon)
                                                                                                  classes={
                                                                                                    Object {
                                                                                                      "colorAction": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorAction",
                                                                                                      "colorDisabled": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorDisabled",
                                                                                                      "colorError": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorError",
                                                                                                      "colorPrimary": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorPrimary",
                                                                                                      "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorSecondary",
                                                                                                      "fontSizeInherit": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-fontSizeInherit",
                                                                                                      "fontSizeLarge": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-fontSizeLarge",
                                                                                                      "fontSizeSmall": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-fontSizeSmall",
                                                                                                      "root": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-root",
                                                                                                    }
                                                                                                  }
                                                                                                  fontSize="small"
                                                                                                >
                                                                                                  <svg
                                                                                                    aria-hidden={true}
                                                                                                    className="standalone-selector--selector-multi-with-tags-MuiSvgIcon-root standalone-selector--selector-multi-with-tags-MuiSvgIcon-fontSizeSmall"
                                                                                                    focusable="false"
                                                                                                    viewBox="0 0 24 24"
                                                                                                  >
                                                                                                    <path
                                                                                                      d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                                                                                                    />
                                                                                                  </svg>
                                                                                                </ForwardRef(SvgIcon)>
                                                                                              </WithStyles(ForwardRef(SvgIcon))>
                                                                                            </ForwardRef(CloseIcon)>
                                                                                          </span>
                                                                                          <WithStyles(memo)
                                                                                            center={true}
                                                                                          >
                                                                                            <ForwardRef(TouchRipple)
                                                                                              center={true}
                                                                                              classes={
                                                                                                Object {
                                                                                                  "child": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-child",
                                                                                                  "childLeaving": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-childLeaving",
                                                                                                  "childPulsate": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-childPulsate",
                                                                                                  "ripple": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-ripple",
                                                                                                  "ripplePulsate": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-ripplePulsate",
                                                                                                  "rippleVisible": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-rippleVisible",
                                                                                                  "root": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-root",
                                                                                                }
                                                                                              }
                                                                                            >
                                                                                              <span
                                                                                                className="standalone-selector--selector-multi-with-tags-MuiTouchRipple-root"
                                                                                              >
                                                                                                <TransitionGroup
                                                                                                  childFactory={[Function]}
                                                                                                  component={null}
                                                                                                  exit={true}
                                                                                                />
                                                                                              </span>
                                                                                            </ForwardRef(TouchRipple)>
                                                                                          </WithStyles(memo)>
                                                                                        </button>
                                                                                      </ForwardRef(ButtonBase)>
                                                                                    </WithStyles(ForwardRef(ButtonBase))>
                                                                                  </ForwardRef(IconButton)>
                                                                                </WithStyles(ForwardRef(IconButton))>
                                                                                <WithStyles(ForwardRef(IconButton))
                                                                                  aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                  className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-popupIndicator"
                                                                                  disabled={false}
                                                                                  onClick={[Function]}
                                                                                  tabIndex={-1}
                                                                                  title="standalone.selector.base-selector.open-icon-text"
                                                                                >
                                                                                  <ForwardRef(IconButton)
                                                                                    aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                    className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-popupIndicator"
                                                                                    classes={
                                                                                      Object {
                                                                                        "colorInherit": "standalone-selector--selector-multi-with-tags-MuiIconButton-colorInherit",
                                                                                        "colorPrimary": "standalone-selector--selector-multi-with-tags-MuiIconButton-colorPrimary",
                                                                                        "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiIconButton-colorSecondary",
                                                                                        "disabled": "Mui-disabled",
                                                                                        "edgeEnd": "standalone-selector--selector-multi-with-tags-MuiIconButton-edgeEnd",
                                                                                        "edgeStart": "standalone-selector--selector-multi-with-tags-MuiIconButton-edgeStart",
                                                                                        "label": "standalone-selector--selector-multi-with-tags-MuiIconButton-label",
                                                                                        "root": "standalone-selector--selector-multi-with-tags-MuiIconButton-root",
                                                                                        "sizeSmall": "standalone-selector--selector-multi-with-tags-MuiIconButton-sizeSmall",
                                                                                      }
                                                                                    }
                                                                                    disabled={false}
                                                                                    onClick={[Function]}
                                                                                    tabIndex={-1}
                                                                                    title="standalone.selector.base-selector.open-icon-text"
                                                                                  >
                                                                                    <WithStyles(ForwardRef(ButtonBase))
                                                                                      aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                      centerRipple={true}
                                                                                      className="standalone-selector--selector-multi-with-tags-MuiIconButton-root standalone-selector--selector-multi-with-tags-MuiAutocomplete-popupIndicator"
                                                                                      disabled={false}
                                                                                      focusRipple={true}
                                                                                      onClick={[Function]}
                                                                                      tabIndex={-1}
                                                                                      title="standalone.selector.base-selector.open-icon-text"
                                                                                    >
                                                                                      <ForwardRef(ButtonBase)
                                                                                        aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                        centerRipple={true}
                                                                                        className="standalone-selector--selector-multi-with-tags-MuiIconButton-root standalone-selector--selector-multi-with-tags-MuiAutocomplete-popupIndicator"
                                                                                        classes={
                                                                                          Object {
                                                                                            "disabled": "Mui-disabled",
                                                                                            "focusVisible": "Mui-focusVisible",
                                                                                            "root": "standalone-selector--selector-multi-with-tags-MuiButtonBase-root",
                                                                                          }
                                                                                        }
                                                                                        disabled={false}
                                                                                        focusRipple={true}
                                                                                        onClick={[Function]}
                                                                                        tabIndex={-1}
                                                                                        title="standalone.selector.base-selector.open-icon-text"
                                                                                      >
                                                                                        <button
                                                                                          aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                          className="standalone-selector--selector-multi-with-tags-MuiButtonBase-root standalone-selector--selector-multi-with-tags-MuiIconButton-root standalone-selector--selector-multi-with-tags-MuiAutocomplete-popupIndicator"
                                                                                          disabled={false}
                                                                                          onBlur={[Function]}
                                                                                          onClick={[Function]}
                                                                                          onDragLeave={[Function]}
                                                                                          onFocus={[Function]}
                                                                                          onKeyDown={[Function]}
                                                                                          onKeyUp={[Function]}
                                                                                          onMouseDown={[Function]}
                                                                                          onMouseLeave={[Function]}
                                                                                          onMouseUp={[Function]}
                                                                                          onTouchEnd={[Function]}
                                                                                          onTouchMove={[Function]}
                                                                                          onTouchStart={[Function]}
                                                                                          tabIndex={-1}
                                                                                          title="standalone.selector.base-selector.open-icon-text"
                                                                                          type="button"
                                                                                        >
                                                                                          <span
                                                                                            className="standalone-selector--selector-multi-with-tags-MuiIconButton-label"
                                                                                          >
                                                                                            <ForwardRef(ExpandMoreIcon)>
                                                                                              <WithStyles(ForwardRef(SvgIcon))>
                                                                                                <ForwardRef(SvgIcon)
                                                                                                  classes={
                                                                                                    Object {
                                                                                                      "colorAction": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorAction",
                                                                                                      "colorDisabled": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorDisabled",
                                                                                                      "colorError": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorError",
                                                                                                      "colorPrimary": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorPrimary",
                                                                                                      "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorSecondary",
                                                                                                      "fontSizeInherit": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-fontSizeInherit",
                                                                                                      "fontSizeLarge": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-fontSizeLarge",
                                                                                                      "fontSizeSmall": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-fontSizeSmall",
                                                                                                      "root": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-root",
                                                                                                    }
                                                                                                  }
                                                                                                >
                                                                                                  <svg
                                                                                                    aria-hidden={true}
                                                                                                    className="standalone-selector--selector-multi-with-tags-MuiSvgIcon-root"
                                                                                                    focusable="false"
                                                                                                    viewBox="0 0 24 24"
                                                                                                  >
                                                                                                    <path
                                                                                                      d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
                                                                                                    />
                                                                                                  </svg>
                                                                                                </ForwardRef(SvgIcon)>
                                                                                              </WithStyles(ForwardRef(SvgIcon))>
                                                                                            </ForwardRef(ExpandMoreIcon)>
                                                                                          </span>
                                                                                          <WithStyles(memo)
                                                                                            center={true}
                                                                                          >
                                                                                            <ForwardRef(TouchRipple)
                                                                                              center={true}
                                                                                              classes={
                                                                                                Object {
                                                                                                  "child": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-child",
                                                                                                  "childLeaving": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-childLeaving",
                                                                                                  "childPulsate": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-childPulsate",
                                                                                                  "ripple": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-ripple",
                                                                                                  "ripplePulsate": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-ripplePulsate",
                                                                                                  "rippleVisible": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-rippleVisible",
                                                                                                  "root": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-root",
                                                                                                }
                                                                                              }
                                                                                            >
                                                                                              <span
                                                                                                className="standalone-selector--selector-multi-with-tags-MuiTouchRipple-root"
                                                                                              >
                                                                                                <TransitionGroup
                                                                                                  childFactory={[Function]}
                                                                                                  component={null}
                                                                                                  exit={true}
                                                                                                />
                                                                                              </span>
                                                                                            </ForwardRef(TouchRipple)>
                                                                                          </WithStyles(memo)>
                                                                                        </button>
                                                                                      </ForwardRef(ButtonBase)>
                                                                                    </WithStyles(ForwardRef(ButtonBase))>
                                                                                  </ForwardRef(IconButton)>
                                                                                </WithStyles(ForwardRef(IconButton))>
                                                                              </div>
                                                                              <WithStyles(ForwardRef(NotchedOutline))
                                                                                className="standalone-selector--selector-multi-with-tags-MuiOutlinedInput-notchedOutline"
                                                                                labelWidth={0}
                                                                                notched={false}
                                                                              >
                                                                                <ForwardRef(NotchedOutline)
                                                                                  className="standalone-selector--selector-multi-with-tags-MuiOutlinedInput-notchedOutline"
                                                                                  classes={
                                                                                    Object {
                                                                                      "legend": "standalone-selector--selector-multi-with-tags-PrivateNotchedOutline-legend-39",
                                                                                      "legendLabelled": "standalone-selector--selector-multi-with-tags-PrivateNotchedOutline-legendLabelled-40",
                                                                                      "legendNotched": "standalone-selector--selector-multi-with-tags-PrivateNotchedOutline-legendNotched-41",
                                                                                      "root": "standalone-selector--selector-multi-with-tags-PrivateNotchedOutline-root-38",
                                                                                    }
                                                                                  }
                                                                                  labelWidth={0}
                                                                                  notched={false}
                                                                                >
                                                                                  <fieldset
                                                                                    aria-hidden={true}
                                                                                    className="standalone-selector--selector-multi-with-tags-PrivateNotchedOutline-root-38 standalone-selector--selector-multi-with-tags-MuiOutlinedInput-notchedOutline"
                                                                                    style={
                                                                                      Object {
                                                                                        "paddingLeft": 8,
                                                                                      }
                                                                                    }
                                                                                  >
                                                                                    <legend
                                                                                      className="standalone-selector--selector-multi-with-tags-PrivateNotchedOutline-legend-39"
                                                                                      style={
                                                                                        Object {
                                                                                          "width": 0.01,
                                                                                        }
                                                                                      }
                                                                                    >
                                                                                      <span
                                                                                        dangerouslySetInnerHTML={
                                                                                          Object {
                                                                                            "__html": "&#8203;",
                                                                                          }
                                                                                        }
                                                                                      />
                                                                                    </legend>
                                                                                  </fieldset>
                                                                                </ForwardRef(NotchedOutline)>
                                                                              </WithStyles(ForwardRef(NotchedOutline))>
                                                                            </div>
                                                                          </ForwardRef(InputBase)>
                                                                        </WithStyles(ForwardRef(InputBase))>
                                                                      </ForwardRef(OutlinedInput)>
                                                                    </WithStyles(ForwardRef(OutlinedInput))>
                                                                  </ForwardRef>
                                                                </div>
                                                              </ForwardRef(Autocomplete)>
                                                            </WithStyles(ForwardRef(Autocomplete))>
                                                          </div>
                                                        </ForwardRef(Paper)>
                                                      </WithStyles(ForwardRef(Paper))>
                                                    </div>
                                                  </ForwardRef(Typography)>
                                                </WithStyles(ForwardRef(Typography))>
                                              </div>
                                            </ForwardRef(Typography)>
                                          </WithStyles(ForwardRef(Typography))>
                                        </Memo(InlineSwitch)>
                                      </Memo(BaseSelector)>
                                    </Memo(SingleSelect)>
                                     
                                    <WithStyles(ForwardRef(Typography))
                                      className="standalone-selector--selector-multi-with-tags-CcMultiSelectWithGroup-labelWithSwitch-25"
                                      component="div"
                                    >
                                      <ForwardRef(Typography)
                                        className="standalone-selector--selector-multi-with-tags-CcMultiSelectWithGroup-labelWithSwitch-25"
                                        classes={
                                          Object {
                                            "alignCenter": "standalone-selector--selector-multi-with-tags-MuiTypography-alignCenter",
                                            "alignJustify": "standalone-selector--selector-multi-with-tags-MuiTypography-alignJustify",
                                            "alignLeft": "standalone-selector--selector-multi-with-tags-MuiTypography-alignLeft",
                                            "alignRight": "standalone-selector--selector-multi-with-tags-MuiTypography-alignRight",
                                            "body1": "standalone-selector--selector-multi-with-tags-MuiTypography-body1",
                                            "body2": "standalone-selector--selector-multi-with-tags-MuiTypography-body2",
                                            "button": "standalone-selector--selector-multi-with-tags-MuiTypography-button",
                                            "caption": "standalone-selector--selector-multi-with-tags-MuiTypography-caption",
                                            "colorError": "standalone-selector--selector-multi-with-tags-MuiTypography-colorError",
                                            "colorInherit": "standalone-selector--selector-multi-with-tags-MuiTypography-colorInherit",
                                            "colorPrimary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorPrimary",
                                            "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorSecondary",
                                            "colorTextPrimary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorTextPrimary",
                                            "colorTextSecondary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorTextSecondary",
                                            "displayBlock": "standalone-selector--selector-multi-with-tags-MuiTypography-displayBlock",
                                            "displayInline": "standalone-selector--selector-multi-with-tags-MuiTypography-displayInline",
                                            "gutterBottom": "standalone-selector--selector-multi-with-tags-MuiTypography-gutterBottom",
                                            "h1": "standalone-selector--selector-multi-with-tags-MuiTypography-h1",
                                            "h2": "standalone-selector--selector-multi-with-tags-MuiTypography-h2",
                                            "h3": "standalone-selector--selector-multi-with-tags-MuiTypography-h3",
                                            "h4": "standalone-selector--selector-multi-with-tags-MuiTypography-h4",
                                            "h5": "standalone-selector--selector-multi-with-tags-MuiTypography-h5",
                                            "h6": "standalone-selector--selector-multi-with-tags-MuiTypography-h6",
                                            "noWrap": "standalone-selector--selector-multi-with-tags-MuiTypography-noWrap",
                                            "overline": "standalone-selector--selector-multi-with-tags-MuiTypography-overline",
                                            "paragraph": "standalone-selector--selector-multi-with-tags-MuiTypography-paragraph",
                                            "root": "standalone-selector--selector-multi-with-tags-MuiTypography-root",
                                            "srOnly": "standalone-selector--selector-multi-with-tags-MuiTypography-srOnly",
                                            "subtitle1": "standalone-selector--selector-multi-with-tags-MuiTypography-subtitle1",
                                            "subtitle2": "standalone-selector--selector-multi-with-tags-MuiTypography-subtitle2",
                                          }
                                        }
                                        component="div"
                                      >
                                        <div
                                          className="standalone-selector--selector-multi-with-tags-MuiTypography-root standalone-selector--selector-multi-with-tags-CcMultiSelectWithGroup-labelWithSwitch-25 standalone-selector--selector-multi-with-tags-MuiTypography-body1"
                                        >
                                          <Memo(MultiSelectWithoutGroup)
                                            autocompleteId="multi-select-with-tags"
                                            disabled={false}
                                            enableIcons={false}
                                            getIdOfData={[Function]}
                                            loadDataOptions={[Function]}
                                            loadingText="Loading.."
                                            onChange={[Function]}
                                            openInfo={[Function]}
                                            refreshToken=""
                                            searchInputLabel="or search for a single item"
                                            selected={Array []}
                                            switchValue={false}
                                          >
                                            <WithStyles(ForwardRef(Typography))
                                              component="div"
                                            >
                                              <ForwardRef(Typography)
                                                classes={
                                                  Object {
                                                    "alignCenter": "standalone-selector--selector-multi-with-tags-MuiTypography-alignCenter",
                                                    "alignJustify": "standalone-selector--selector-multi-with-tags-MuiTypography-alignJustify",
                                                    "alignLeft": "standalone-selector--selector-multi-with-tags-MuiTypography-alignLeft",
                                                    "alignRight": "standalone-selector--selector-multi-with-tags-MuiTypography-alignRight",
                                                    "body1": "standalone-selector--selector-multi-with-tags-MuiTypography-body1",
                                                    "body2": "standalone-selector--selector-multi-with-tags-MuiTypography-body2",
                                                    "button": "standalone-selector--selector-multi-with-tags-MuiTypography-button",
                                                    "caption": "standalone-selector--selector-multi-with-tags-MuiTypography-caption",
                                                    "colorError": "standalone-selector--selector-multi-with-tags-MuiTypography-colorError",
                                                    "colorInherit": "standalone-selector--selector-multi-with-tags-MuiTypography-colorInherit",
                                                    "colorPrimary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorPrimary",
                                                    "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorSecondary",
                                                    "colorTextPrimary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorTextPrimary",
                                                    "colorTextSecondary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorTextSecondary",
                                                    "displayBlock": "standalone-selector--selector-multi-with-tags-MuiTypography-displayBlock",
                                                    "displayInline": "standalone-selector--selector-multi-with-tags-MuiTypography-displayInline",
                                                    "gutterBottom": "standalone-selector--selector-multi-with-tags-MuiTypography-gutterBottom",
                                                    "h1": "standalone-selector--selector-multi-with-tags-MuiTypography-h1",
                                                    "h2": "standalone-selector--selector-multi-with-tags-MuiTypography-h2",
                                                    "h3": "standalone-selector--selector-multi-with-tags-MuiTypography-h3",
                                                    "h4": "standalone-selector--selector-multi-with-tags-MuiTypography-h4",
                                                    "h5": "standalone-selector--selector-multi-with-tags-MuiTypography-h5",
                                                    "h6": "standalone-selector--selector-multi-with-tags-MuiTypography-h6",
                                                    "noWrap": "standalone-selector--selector-multi-with-tags-MuiTypography-noWrap",
                                                    "overline": "standalone-selector--selector-multi-with-tags-MuiTypography-overline",
                                                    "paragraph": "standalone-selector--selector-multi-with-tags-MuiTypography-paragraph",
                                                    "root": "standalone-selector--selector-multi-with-tags-MuiTypography-root",
                                                    "srOnly": "standalone-selector--selector-multi-with-tags-MuiTypography-srOnly",
                                                    "subtitle1": "standalone-selector--selector-multi-with-tags-MuiTypography-subtitle1",
                                                    "subtitle2": "standalone-selector--selector-multi-with-tags-MuiTypography-subtitle2",
                                                  }
                                                }
                                                component="div"
                                              >
                                                <div
                                                  className="standalone-selector--selector-multi-with-tags-MuiTypography-root standalone-selector--selector-multi-with-tags-MuiTypography-body1"
                                                >
                                                  <WithStyles(ForwardRef(Typography))
                                                    className="standalone-selector--selector-multi-with-tags-CcMultiSelectWithoutGroup-searchLabel-43"
                                                    component="div"
                                                  >
                                                    <ForwardRef(Typography)
                                                      className="standalone-selector--selector-multi-with-tags-CcMultiSelectWithoutGroup-searchLabel-43"
                                                      classes={
                                                        Object {
                                                          "alignCenter": "standalone-selector--selector-multi-with-tags-MuiTypography-alignCenter",
                                                          "alignJustify": "standalone-selector--selector-multi-with-tags-MuiTypography-alignJustify",
                                                          "alignLeft": "standalone-selector--selector-multi-with-tags-MuiTypography-alignLeft",
                                                          "alignRight": "standalone-selector--selector-multi-with-tags-MuiTypography-alignRight",
                                                          "body1": "standalone-selector--selector-multi-with-tags-MuiTypography-body1",
                                                          "body2": "standalone-selector--selector-multi-with-tags-MuiTypography-body2",
                                                          "button": "standalone-selector--selector-multi-with-tags-MuiTypography-button",
                                                          "caption": "standalone-selector--selector-multi-with-tags-MuiTypography-caption",
                                                          "colorError": "standalone-selector--selector-multi-with-tags-MuiTypography-colorError",
                                                          "colorInherit": "standalone-selector--selector-multi-with-tags-MuiTypography-colorInherit",
                                                          "colorPrimary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorPrimary",
                                                          "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorSecondary",
                                                          "colorTextPrimary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorTextPrimary",
                                                          "colorTextSecondary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorTextSecondary",
                                                          "displayBlock": "standalone-selector--selector-multi-with-tags-MuiTypography-displayBlock",
                                                          "displayInline": "standalone-selector--selector-multi-with-tags-MuiTypography-displayInline",
                                                          "gutterBottom": "standalone-selector--selector-multi-with-tags-MuiTypography-gutterBottom",
                                                          "h1": "standalone-selector--selector-multi-with-tags-MuiTypography-h1",
                                                          "h2": "standalone-selector--selector-multi-with-tags-MuiTypography-h2",
                                                          "h3": "standalone-selector--selector-multi-with-tags-MuiTypography-h3",
                                                          "h4": "standalone-selector--selector-multi-with-tags-MuiTypography-h4",
                                                          "h5": "standalone-selector--selector-multi-with-tags-MuiTypography-h5",
                                                          "h6": "standalone-selector--selector-multi-with-tags-MuiTypography-h6",
                                                          "noWrap": "standalone-selector--selector-multi-with-tags-MuiTypography-noWrap",
                                                          "overline": "standalone-selector--selector-multi-with-tags-MuiTypography-overline",
                                                          "paragraph": "standalone-selector--selector-multi-with-tags-MuiTypography-paragraph",
                                                          "root": "standalone-selector--selector-multi-with-tags-MuiTypography-root",
                                                          "srOnly": "standalone-selector--selector-multi-with-tags-MuiTypography-srOnly",
                                                          "subtitle1": "standalone-selector--selector-multi-with-tags-MuiTypography-subtitle1",
                                                          "subtitle2": "standalone-selector--selector-multi-with-tags-MuiTypography-subtitle2",
                                                        }
                                                      }
                                                      component="div"
                                                    >
                                                      <div
                                                        className="standalone-selector--selector-multi-with-tags-MuiTypography-root standalone-selector--selector-multi-with-tags-CcMultiSelectWithoutGroup-searchLabel-43 standalone-selector--selector-multi-with-tags-MuiTypography-body1"
                                                      >
                                                        <WithStyles(ForwardRef(Typography))
                                                          color="textSecondary"
                                                          component="label"
                                                          variant="caption"
                                                        >
                                                          <ForwardRef(Typography)
                                                            classes={
                                                              Object {
                                                                "alignCenter": "standalone-selector--selector-multi-with-tags-MuiTypography-alignCenter",
                                                                "alignJustify": "standalone-selector--selector-multi-with-tags-MuiTypography-alignJustify",
                                                                "alignLeft": "standalone-selector--selector-multi-with-tags-MuiTypography-alignLeft",
                                                                "alignRight": "standalone-selector--selector-multi-with-tags-MuiTypography-alignRight",
                                                                "body1": "standalone-selector--selector-multi-with-tags-MuiTypography-body1",
                                                                "body2": "standalone-selector--selector-multi-with-tags-MuiTypography-body2",
                                                                "button": "standalone-selector--selector-multi-with-tags-MuiTypography-button",
                                                                "caption": "standalone-selector--selector-multi-with-tags-MuiTypography-caption",
                                                                "colorError": "standalone-selector--selector-multi-with-tags-MuiTypography-colorError",
                                                                "colorInherit": "standalone-selector--selector-multi-with-tags-MuiTypography-colorInherit",
                                                                "colorPrimary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorPrimary",
                                                                "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorSecondary",
                                                                "colorTextPrimary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorTextPrimary",
                                                                "colorTextSecondary": "standalone-selector--selector-multi-with-tags-MuiTypography-colorTextSecondary",
                                                                "displayBlock": "standalone-selector--selector-multi-with-tags-MuiTypography-displayBlock",
                                                                "displayInline": "standalone-selector--selector-multi-with-tags-MuiTypography-displayInline",
                                                                "gutterBottom": "standalone-selector--selector-multi-with-tags-MuiTypography-gutterBottom",
                                                                "h1": "standalone-selector--selector-multi-with-tags-MuiTypography-h1",
                                                                "h2": "standalone-selector--selector-multi-with-tags-MuiTypography-h2",
                                                                "h3": "standalone-selector--selector-multi-with-tags-MuiTypography-h3",
                                                                "h4": "standalone-selector--selector-multi-with-tags-MuiTypography-h4",
                                                                "h5": "standalone-selector--selector-multi-with-tags-MuiTypography-h5",
                                                                "h6": "standalone-selector--selector-multi-with-tags-MuiTypography-h6",
                                                                "noWrap": "standalone-selector--selector-multi-with-tags-MuiTypography-noWrap",
                                                                "overline": "standalone-selector--selector-multi-with-tags-MuiTypography-overline",
                                                                "paragraph": "standalone-selector--selector-multi-with-tags-MuiTypography-paragraph",
                                                                "root": "standalone-selector--selector-multi-with-tags-MuiTypography-root",
                                                                "srOnly": "standalone-selector--selector-multi-with-tags-MuiTypography-srOnly",
                                                                "subtitle1": "standalone-selector--selector-multi-with-tags-MuiTypography-subtitle1",
                                                                "subtitle2": "standalone-selector--selector-multi-with-tags-MuiTypography-subtitle2",
                                                              }
                                                            }
                                                            color="textSecondary"
                                                            component="label"
                                                            variant="caption"
                                                          >
                                                            <label
                                                              className="standalone-selector--selector-multi-with-tags-MuiTypography-root standalone-selector--selector-multi-with-tags-MuiTypography-caption standalone-selector--selector-multi-with-tags-MuiTypography-colorTextSecondary"
                                                            >
                                                              or search for a single item
                                                            </label>
                                                          </ForwardRef(Typography)>
                                                        </WithStyles(ForwardRef(Typography))>
                                                      </div>
                                                    </ForwardRef(Typography)>
                                                  </WithStyles(ForwardRef(Typography))>
                                                  <WithStyles(ForwardRef(Autocomplete))
                                                    autoComplete={true}
                                                    disableClearable={true}
                                                    disabled={false}
                                                    filterOptions={[Function]}
                                                    freeSolo={true}
                                                    getOptionLabel={[Function]}
                                                    getOptionSelected={[Function]}
                                                    id="multi-select-with-tags"
                                                    inputValue=""
                                                    loading={false}
                                                    loadingText="Loading.."
                                                    noOptionsText="standalone.selector.base-selector.no-options-text"
                                                    onChange={[Function]}
                                                    onInputChange={[Function]}
                                                    options={Array []}
                                                    renderInput={[Function]}
                                                    value=""
                                                  >
                                                    <ForwardRef(Autocomplete)
                                                      autoComplete={true}
                                                      classes={
                                                        Object {
                                                          "clearIndicator": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-clearIndicator",
                                                          "clearIndicatorDirty": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-clearIndicatorDirty",
                                                          "endAdornment": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-endAdornment",
                                                          "focused": "Mui-focused",
                                                          "fullWidth": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-fullWidth",
                                                          "groupLabel": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-groupLabel",
                                                          "groupUl": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-groupUl",
                                                          "hasClearIcon": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-hasClearIcon",
                                                          "hasPopupIcon": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-hasPopupIcon",
                                                          "input": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-input",
                                                          "inputFocused": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused",
                                                          "inputRoot": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputRoot",
                                                          "listbox": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-listbox",
                                                          "loading": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-loading",
                                                          "noOptions": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-noOptions",
                                                          "option": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-option",
                                                          "paper": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-paper",
                                                          "popper": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-popper",
                                                          "popperDisablePortal": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-popperDisablePortal",
                                                          "popupIndicator": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-popupIndicator",
                                                          "popupIndicatorOpen": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-popupIndicatorOpen",
                                                          "root": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-root",
                                                          "tag": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-tag",
                                                          "tagSizeSmall": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-tagSizeSmall",
                                                        }
                                                      }
                                                      disableClearable={true}
                                                      disabled={false}
                                                      filterOptions={[Function]}
                                                      freeSolo={true}
                                                      getOptionLabel={[Function]}
                                                      getOptionSelected={[Function]}
                                                      id="multi-select-with-tags"
                                                      inputValue=""
                                                      loading={false}
                                                      loadingText="Loading.."
                                                      noOptionsText="standalone.selector.base-selector.no-options-text"
                                                      onChange={[Function]}
                                                      onInputChange={[Function]}
                                                      options={Array []}
                                                      renderInput={[Function]}
                                                      value=""
                                                    >
                                                      <div
                                                        aria-expanded={false}
                                                        aria-owns={null}
                                                        className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-root"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        onMouseDown={[Function]}
                                                        role="combobox"
                                                      >
                                                        <ForwardRef(TextFieldWithHelpInner)
                                                          InputLabelProps={
                                                            Object {
                                                              "htmlFor": "multi-select-with-tags",
                                                              "id": "multi-select-with-tags-label",
                                                            }
                                                          }
                                                          InputProps={
                                                            Object {
                                                              "className": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputRoot",
                                                              "endAdornment": <div
                                                                className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-endAdornment"
                                                              />,
                                                              "ref": [Function],
                                                              "startAdornment": <Memo
                                                                color="primary"
                                                              />,
                                                              "type": "search",
                                                            }
                                                          }
                                                          disabled={false}
                                                          fullWidth={true}
                                                          id="multi-select-with-tags"
                                                          inputProps={
                                                            Object {
                                                              "aria-activedescendant": null,
                                                              "aria-autocomplete": "both",
                                                              "aria-controls": null,
                                                              "autoCapitalize": "none",
                                                              "autoComplete": "off",
                                                              "className": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused",
                                                              "disabled": false,
                                                              "id": "multi-select-with-tags",
                                                              "onBlur": [Function],
                                                              "onChange": [Function],
                                                              "onFocus": [Function],
                                                              "onMouseDown": [Function],
                                                              "ref": Object {
                                                                "current": <input
                                                                  aria-autocomplete="both"
                                                                  aria-invalid="false"
                                                                  autocapitalize="none"
                                                                  autocomplete="off"
                                                                  class="standalone-selector--selector-multi-with-tags-MuiInputBase-input standalone-selector--selector-multi-with-tags-MuiInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-46 standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedStart standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-with-tags-MuiInputBase-inputTypeSearch standalone-selector--selector-multi-with-tags-MuiInput-inputTypeSearch"
                                                                  id="multi-select-with-tags"
                                                                  spellcheck="false"
                                                                  type="search"
                                                                  value=""
                                                                />,
                                                              },
                                                              "spellCheck": "false",
                                                              "value": "",
                                                            }
                                                          }
                                                          openInfo={[Function]}
                                                        >
                                                          <WithStyles(ForwardRef(TextField))
                                                            InputLabelProps={
                                                              Object {
                                                                "htmlFor": "multi-select-with-tags",
                                                                "id": "multi-select-with-tags-label",
                                                              }
                                                            }
                                                            InputProps={
                                                              Object {
                                                                "className": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputRoot",
                                                                "classes": Object {
                                                                  "input": "standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-46",
                                                                  "multiline": "standalone-selector--selector-multi-with-tags-CcUIKitInput-multiline-36",
                                                                  "root": "standalone-selector--selector-multi-with-tags-CcUIKitInput-root-34",
                                                                },
                                                                "endAdornment": <React.Fragment>
                                                                  <WithStyles(ForwardRef(InputAdornment))
                                                                    position="end"
                                                                  >
                                                                    <WithStyles(ForwardRef(IconButton))
                                                                      onClick={[Function]}
                                                                    >
                                                                      <Memo
                                                                        color="disabled"
                                                                      />
                                                                    </WithStyles(ForwardRef(IconButton))>
                                                                  </WithStyles(ForwardRef(InputAdornment))>
                                                                </React.Fragment>,
                                                                "ref": [Function],
                                                                "startAdornment": <Memo
                                                                  color="primary"
                                                                />,
                                                                "type": "search",
                                                              }
                                                            }
                                                            disabled={false}
                                                            fullWidth={true}
                                                            id="multi-select-with-tags"
                                                            inputProps={
                                                              Object {
                                                                "aria-activedescendant": null,
                                                                "aria-autocomplete": "both",
                                                                "aria-controls": null,
                                                                "autoCapitalize": "none",
                                                                "autoComplete": "off",
                                                                "className": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused",
                                                                "disabled": false,
                                                                "id": "multi-select-with-tags",
                                                                "onBlur": [Function],
                                                                "onChange": [Function],
                                                                "onFocus": [Function],
                                                                "onMouseDown": [Function],
                                                                "ref": Object {
                                                                  "current": <input
                                                                    aria-autocomplete="both"
                                                                    aria-invalid="false"
                                                                    autocapitalize="none"
                                                                    autocomplete="off"
                                                                    class="standalone-selector--selector-multi-with-tags-MuiInputBase-input standalone-selector--selector-multi-with-tags-MuiInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-46 standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedStart standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-with-tags-MuiInputBase-inputTypeSearch standalone-selector--selector-multi-with-tags-MuiInput-inputTypeSearch"
                                                                    id="multi-select-with-tags"
                                                                    spellcheck="false"
                                                                    type="search"
                                                                    value=""
                                                                  />,
                                                                },
                                                                "spellCheck": "false",
                                                                "value": "",
                                                              }
                                                            }
                                                          >
                                                            <ForwardRef(TextField)
                                                              InputLabelProps={
                                                                Object {
                                                                  "htmlFor": "multi-select-with-tags",
                                                                  "id": "multi-select-with-tags-label",
                                                                }
                                                              }
                                                              InputProps={
                                                                Object {
                                                                  "className": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputRoot",
                                                                  "classes": Object {
                                                                    "input": "standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-46",
                                                                    "multiline": "standalone-selector--selector-multi-with-tags-CcUIKitInput-multiline-36",
                                                                    "root": "standalone-selector--selector-multi-with-tags-CcUIKitInput-root-34",
                                                                  },
                                                                  "endAdornment": <React.Fragment>
                                                                    <WithStyles(ForwardRef(InputAdornment))
                                                                      position="end"
                                                                    >
                                                                      <WithStyles(ForwardRef(IconButton))
                                                                        onClick={[Function]}
                                                                      >
                                                                        <Memo
                                                                          color="disabled"
                                                                        />
                                                                      </WithStyles(ForwardRef(IconButton))>
                                                                    </WithStyles(ForwardRef(InputAdornment))>
                                                                  </React.Fragment>,
                                                                  "ref": [Function],
                                                                  "startAdornment": <Memo
                                                                    color="primary"
                                                                  />,
                                                                  "type": "search",
                                                                }
                                                              }
                                                              classes={
                                                                Object {
                                                                  "root": "standalone-selector--selector-multi-with-tags-MuiTextField-root",
                                                                }
                                                              }
                                                              disabled={false}
                                                              fullWidth={true}
                                                              id="multi-select-with-tags"
                                                              inputProps={
                                                                Object {
                                                                  "aria-activedescendant": null,
                                                                  "aria-autocomplete": "both",
                                                                  "aria-controls": null,
                                                                  "autoCapitalize": "none",
                                                                  "autoComplete": "off",
                                                                  "className": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused",
                                                                  "disabled": false,
                                                                  "id": "multi-select-with-tags",
                                                                  "onBlur": [Function],
                                                                  "onChange": [Function],
                                                                  "onFocus": [Function],
                                                                  "onMouseDown": [Function],
                                                                  "ref": Object {
                                                                    "current": <input
                                                                      aria-autocomplete="both"
                                                                      aria-invalid="false"
                                                                      autocapitalize="none"
                                                                      autocomplete="off"
                                                                      class="standalone-selector--selector-multi-with-tags-MuiInputBase-input standalone-selector--selector-multi-with-tags-MuiInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-46 standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedStart standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-with-tags-MuiInputBase-inputTypeSearch standalone-selector--selector-multi-with-tags-MuiInput-inputTypeSearch"
                                                                      id="multi-select-with-tags"
                                                                      spellcheck="false"
                                                                      type="search"
                                                                      value=""
                                                                    />,
                                                                  },
                                                                  "spellCheck": "false",
                                                                  "value": "",
                                                                }
                                                              }
                                                            >
                                                              <WithStyles(ForwardRef(FormControl))
                                                                className="standalone-selector--selector-multi-with-tags-MuiTextField-root"
                                                                color="primary"
                                                                disabled={false}
                                                                error={false}
                                                                fullWidth={true}
                                                                required={false}
                                                                variant="standard"
                                                              >
                                                                <ForwardRef(FormControl)
                                                                  className="standalone-selector--selector-multi-with-tags-MuiTextField-root"
                                                                  classes={
                                                                    Object {
                                                                      "fullWidth": "standalone-selector--selector-multi-with-tags-MuiFormControl-fullWidth",
                                                                      "marginDense": "standalone-selector--selector-multi-with-tags-MuiFormControl-marginDense",
                                                                      "marginNormal": "standalone-selector--selector-multi-with-tags-MuiFormControl-marginNormal",
                                                                      "root": "standalone-selector--selector-multi-with-tags-MuiFormControl-root",
                                                                    }
                                                                  }
                                                                  color="primary"
                                                                  disabled={false}
                                                                  error={false}
                                                                  fullWidth={true}
                                                                  required={false}
                                                                  variant="standard"
                                                                >
                                                                  <div
                                                                    className="standalone-selector--selector-multi-with-tags-MuiFormControl-root standalone-selector--selector-multi-with-tags-MuiTextField-root standalone-selector--selector-multi-with-tags-MuiFormControl-fullWidth"
                                                                  >
                                                                    <WithStyles(ForwardRef(Input))
                                                                      autoFocus={false}
                                                                      className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputRoot"
                                                                      classes={
                                                                        Object {
                                                                          "input": "standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-46",
                                                                          "multiline": "standalone-selector--selector-multi-with-tags-CcUIKitInput-multiline-36",
                                                                          "root": "standalone-selector--selector-multi-with-tags-CcUIKitInput-root-34",
                                                                        }
                                                                      }
                                                                      endAdornment={
                                                                        <React.Fragment>
                                                                          <WithStyles(ForwardRef(InputAdornment))
                                                                            position="end"
                                                                          >
                                                                            <WithStyles(ForwardRef(IconButton))
                                                                              onClick={[Function]}
                                                                            >
                                                                              <Memo
                                                                                color="disabled"
                                                                              />
                                                                            </WithStyles(ForwardRef(IconButton))>
                                                                          </WithStyles(ForwardRef(InputAdornment))>
                                                                        </React.Fragment>
                                                                      }
                                                                      fullWidth={true}
                                                                      id="multi-select-with-tags"
                                                                      inputProps={
                                                                        Object {
                                                                          "aria-activedescendant": null,
                                                                          "aria-autocomplete": "both",
                                                                          "aria-controls": null,
                                                                          "autoCapitalize": "none",
                                                                          "autoComplete": "off",
                                                                          "className": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused",
                                                                          "disabled": false,
                                                                          "id": "multi-select-with-tags",
                                                                          "onBlur": [Function],
                                                                          "onChange": [Function],
                                                                          "onFocus": [Function],
                                                                          "onMouseDown": [Function],
                                                                          "ref": Object {
                                                                            "current": <input
                                                                              aria-autocomplete="both"
                                                                              aria-invalid="false"
                                                                              autocapitalize="none"
                                                                              autocomplete="off"
                                                                              class="standalone-selector--selector-multi-with-tags-MuiInputBase-input standalone-selector--selector-multi-with-tags-MuiInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-46 standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedStart standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-with-tags-MuiInputBase-inputTypeSearch standalone-selector--selector-multi-with-tags-MuiInput-inputTypeSearch"
                                                                              id="multi-select-with-tags"
                                                                              spellcheck="false"
                                                                              type="search"
                                                                              value=""
                                                                            />,
                                                                          },
                                                                          "spellCheck": "false",
                                                                          "value": "",
                                                                        }
                                                                      }
                                                                      multiline={false}
                                                                      startAdornment={
                                                                        <Memo
                                                                          color="primary"
                                                                        />
                                                                      }
                                                                      type="search"
                                                                    >
                                                                      <ForwardRef(Input)
                                                                        autoFocus={false}
                                                                        className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputRoot"
                                                                        classes={
                                                                          Object {
                                                                            "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiInput-colorSecondary",
                                                                            "disabled": "Mui-disabled",
                                                                            "error": "Mui-error",
                                                                            "focused": "Mui-focused",
                                                                            "formControl": "standalone-selector--selector-multi-with-tags-MuiInput-formControl",
                                                                            "fullWidth": "standalone-selector--selector-multi-with-tags-MuiInput-fullWidth",
                                                                            "input": "standalone-selector--selector-multi-with-tags-MuiInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-46",
                                                                            "inputMarginDense": "standalone-selector--selector-multi-with-tags-MuiInput-inputMarginDense",
                                                                            "inputMultiline": "standalone-selector--selector-multi-with-tags-MuiInput-inputMultiline",
                                                                            "inputTypeSearch": "standalone-selector--selector-multi-with-tags-MuiInput-inputTypeSearch",
                                                                            "marginDense": "standalone-selector--selector-multi-with-tags-MuiInput-marginDense",
                                                                            "multiline": "standalone-selector--selector-multi-with-tags-MuiInput-multiline standalone-selector--selector-multi-with-tags-CcUIKitInput-multiline-36",
                                                                            "root": "standalone-selector--selector-multi-with-tags-MuiInput-root standalone-selector--selector-multi-with-tags-CcUIKitInput-root-34",
                                                                            "underline": "standalone-selector--selector-multi-with-tags-MuiInput-underline",
                                                                          }
                                                                        }
                                                                        endAdornment={
                                                                          <React.Fragment>
                                                                            <WithStyles(ForwardRef(InputAdornment))
                                                                              position="end"
                                                                            >
                                                                              <WithStyles(ForwardRef(IconButton))
                                                                                onClick={[Function]}
                                                                              >
                                                                                <Memo
                                                                                  color="disabled"
                                                                                />
                                                                              </WithStyles(ForwardRef(IconButton))>
                                                                            </WithStyles(ForwardRef(InputAdornment))>
                                                                          </React.Fragment>
                                                                        }
                                                                        fullWidth={true}
                                                                        id="multi-select-with-tags"
                                                                        inputProps={
                                                                          Object {
                                                                            "aria-activedescendant": null,
                                                                            "aria-autocomplete": "both",
                                                                            "aria-controls": null,
                                                                            "autoCapitalize": "none",
                                                                            "autoComplete": "off",
                                                                            "className": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused",
                                                                            "disabled": false,
                                                                            "id": "multi-select-with-tags",
                                                                            "onBlur": [Function],
                                                                            "onChange": [Function],
                                                                            "onFocus": [Function],
                                                                            "onMouseDown": [Function],
                                                                            "ref": Object {
                                                                              "current": <input
                                                                                aria-autocomplete="both"
                                                                                aria-invalid="false"
                                                                                autocapitalize="none"
                                                                                autocomplete="off"
                                                                                class="standalone-selector--selector-multi-with-tags-MuiInputBase-input standalone-selector--selector-multi-with-tags-MuiInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-46 standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedStart standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-with-tags-MuiInputBase-inputTypeSearch standalone-selector--selector-multi-with-tags-MuiInput-inputTypeSearch"
                                                                                id="multi-select-with-tags"
                                                                                spellcheck="false"
                                                                                type="search"
                                                                                value=""
                                                                              />,
                                                                            },
                                                                            "spellCheck": "false",
                                                                            "value": "",
                                                                          }
                                                                        }
                                                                        multiline={false}
                                                                        startAdornment={
                                                                          <Memo
                                                                            color="primary"
                                                                          />
                                                                        }
                                                                        type="search"
                                                                      >
                                                                        <WithStyles(ForwardRef(InputBase))
                                                                          autoFocus={false}
                                                                          className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputRoot"
                                                                          classes={
                                                                            Object {
                                                                              "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiInput-colorSecondary",
                                                                              "disabled": "Mui-disabled",
                                                                              "error": "Mui-error",
                                                                              "focused": "Mui-focused",
                                                                              "formControl": "standalone-selector--selector-multi-with-tags-MuiInput-formControl",
                                                                              "fullWidth": "standalone-selector--selector-multi-with-tags-MuiInput-fullWidth",
                                                                              "input": "standalone-selector--selector-multi-with-tags-MuiInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-46",
                                                                              "inputMarginDense": "standalone-selector--selector-multi-with-tags-MuiInput-inputMarginDense",
                                                                              "inputMultiline": "standalone-selector--selector-multi-with-tags-MuiInput-inputMultiline",
                                                                              "inputTypeSearch": "standalone-selector--selector-multi-with-tags-MuiInput-inputTypeSearch",
                                                                              "marginDense": "standalone-selector--selector-multi-with-tags-MuiInput-marginDense",
                                                                              "multiline": "standalone-selector--selector-multi-with-tags-MuiInput-multiline standalone-selector--selector-multi-with-tags-CcUIKitInput-multiline-36",
                                                                              "root": "standalone-selector--selector-multi-with-tags-MuiInput-root standalone-selector--selector-multi-with-tags-CcUIKitInput-root-34 standalone-selector--selector-multi-with-tags-MuiInput-underline",
                                                                              "underline": null,
                                                                            }
                                                                          }
                                                                          endAdornment={
                                                                            <React.Fragment>
                                                                              <WithStyles(ForwardRef(InputAdornment))
                                                                                position="end"
                                                                              >
                                                                                <WithStyles(ForwardRef(IconButton))
                                                                                  onClick={[Function]}
                                                                                >
                                                                                  <Memo
                                                                                    color="disabled"
                                                                                  />
                                                                                </WithStyles(ForwardRef(IconButton))>
                                                                              </WithStyles(ForwardRef(InputAdornment))>
                                                                            </React.Fragment>
                                                                          }
                                                                          fullWidth={true}
                                                                          id="multi-select-with-tags"
                                                                          inputComponent="input"
                                                                          inputProps={
                                                                            Object {
                                                                              "aria-activedescendant": null,
                                                                              "aria-autocomplete": "both",
                                                                              "aria-controls": null,
                                                                              "autoCapitalize": "none",
                                                                              "autoComplete": "off",
                                                                              "className": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused",
                                                                              "disabled": false,
                                                                              "id": "multi-select-with-tags",
                                                                              "onBlur": [Function],
                                                                              "onChange": [Function],
                                                                              "onFocus": [Function],
                                                                              "onMouseDown": [Function],
                                                                              "ref": Object {
                                                                                "current": <input
                                                                                  aria-autocomplete="both"
                                                                                  aria-invalid="false"
                                                                                  autocapitalize="none"
                                                                                  autocomplete="off"
                                                                                  class="standalone-selector--selector-multi-with-tags-MuiInputBase-input standalone-selector--selector-multi-with-tags-MuiInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-46 standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedStart standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-with-tags-MuiInputBase-inputTypeSearch standalone-selector--selector-multi-with-tags-MuiInput-inputTypeSearch"
                                                                                  id="multi-select-with-tags"
                                                                                  spellcheck="false"
                                                                                  type="search"
                                                                                  value=""
                                                                                />,
                                                                              },
                                                                              "spellCheck": "false",
                                                                              "value": "",
                                                                            }
                                                                          }
                                                                          multiline={false}
                                                                          startAdornment={
                                                                            <Memo
                                                                              color="primary"
                                                                            />
                                                                          }
                                                                          type="search"
                                                                        >
                                                                          <ForwardRef(InputBase)
                                                                            autoFocus={false}
                                                                            className="standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputRoot"
                                                                            classes={
                                                                              Object {
                                                                                "adornedEnd": "standalone-selector--selector-multi-with-tags-MuiInputBase-adornedEnd",
                                                                                "adornedStart": "standalone-selector--selector-multi-with-tags-MuiInputBase-adornedStart",
                                                                                "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiInputBase-colorSecondary standalone-selector--selector-multi-with-tags-MuiInput-colorSecondary",
                                                                                "disabled": "Mui-disabled Mui-disabled",
                                                                                "error": "Mui-error Mui-error",
                                                                                "focused": "Mui-focused Mui-focused",
                                                                                "formControl": "standalone-selector--selector-multi-with-tags-MuiInputBase-formControl standalone-selector--selector-multi-with-tags-MuiInput-formControl",
                                                                                "fullWidth": "standalone-selector--selector-multi-with-tags-MuiInputBase-fullWidth standalone-selector--selector-multi-with-tags-MuiInput-fullWidth",
                                                                                "input": "standalone-selector--selector-multi-with-tags-MuiInputBase-input standalone-selector--selector-multi-with-tags-MuiInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-46",
                                                                                "inputAdornedEnd": "standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedEnd",
                                                                                "inputAdornedStart": "standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedStart",
                                                                                "inputHiddenLabel": "standalone-selector--selector-multi-with-tags-MuiInputBase-inputHiddenLabel",
                                                                                "inputMarginDense": "standalone-selector--selector-multi-with-tags-MuiInputBase-inputMarginDense standalone-selector--selector-multi-with-tags-MuiInput-inputMarginDense",
                                                                                "inputMultiline": "standalone-selector--selector-multi-with-tags-MuiInputBase-inputMultiline standalone-selector--selector-multi-with-tags-MuiInput-inputMultiline",
                                                                                "inputTypeSearch": "standalone-selector--selector-multi-with-tags-MuiInputBase-inputTypeSearch standalone-selector--selector-multi-with-tags-MuiInput-inputTypeSearch",
                                                                                "marginDense": "standalone-selector--selector-multi-with-tags-MuiInputBase-marginDense standalone-selector--selector-multi-with-tags-MuiInput-marginDense",
                                                                                "multiline": "standalone-selector--selector-multi-with-tags-MuiInputBase-multiline standalone-selector--selector-multi-with-tags-MuiInput-multiline standalone-selector--selector-multi-with-tags-CcUIKitInput-multiline-36",
                                                                                "root": "standalone-selector--selector-multi-with-tags-MuiInputBase-root standalone-selector--selector-multi-with-tags-MuiInput-root standalone-selector--selector-multi-with-tags-CcUIKitInput-root-34 standalone-selector--selector-multi-with-tags-MuiInput-underline",
                                                                              }
                                                                            }
                                                                            endAdornment={
                                                                              <React.Fragment>
                                                                                <WithStyles(ForwardRef(InputAdornment))
                                                                                  position="end"
                                                                                >
                                                                                  <WithStyles(ForwardRef(IconButton))
                                                                                    onClick={[Function]}
                                                                                  >
                                                                                    <Memo
                                                                                      color="disabled"
                                                                                    />
                                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                                </WithStyles(ForwardRef(InputAdornment))>
                                                                              </React.Fragment>
                                                                            }
                                                                            fullWidth={true}
                                                                            id="multi-select-with-tags"
                                                                            inputComponent="input"
                                                                            inputProps={
                                                                              Object {
                                                                                "aria-activedescendant": null,
                                                                                "aria-autocomplete": "both",
                                                                                "aria-controls": null,
                                                                                "autoCapitalize": "none",
                                                                                "autoComplete": "off",
                                                                                "className": "standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused",
                                                                                "disabled": false,
                                                                                "id": "multi-select-with-tags",
                                                                                "onBlur": [Function],
                                                                                "onChange": [Function],
                                                                                "onFocus": [Function],
                                                                                "onMouseDown": [Function],
                                                                                "ref": Object {
                                                                                  "current": <input
                                                                                    aria-autocomplete="both"
                                                                                    aria-invalid="false"
                                                                                    autocapitalize="none"
                                                                                    autocomplete="off"
                                                                                    class="standalone-selector--selector-multi-with-tags-MuiInputBase-input standalone-selector--selector-multi-with-tags-MuiInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-46 standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedStart standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-with-tags-MuiInputBase-inputTypeSearch standalone-selector--selector-multi-with-tags-MuiInput-inputTypeSearch"
                                                                                    id="multi-select-with-tags"
                                                                                    spellcheck="false"
                                                                                    type="search"
                                                                                    value=""
                                                                                  />,
                                                                                },
                                                                                "spellCheck": "false",
                                                                                "value": "",
                                                                              }
                                                                            }
                                                                            multiline={false}
                                                                            startAdornment={
                                                                              <Memo
                                                                                color="primary"
                                                                              />
                                                                            }
                                                                            type="search"
                                                                          >
                                                                            <div
                                                                              className="standalone-selector--selector-multi-with-tags-MuiInputBase-root standalone-selector--selector-multi-with-tags-MuiInput-root standalone-selector--selector-multi-with-tags-CcUIKitInput-root-34 standalone-selector--selector-multi-with-tags-MuiInput-underline standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputRoot standalone-selector--selector-multi-with-tags-MuiInputBase-fullWidth standalone-selector--selector-multi-with-tags-MuiInput-fullWidth standalone-selector--selector-multi-with-tags-MuiInputBase-formControl standalone-selector--selector-multi-with-tags-MuiInput-formControl standalone-selector--selector-multi-with-tags-MuiInputBase-adornedStart standalone-selector--selector-multi-with-tags-MuiInputBase-adornedEnd"
                                                                              onClick={[Function]}
                                                                            >
                                                                              <ForwardRef(SearchIcon)
                                                                                color="primary"
                                                                              >
                                                                                <WithStyles(ForwardRef(SvgIcon))
                                                                                  color="primary"
                                                                                >
                                                                                  <ForwardRef(SvgIcon)
                                                                                    classes={
                                                                                      Object {
                                                                                        "colorAction": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorAction",
                                                                                        "colorDisabled": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorDisabled",
                                                                                        "colorError": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorError",
                                                                                        "colorPrimary": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorPrimary",
                                                                                        "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorSecondary",
                                                                                        "fontSizeInherit": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-fontSizeInherit",
                                                                                        "fontSizeLarge": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-fontSizeLarge",
                                                                                        "fontSizeSmall": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-fontSizeSmall",
                                                                                        "root": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-root",
                                                                                      }
                                                                                    }
                                                                                    color="primary"
                                                                                  >
                                                                                    <svg
                                                                                      aria-hidden={true}
                                                                                      className="standalone-selector--selector-multi-with-tags-MuiSvgIcon-root standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorPrimary"
                                                                                      focusable="false"
                                                                                      viewBox="0 0 24 24"
                                                                                    >
                                                                                      <path
                                                                                        d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
                                                                                      />
                                                                                    </svg>
                                                                                  </ForwardRef(SvgIcon)>
                                                                                </WithStyles(ForwardRef(SvgIcon))>
                                                                              </ForwardRef(SearchIcon)>
                                                                              <input
                                                                                aria-activedescendant={null}
                                                                                aria-autocomplete="both"
                                                                                aria-controls={null}
                                                                                aria-invalid={false}
                                                                                autoCapitalize="none"
                                                                                autoComplete="off"
                                                                                autoFocus={false}
                                                                                className="standalone-selector--selector-multi-with-tags-MuiInputBase-input standalone-selector--selector-multi-with-tags-MuiInput-input standalone-selector--selector-multi-with-tags-CcUIKitInput-input-35 standalone-selector--selector-multi-with-tags-CcUIKitInput-input-46 standalone-selector--selector-multi-with-tags-MuiAutocomplete-input standalone-selector--selector-multi-with-tags-MuiAutocomplete-inputFocused standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedStart standalone-selector--selector-multi-with-tags-MuiInputBase-inputAdornedEnd standalone-selector--selector-multi-with-tags-MuiInputBase-inputTypeSearch standalone-selector--selector-multi-with-tags-MuiInput-inputTypeSearch"
                                                                                disabled={false}
                                                                                id="multi-select-with-tags"
                                                                                onAnimationStart={[Function]}
                                                                                onBlur={[Function]}
                                                                                onChange={[Function]}
                                                                                onFocus={[Function]}
                                                                                onMouseDown={[Function]}
                                                                                required={false}
                                                                                spellCheck="false"
                                                                                type="search"
                                                                                value=""
                                                                              />
                                                                              <WithStyles(ForwardRef(InputAdornment))
                                                                                position="end"
                                                                              >
                                                                                <ForwardRef(InputAdornment)
                                                                                  classes={
                                                                                    Object {
                                                                                      "disablePointerEvents": "standalone-selector--selector-multi-with-tags-MuiInputAdornment-disablePointerEvents",
                                                                                      "filled": "standalone-selector--selector-multi-with-tags-MuiInputAdornment-filled",
                                                                                      "hiddenLabel": "standalone-selector--selector-multi-with-tags-MuiInputAdornment-hiddenLabel",
                                                                                      "marginDense": "standalone-selector--selector-multi-with-tags-MuiInputAdornment-marginDense",
                                                                                      "positionEnd": "standalone-selector--selector-multi-with-tags-MuiInputAdornment-positionEnd",
                                                                                      "positionStart": "standalone-selector--selector-multi-with-tags-MuiInputAdornment-positionStart",
                                                                                      "root": "standalone-selector--selector-multi-with-tags-MuiInputAdornment-root",
                                                                                    }
                                                                                  }
                                                                                  position="end"
                                                                                >
                                                                                  <div
                                                                                    className="standalone-selector--selector-multi-with-tags-MuiInputAdornment-root standalone-selector--selector-multi-with-tags-MuiInputAdornment-positionEnd"
                                                                                  >
                                                                                    <WithStyles(ForwardRef(IconButton))
                                                                                      onClick={[Function]}
                                                                                    >
                                                                                      <ForwardRef(IconButton)
                                                                                        classes={
                                                                                          Object {
                                                                                            "colorInherit": "standalone-selector--selector-multi-with-tags-MuiIconButton-colorInherit",
                                                                                            "colorPrimary": "standalone-selector--selector-multi-with-tags-MuiIconButton-colorPrimary",
                                                                                            "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiIconButton-colorSecondary",
                                                                                            "disabled": "Mui-disabled",
                                                                                            "edgeEnd": "standalone-selector--selector-multi-with-tags-MuiIconButton-edgeEnd",
                                                                                            "edgeStart": "standalone-selector--selector-multi-with-tags-MuiIconButton-edgeStart",
                                                                                            "label": "standalone-selector--selector-multi-with-tags-MuiIconButton-label",
                                                                                            "root": "standalone-selector--selector-multi-with-tags-MuiIconButton-root",
                                                                                            "sizeSmall": "standalone-selector--selector-multi-with-tags-MuiIconButton-sizeSmall",
                                                                                          }
                                                                                        }
                                                                                        onClick={[Function]}
                                                                                      >
                                                                                        <WithStyles(ForwardRef(ButtonBase))
                                                                                          centerRipple={true}
                                                                                          className="standalone-selector--selector-multi-with-tags-MuiIconButton-root"
                                                                                          disabled={false}
                                                                                          focusRipple={true}
                                                                                          onClick={[Function]}
                                                                                        >
                                                                                          <ForwardRef(ButtonBase)
                                                                                            centerRipple={true}
                                                                                            className="standalone-selector--selector-multi-with-tags-MuiIconButton-root"
                                                                                            classes={
                                                                                              Object {
                                                                                                "disabled": "Mui-disabled",
                                                                                                "focusVisible": "Mui-focusVisible",
                                                                                                "root": "standalone-selector--selector-multi-with-tags-MuiButtonBase-root",
                                                                                              }
                                                                                            }
                                                                                            disabled={false}
                                                                                            focusRipple={true}
                                                                                            onClick={[Function]}
                                                                                          >
                                                                                            <button
                                                                                              className="standalone-selector--selector-multi-with-tags-MuiButtonBase-root standalone-selector--selector-multi-with-tags-MuiIconButton-root"
                                                                                              disabled={false}
                                                                                              onBlur={[Function]}
                                                                                              onClick={[Function]}
                                                                                              onDragLeave={[Function]}
                                                                                              onFocus={[Function]}
                                                                                              onKeyDown={[Function]}
                                                                                              onKeyUp={[Function]}
                                                                                              onMouseDown={[Function]}
                                                                                              onMouseLeave={[Function]}
                                                                                              onMouseUp={[Function]}
                                                                                              onTouchEnd={[Function]}
                                                                                              onTouchMove={[Function]}
                                                                                              onTouchStart={[Function]}
                                                                                              tabIndex={0}
                                                                                              type="button"
                                                                                            >
                                                                                              <span
                                                                                                className="standalone-selector--selector-multi-with-tags-MuiIconButton-label"
                                                                                              >
                                                                                                <ForwardRef(InfoIcon)
                                                                                                  color="disabled"
                                                                                                >
                                                                                                  <WithStyles(ForwardRef(SvgIcon))
                                                                                                    color="disabled"
                                                                                                  >
                                                                                                    <ForwardRef(SvgIcon)
                                                                                                      classes={
                                                                                                        Object {
                                                                                                          "colorAction": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorAction",
                                                                                                          "colorDisabled": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorDisabled",
                                                                                                          "colorError": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorError",
                                                                                                          "colorPrimary": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorPrimary",
                                                                                                          "colorSecondary": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorSecondary",
                                                                                                          "fontSizeInherit": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-fontSizeInherit",
                                                                                                          "fontSizeLarge": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-fontSizeLarge",
                                                                                                          "fontSizeSmall": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-fontSizeSmall",
                                                                                                          "root": "standalone-selector--selector-multi-with-tags-MuiSvgIcon-root",
                                                                                                        }
                                                                                                      }
                                                                                                      color="disabled"
                                                                                                    >
                                                                                                      <svg
                                                                                                        aria-hidden={true}
                                                                                                        className="standalone-selector--selector-multi-with-tags-MuiSvgIcon-root standalone-selector--selector-multi-with-tags-MuiSvgIcon-colorDisabled"
                                                                                                        focusable="false"
                                                                                                        viewBox="0 0 24 24"
                                                                                                      >
                                                                                                        <path
                                                                                                          d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"
                                                                                                        />
                                                                                                      </svg>
                                                                                                    </ForwardRef(SvgIcon)>
                                                                                                  </WithStyles(ForwardRef(SvgIcon))>
                                                                                                </ForwardRef(InfoIcon)>
                                                                                              </span>
                                                                                              <WithStyles(memo)
                                                                                                center={true}
                                                                                              >
                                                                                                <ForwardRef(TouchRipple)
                                                                                                  center={true}
                                                                                                  classes={
                                                                                                    Object {
                                                                                                      "child": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-child",
                                                                                                      "childLeaving": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-childLeaving",
                                                                                                      "childPulsate": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-childPulsate",
                                                                                                      "ripple": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-ripple",
                                                                                                      "ripplePulsate": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-ripplePulsate",
                                                                                                      "rippleVisible": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-rippleVisible",
                                                                                                      "root": "standalone-selector--selector-multi-with-tags-MuiTouchRipple-root",
                                                                                                    }
                                                                                                  }
                                                                                                >
                                                                                                  <span
                                                                                                    className="standalone-selector--selector-multi-with-tags-MuiTouchRipple-root"
                                                                                                  >
                                                                                                    <TransitionGroup
                                                                                                      childFactory={[Function]}
                                                                                                      component={null}
                                                                                                      exit={true}
                                                                                                    />
                                                                                                  </span>
                                                                                                </ForwardRef(TouchRipple)>
                                                                                              </WithStyles(memo)>
                                                                                            </button>
                                                                                          </ForwardRef(ButtonBase)>
                                                                                        </WithStyles(ForwardRef(ButtonBase))>
                                                                                      </ForwardRef(IconButton)>
                                                                                    </WithStyles(ForwardRef(IconButton))>
                                                                                  </div>
                                                                                </ForwardRef(InputAdornment)>
                                                                              </WithStyles(ForwardRef(InputAdornment))>
                                                                            </div>
                                                                          </ForwardRef(InputBase)>
                                                                        </WithStyles(ForwardRef(InputBase))>
                                                                      </ForwardRef(Input)>
                                                                    </WithStyles(ForwardRef(Input))>
                                                                  </div>
                                                                </ForwardRef(FormControl)>
                                                              </WithStyles(ForwardRef(FormControl))>
                                                            </ForwardRef(TextField)>
                                                          </WithStyles(ForwardRef(TextField))>
                                                        </ForwardRef(TextFieldWithHelpInner)>
                                                      </div>
                                                    </ForwardRef(Autocomplete)>
                                                  </WithStyles(ForwardRef(Autocomplete))>
                                                </div>
                                              </ForwardRef(Typography)>
                                            </WithStyles(ForwardRef(Typography))>
                                          </Memo(MultiSelectWithoutGroup)>
                                        </div>
                                      </ForwardRef(Typography)>
                                    </WithStyles(ForwardRef(Typography))>
                                  </div>
                                </Memo(MultiSelectWithTags)>
                              </Component>
                            </StylesProvider>
                          </AdvThemeSelector>
                        </ThemeSelector>
                      </Memo(DialogContextProvider)>
                    </Router>
                  </Memo(PermissionContextProvider)>
                </QueryClientProvider>
              </ThemeProvider>
            </Memo(ThemeProvider)>
          </MuiPickersUtilsProvider>
        </Memo(MuiPickerUtils)>
      </I18nextProvider>
    </Memo(CCI18nProvider)>
  </Suspense>
</Memo(ComponentsCareFramework)>
`;

exports[`Storyshots Standalone/Selector MultiWithoutGroup 1`] = `
<Memo(ComponentsCareFramework)
  defaultTheme={[Function]}
>
  <Suspense
    fallback={<Memo(Loader) />}
  >
    <Memo(CCI18nProvider)>
      <I18nextProvider
        i18n={
          I18n {
            "addResource": [Function],
            "addResourceBundle": [Function],
            "addResources": [Function],
            "format": undefined,
            "getDataByLanguage": [Function],
            "getResource": [Function],
            "getResourceBundle": [Function],
            "hasResourceBundle": [Function],
            "isInitialized": true,
            "isLanguageChangingTo": undefined,
            "language": "en",
            "languages": Array [
              "en",
            ],
            "logger": Logger {
              "debug": true,
              "logger": Object {
                "error": [Function],
                "log": [Function],
                "output": [Function],
                "type": "logger",
                "warn": [Function],
              },
              "options": Object {
                "appendNamespaceToCIMode": false,
                "appendNamespaceToMissingKey": false,
                "contextSeparator": "_",
                "debug": true,
                "defaultNS": "translation",
                "fallbackLng": Array [
                  "en",
                ],
                "fallbackNS": false,
                "initImmediate": false,
                "interpolation": Object {
                  "escapeValue": false,
                },
                "joinArrays": false,
                "keySeparator": ".",
                "load": "all",
                "missingInterpolationHandler": false,
                "missingKeyHandler": false,
                "nonExplicitSupportedLngs": true,
                "nonExplicitWhitelist": false,
                "ns": Array [],
                "nsSeparator": ":",
                "overloadTranslationOptionHandler": [Function],
                "parseMissingKeyHandler": false,
                "partialBundledLanguages": false,
                "pluralSeparator": "_",
                "postProcess": false,
                "postProcessPassResolved": false,
                "preload": false,
                "resources": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
                "returnEmptyString": true,
                "returnNull": true,
                "returnObjects": false,
                "returnedObjectHandler": false,
                "saveMissing": false,
                "saveMissingPlurals": true,
                "saveMissingTo": "fallback",
                "simplifyPluralSuffix": true,
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "updateMissing": false,
                "whitelist": false,
              },
              "prefix": "i18next:",
            },
            "modules": Object {
              "external": Array [],
              "languageDetector": [Function],
            },
            "observers": Object {
              "languageChanged": Array [
                [Function],
                [Function],
                [Function],
                [Function],
              ],
            },
            "options": Object {
              "appendNamespaceToCIMode": false,
              "appendNamespaceToMissingKey": false,
              "contextSeparator": "_",
              "debug": true,
              "defaultNS": "translation",
              "fallbackLng": Array [
                "en",
              ],
              "fallbackNS": false,
              "initImmediate": false,
              "interpolation": Object {
                "escapeValue": false,
              },
              "joinArrays": false,
              "keySeparator": ".",
              "load": "all",
              "missingInterpolationHandler": false,
              "missingKeyHandler": false,
              "nonExplicitSupportedLngs": true,
              "nonExplicitWhitelist": false,
              "ns": Array [],
              "nsSeparator": ":",
              "overloadTranslationOptionHandler": [Function],
              "parseMissingKeyHandler": false,
              "partialBundledLanguages": false,
              "pluralSeparator": "_",
              "postProcess": false,
              "postProcessPassResolved": false,
              "preload": false,
              "resources": Object {
                "de": Object {},
                "en": Object {},
                "fr": Object {},
                "ru": Object {},
                "uz": Object {},
              },
              "returnEmptyString": true,
              "returnNull": true,
              "returnObjects": false,
              "returnedObjectHandler": false,
              "saveMissing": false,
              "saveMissingPlurals": true,
              "saveMissingTo": "fallback",
              "simplifyPluralSuffix": true,
              "supportedLngs": Array [
                "de",
                "en",
                "fr",
                "ru",
                "uz",
                "cimode",
              ],
              "updateMissing": false,
              "whitelist": false,
            },
            "removeResourceBundle": [Function],
            "reportNamespaces": ReportNamespaces {
              "usedNamespaces": Object {
                "translation": true,
              },
            },
            "services": Object {
              "backendConnector": Connector {
                "backend": null,
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::backendConnector:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::backendConnector:",
                },
                "observers": Object {
                  "*": Array [
                    [Function],
                  ],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "queue": Array [],
                "services": [Circular],
                "state": Object {},
                "store": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
              },
              "interpolator": Interpolator {
                "alwaysFormat": false,
                "escape": [Function],
                "escapeValue": false,
                "format": [Function],
                "formatSeparator": ",",
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::interpolator:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::interpolator:",
                },
                "maxReplaces": 1000,
                "nestingOptionsSeparator": ",",
                "nestingPrefix": "\\\\$t\\\\(",
                "nestingRegexp": /\\\\\\$t\\\\\\(\\(\\.\\+\\?\\)\\\\\\)/g,
                "nestingSuffix": "\\\\)",
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "{{",
                "regexp": /\\{\\{\\(\\.\\+\\?\\)\\}\\}/g,
                "regexpUnescape": /\\{\\{-\\(\\.\\+\\?\\)\\}\\}/g,
                "suffix": "}}",
                "unescapePrefix": "-",
                "unescapeSuffix": "",
                "useRawValueToEscape": false,
              },
              "languageDetector": Browser {
                "detectors": Object {
                  "cookie": Object {
                    "cacheUserLanguage": [Function],
                    "lookup": [Function],
                    "name": "cookie",
                  },
                  "htmlTag": Object {
                    "lookup": [Function],
                    "name": "htmlTag",
                  },
                  "localStorage": Object {
                    "cacheUserLanguage": [Function],
                    "lookup": [Function],
                    "name": "localStorage",
                  },
                  "navigator": Object {
                    "lookup": [Function],
                    "name": "navigator",
                  },
                  "path": Object {
                    "lookup": [Function],
                    "name": "path",
                  },
                  "querystring": Object {
                    "lookup": [Function],
                    "name": "querystring",
                  },
                  "sessionStorage": Object {
                    "cacheUserLanguage": [Function],
                    "lookup": [Function],
                    "name": "sessionStorage",
                  },
                  "subdomain": Object {
                    "lookup": [Function],
                    "name": "subdomain",
                  },
                },
                "i18nOptions": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "options": Object {
                  "caches": Array [
                    "localStorage",
                  ],
                  "excludeCacheFor": Array [
                    "cimode",
                  ],
                  "lookupCookie": "i18next",
                  "lookupLocalStorage": "i18nextLng",
                  "lookupQuerystring": "lng",
                  "lookupSessionStorage": "i18nextLng",
                  "order": Array [
                    "querystring",
                    "cookie",
                    "localStorage",
                    "sessionStorage",
                    "navigator",
                    "htmlTag",
                  ],
                },
                "services": [Circular],
                "type": "languageDetector",
              },
              "languageUtils": LanguageUtil {
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::languageUtils:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::languageUtils:",
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "whitelist": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
              },
              "logger": Logger {
                "debug": true,
                "logger": Object {
                  "error": [Function],
                  "log": [Function],
                  "output": [Function],
                  "type": "logger",
                  "warn": [Function],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "i18next:",
              },
              "pluralResolver": PluralResolver {
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::pluralResolver:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::pluralResolver:",
                },
                "options": Object {
                  "compatibilityJSON": undefined,
                  "prepend": "_",
                  "simplifyPluralSuffix": true,
                },
                "rules": Object {
                  "ach": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "af": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ak": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "am": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "an": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ar": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                      3,
                      11,
                      100,
                    ],
                    "plurals": [Function],
                  },
                  "arn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ast": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ay": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "az": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "be": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "bg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "br": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ca": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "cgg": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "cnr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "csb": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cy": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      8,
                    ],
                    "plurals": [Function],
                  },
                  "da": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "de": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dev": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dz": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "el": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "en": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "es": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "et": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fa": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "fi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fil": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ga": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      7,
                      11,
                    ],
                    "plurals": [Function],
                  },
                  "gd": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "gl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gun": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ha": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "he": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "hi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ht": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "hu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ia": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "id": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "is": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "it": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "iw": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "ja": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jbo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jv": Object {
                    "numbers": Array [
                      0,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ka": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kk": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "km": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ko": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ku": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "kw": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      4,
                    ],
                    "plurals": [Function],
                  },
                  "ky": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ln": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "lo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lt": Object {
                    "numbers": Array [
                      1,
                      2,
                      10,
                    ],
                    "plurals": [Function],
                  },
                  "lv": Object {
                    "numbers": Array [
                      1,
                      2,
                      0,
                    ],
                    "plurals": [Function],
                  },
                  "mai": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mfe": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ml": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mnk": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ms": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "mt": Object {
                    "numbers": Array [
                      1,
                      2,
                      11,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "nah": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ne": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "no": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nso": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "oc": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "or": Object {
                    "numbers": Array [
                      2,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "pa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pl": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "pms": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ps": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-BR": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-PT": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "rm": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ro": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "ru": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sah": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sco": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "se": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "si": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sl": Object {
                    "numbers": Array [
                      5,
                      1,
                      2,
                      3,
                    ],
                    "plurals": [Function],
                  },
                  "so": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "son": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sq": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "su": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sv": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sw": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ta": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "te": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "th": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ti": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tt": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ug": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "uk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "uz": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "vi": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "wa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "wo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "yo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "zh": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                },
              },
              "resourceStore": Object {
                "de": Object {},
                "en": Object {},
                "fr": Object {},
                "ru": Object {},
                "uz": Object {},
              },
              "utils": Object {
                "hasLoadedNamespace": [Function],
              },
            },
            "store": Object {
              "de": Object {},
              "en": Object {},
              "fr": Object {},
              "ru": Object {},
              "uz": Object {},
            },
            "translator": Translator {
              "backendConnector": Connector {
                "backend": null,
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::backendConnector:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::backendConnector:",
                },
                "observers": Object {
                  "*": Array [
                    [Function],
                  ],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "queue": Array [],
                "services": Object {
                  "backendConnector": [Circular],
                  "interpolator": Interpolator {
                    "alwaysFormat": false,
                    "escape": [Function],
                    "escapeValue": false,
                    "format": [Function],
                    "formatSeparator": ",",
                    "logger": Logger {
                      "debug": true,
                      "logger": Object {
                        "error": [Function],
                        "log": [Function],
                        "output": [Function],
                        "type": "logger",
                        "warn": [Function],
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "prefix": "i18next::interpolator:",
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "prefix": "i18next::interpolator:",
                    },
                    "maxReplaces": 1000,
                    "nestingOptionsSeparator": ",",
                    "nestingPrefix": "\\\\$t\\\\(",
                    "nestingRegexp": /\\\\\\$t\\\\\\(\\(\\.\\+\\?\\)\\\\\\)/g,
                    "nestingSuffix": "\\\\)",
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "{{",
                    "regexp": /\\{\\{\\(\\.\\+\\?\\)\\}\\}/g,
                    "regexpUnescape": /\\{\\{-\\(\\.\\+\\?\\)\\}\\}/g,
                    "suffix": "}}",
                    "unescapePrefix": "-",
                    "unescapeSuffix": "",
                    "useRawValueToEscape": false,
                  },
                  "languageDetector": Browser {
                    "detectors": Object {
                      "cookie": Object {
                        "cacheUserLanguage": [Function],
                        "lookup": [Function],
                        "name": "cookie",
                      },
                      "htmlTag": Object {
                        "lookup": [Function],
                        "name": "htmlTag",
                      },
                      "localStorage": Object {
                        "cacheUserLanguage": [Function],
                        "lookup": [Function],
                        "name": "localStorage",
                      },
                      "navigator": Object {
                        "lookup": [Function],
                        "name": "navigator",
                      },
                      "path": Object {
                        "lookup": [Function],
                        "name": "path",
                      },
                      "querystring": Object {
                        "lookup": [Function],
                        "name": "querystring",
                      },
                      "sessionStorage": Object {
                        "cacheUserLanguage": [Function],
                        "lookup": [Function],
                        "name": "sessionStorage",
                      },
                      "subdomain": Object {
                        "lookup": [Function],
                        "name": "subdomain",
                      },
                    },
                    "i18nOptions": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "options": Object {
                      "caches": Array [
                        "localStorage",
                      ],
                      "excludeCacheFor": Array [
                        "cimode",
                      ],
                      "lookupCookie": "i18next",
                      "lookupLocalStorage": "i18nextLng",
                      "lookupQuerystring": "lng",
                      "lookupSessionStorage": "i18nextLng",
                      "order": Array [
                        "querystring",
                        "cookie",
                        "localStorage",
                        "sessionStorage",
                        "navigator",
                        "htmlTag",
                      ],
                    },
                    "services": [Circular],
                    "type": "languageDetector",
                  },
                  "languageUtils": LanguageUtil {
                    "logger": Logger {
                      "debug": true,
                      "logger": Object {
                        "error": [Function],
                        "log": [Function],
                        "output": [Function],
                        "type": "logger",
                        "warn": [Function],
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "prefix": "i18next::languageUtils:",
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "prefix": "i18next::languageUtils:",
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "whitelist": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                  },
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next:",
                  },
                  "pluralResolver": PluralResolver {
                    "languageUtils": LanguageUtil {
                      "logger": Logger {
                        "debug": true,
                        "logger": Object {
                          "error": [Function],
                          "log": [Function],
                          "output": [Function],
                          "type": "logger",
                          "warn": [Function],
                        },
                        "options": Object {
                          "appendNamespaceToCIMode": false,
                          "appendNamespaceToMissingKey": false,
                          "contextSeparator": "_",
                          "debug": true,
                          "defaultNS": "translation",
                          "fallbackLng": Array [
                            "en",
                          ],
                          "fallbackNS": false,
                          "initImmediate": false,
                          "interpolation": Object {
                            "escapeValue": false,
                          },
                          "joinArrays": false,
                          "keySeparator": ".",
                          "load": "all",
                          "missingInterpolationHandler": false,
                          "missingKeyHandler": false,
                          "nonExplicitSupportedLngs": true,
                          "nonExplicitWhitelist": false,
                          "ns": Array [],
                          "nsSeparator": ":",
                          "overloadTranslationOptionHandler": [Function],
                          "parseMissingKeyHandler": false,
                          "partialBundledLanguages": false,
                          "pluralSeparator": "_",
                          "postProcess": false,
                          "postProcessPassResolved": false,
                          "prefix": "i18next::languageUtils:",
                          "preload": false,
                          "resources": Object {
                            "de": Object {},
                            "en": Object {},
                            "fr": Object {},
                            "ru": Object {},
                            "uz": Object {},
                          },
                          "returnEmptyString": true,
                          "returnNull": true,
                          "returnObjects": false,
                          "returnedObjectHandler": false,
                          "saveMissing": false,
                          "saveMissingPlurals": true,
                          "saveMissingTo": "fallback",
                          "simplifyPluralSuffix": true,
                          "supportedLngs": Array [
                            "de",
                            "en",
                            "fr",
                            "ru",
                            "uz",
                            "cimode",
                          ],
                          "updateMissing": false,
                          "whitelist": false,
                        },
                        "prefix": "i18next::languageUtils:",
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "whitelist": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                    },
                    "logger": Logger {
                      "debug": true,
                      "logger": Object {
                        "error": [Function],
                        "log": [Function],
                        "output": [Function],
                        "type": "logger",
                        "warn": [Function],
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "prefix": "i18next::pluralResolver:",
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "prefix": "i18next::pluralResolver:",
                    },
                    "options": Object {
                      "compatibilityJSON": undefined,
                      "prepend": "_",
                      "simplifyPluralSuffix": true,
                    },
                    "rules": Object {
                      "ach": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "af": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ak": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "am": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "an": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ar": Object {
                        "numbers": Array [
                          0,
                          1,
                          2,
                          3,
                          11,
                          100,
                        ],
                        "plurals": [Function],
                      },
                      "arn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ast": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ay": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "az": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "be": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "bg": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "bn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "bo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "br": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "bs": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "ca": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "cgg": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "cnr": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "cs": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "csb": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "cy": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          8,
                        ],
                        "plurals": [Function],
                      },
                      "da": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "de": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "dev": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "dz": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "el": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "en": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "eo": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "es": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "et": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "eu": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fa": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "fi": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fil": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fo": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fr": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fur": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fy": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ga": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          7,
                          11,
                        ],
                        "plurals": [Function],
                      },
                      "gd": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          20,
                        ],
                        "plurals": [Function],
                      },
                      "gl": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "gu": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "gun": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ha": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "he": Object {
                        "numbers": Array [
                          1,
                          2,
                          20,
                          21,
                        ],
                        "plurals": [Function],
                      },
                      "hi": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "hr": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "ht": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "hu": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "hy": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ia": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "id": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "is": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "it": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "iw": Object {
                        "numbers": Array [
                          1,
                          2,
                          20,
                          21,
                        ],
                        "plurals": [Function],
                      },
                      "ja": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "jbo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "jv": Object {
                        "numbers": Array [
                          0,
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ka": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "kk": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "km": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "kn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ko": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ku": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "kw": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          4,
                        ],
                        "plurals": [Function],
                      },
                      "ky": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "lb": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ln": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "lo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "lt": Object {
                        "numbers": Array [
                          1,
                          2,
                          10,
                        ],
                        "plurals": [Function],
                      },
                      "lv": Object {
                        "numbers": Array [
                          1,
                          2,
                          0,
                        ],
                        "plurals": [Function],
                      },
                      "mai": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mfe": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mg": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mi": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mk": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ml": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mnk": Object {
                        "numbers": Array [
                          0,
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mr": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ms": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "mt": Object {
                        "numbers": Array [
                          1,
                          2,
                          11,
                          20,
                        ],
                        "plurals": [Function],
                      },
                      "nah": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nap": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nb": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ne": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nl": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "no": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nso": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "oc": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "or": Object {
                        "numbers": Array [
                          2,
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "pa": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pap": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pl": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "pms": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ps": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pt": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pt-BR": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pt-PT": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "rm": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ro": Object {
                        "numbers": Array [
                          1,
                          2,
                          20,
                        ],
                        "plurals": [Function],
                      },
                      "ru": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "sah": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "sco": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "se": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "si": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sk": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "sl": Object {
                        "numbers": Array [
                          5,
                          1,
                          2,
                          3,
                        ],
                        "plurals": [Function],
                      },
                      "so": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "son": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sq": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sr": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "su": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "sv": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sw": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ta": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "te": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tg": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "th": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ti": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tk": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tr": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tt": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ug": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "uk": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "ur": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "uz": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "vi": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "wa": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "wo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "yo": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "zh": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                    },
                  },
                  "resourceStore": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "utils": Object {
                    "hasLoadedNamespace": [Function],
                  },
                },
                "state": Object {},
                "store": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
              },
              "interpolator": Interpolator {
                "alwaysFormat": false,
                "escape": [Function],
                "escapeValue": false,
                "format": [Function],
                "formatSeparator": ",",
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::interpolator:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::interpolator:",
                },
                "maxReplaces": 1000,
                "nestingOptionsSeparator": ",",
                "nestingPrefix": "\\\\$t\\\\(",
                "nestingRegexp": /\\\\\\$t\\\\\\(\\(\\.\\+\\?\\)\\\\\\)/g,
                "nestingSuffix": "\\\\)",
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "{{",
                "regexp": /\\{\\{\\(\\.\\+\\?\\)\\}\\}/g,
                "regexpUnescape": /\\{\\{-\\(\\.\\+\\?\\)\\}\\}/g,
                "suffix": "}}",
                "unescapePrefix": "-",
                "unescapeSuffix": "",
                "useRawValueToEscape": false,
              },
              "language": "en",
              "languageUtils": LanguageUtil {
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::languageUtils:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::languageUtils:",
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "whitelist": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
              },
              "logger": Logger {
                "debug": true,
                "logger": Object {
                  "error": [Function],
                  "log": [Function],
                  "output": [Function],
                  "type": "logger",
                  "warn": [Function],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "prefix": "i18next::translator:",
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "i18next::translator:",
              },
              "observers": Object {
                "*": Array [
                  [Function],
                ],
              },
              "options": Object {
                "appendNamespaceToCIMode": false,
                "appendNamespaceToMissingKey": false,
                "contextSeparator": "_",
                "debug": true,
                "defaultNS": "translation",
                "fallbackLng": Array [
                  "en",
                ],
                "fallbackNS": false,
                "initImmediate": false,
                "interpolation": Object {
                  "escapeValue": false,
                },
                "joinArrays": false,
                "keySeparator": ".",
                "load": "all",
                "missingInterpolationHandler": false,
                "missingKeyHandler": false,
                "nonExplicitSupportedLngs": true,
                "nonExplicitWhitelist": false,
                "ns": Array [],
                "nsSeparator": ":",
                "overloadTranslationOptionHandler": [Function],
                "parseMissingKeyHandler": false,
                "partialBundledLanguages": false,
                "pluralSeparator": "_",
                "postProcess": false,
                "postProcessPassResolved": false,
                "preload": false,
                "resources": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
                "returnEmptyString": true,
                "returnNull": true,
                "returnObjects": false,
                "returnedObjectHandler": false,
                "saveMissing": false,
                "saveMissingPlurals": true,
                "saveMissingTo": "fallback",
                "simplifyPluralSuffix": true,
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "updateMissing": false,
                "whitelist": false,
              },
              "pluralResolver": PluralResolver {
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::pluralResolver:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::pluralResolver:",
                },
                "options": Object {
                  "compatibilityJSON": undefined,
                  "prepend": "_",
                  "simplifyPluralSuffix": true,
                },
                "rules": Object {
                  "ach": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "af": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ak": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "am": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "an": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ar": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                      3,
                      11,
                      100,
                    ],
                    "plurals": [Function],
                  },
                  "arn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ast": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ay": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "az": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "be": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "bg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "br": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ca": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "cgg": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "cnr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "csb": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cy": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      8,
                    ],
                    "plurals": [Function],
                  },
                  "da": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "de": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dev": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dz": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "el": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "en": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "es": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "et": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fa": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "fi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fil": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ga": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      7,
                      11,
                    ],
                    "plurals": [Function],
                  },
                  "gd": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "gl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gun": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ha": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "he": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "hi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ht": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "hu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ia": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "id": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "is": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "it": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "iw": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "ja": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jbo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jv": Object {
                    "numbers": Array [
                      0,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ka": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kk": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "km": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ko": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ku": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "kw": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      4,
                    ],
                    "plurals": [Function],
                  },
                  "ky": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ln": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "lo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lt": Object {
                    "numbers": Array [
                      1,
                      2,
                      10,
                    ],
                    "plurals": [Function],
                  },
                  "lv": Object {
                    "numbers": Array [
                      1,
                      2,
                      0,
                    ],
                    "plurals": [Function],
                  },
                  "mai": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mfe": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ml": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mnk": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ms": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "mt": Object {
                    "numbers": Array [
                      1,
                      2,
                      11,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "nah": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ne": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "no": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nso": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "oc": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "or": Object {
                    "numbers": Array [
                      2,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "pa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pl": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "pms": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ps": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-BR": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-PT": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "rm": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ro": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "ru": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sah": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sco": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "se": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "si": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sl": Object {
                    "numbers": Array [
                      5,
                      1,
                      2,
                      3,
                    ],
                    "plurals": [Function],
                  },
                  "so": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "son": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sq": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "su": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sv": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sw": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ta": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "te": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "th": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ti": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tt": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ug": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "uk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "uz": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "vi": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "wa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "wo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "yo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "zh": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                },
              },
              "resourceStore": Object {
                "de": Object {},
                "en": Object {},
                "fr": Object {},
                "ru": Object {},
                "uz": Object {},
              },
              "utils": Object {
                "hasLoadedNamespace": [Function],
              },
            },
          }
        }
        key="en"
      >
        <Memo(MuiPickerUtils)>
          <MuiPickersUtilsProvider
            libInstance={[Function]}
            locale="en"
            utils={[Function]}
          >
            <Memo(ThemeProvider)
              defaultTheme={[Function]}
            >
              <ThemeProvider
                theme={
                  Object {
                    "breakpoints": Object {
                      "between": [Function],
                      "down": [Function],
                      "keys": Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ],
                      "only": [Function],
                      "up": [Function],
                      "values": Object {
                        "lg": 1280,
                        "md": 960,
                        "sm": 600,
                        "xl": 1920,
                        "xs": 0,
                      },
                      "width": [Function],
                    },
                    "direction": "ltr",
                    "mixins": Object {
                      "gutters": [Function],
                      "toolbar": Object {
                        "@media (min-width:0px) and (orientation: landscape)": Object {
                          "minHeight": 48,
                        },
                        "@media (min-width:600px)": Object {
                          "minHeight": 64,
                        },
                        "minHeight": 56,
                      },
                    },
                    "overrides": Object {},
                    "palette": Object {
                      "action": Object {
                        "activatedOpacity": 0.12,
                        "active": "rgba(0, 0, 0, 0.54)",
                        "disabled": "rgba(0, 0, 0, 0.26)",
                        "disabledBackground": "rgba(0, 0, 0, 0.12)",
                        "disabledOpacity": 0.38,
                        "focus": "rgba(0, 0, 0, 0.12)",
                        "focusOpacity": 0.12,
                        "hover": "rgba(0, 0, 0, 0.04)",
                        "hoverOpacity": 0.04,
                        "selected": "rgba(0, 0, 0, 0.08)",
                        "selectedOpacity": 0.08,
                      },
                      "augmentColor": [Function],
                      "background": Object {
                        "default": "#fafafa",
                        "paper": "#fff",
                      },
                      "common": Object {
                        "black": "#000",
                        "white": "#fff",
                      },
                      "contrastThreshold": 3,
                      "divider": "rgba(0, 0, 0, 0.12)",
                      "error": Object {
                        "contrastText": "#fff",
                        "dark": "#d32f2f",
                        "light": "#e57373",
                        "main": "#f44336",
                      },
                      "getContrastText": [Function],
                      "grey": Object {
                        "100": "#f5f5f5",
                        "200": "#eeeeee",
                        "300": "#e0e0e0",
                        "400": "#bdbdbd",
                        "50": "#fafafa",
                        "500": "#9e9e9e",
                        "600": "#757575",
                        "700": "#616161",
                        "800": "#424242",
                        "900": "#212121",
                        "A100": "#d5d5d5",
                        "A200": "#aaaaaa",
                        "A400": "#303030",
                        "A700": "#616161",
                      },
                      "info": Object {
                        "contrastText": "#fff",
                        "dark": "#1976d2",
                        "light": "#64b5f6",
                        "main": "#2196f3",
                      },
                      "primary": Object {
                        "contrastText": "#fff",
                        "dark": "rgb(44, 56, 126)",
                        "light": "rgb(101, 115, 195)",
                        "main": "#3f51b5",
                      },
                      "secondary": Object {
                        "contrastText": "#fff",
                        "dark": "rgb(171, 0, 60)",
                        "light": "rgb(247, 51, 120)",
                        "main": "#f50057",
                      },
                      "success": Object {
                        "contrastText": "rgba(0, 0, 0, 0.87)",
                        "dark": "#388e3c",
                        "light": "#81c784",
                        "main": "#4caf50",
                      },
                      "text": Object {
                        "disabled": "rgba(0, 0, 0, 0.38)",
                        "hint": "rgba(0, 0, 0, 0.38)",
                        "primary": "rgba(0, 0, 0, 0.87)",
                        "secondary": "rgba(0, 0, 0, 0.54)",
                      },
                      "tonalOffset": 0.2,
                      "type": "light",
                      "warning": Object {
                        "contrastText": "rgba(0, 0, 0, 0.87)",
                        "dark": "#f57c00",
                        "light": "#ffb74d",
                        "main": "#ff9800",
                      },
                    },
                    "props": Object {},
                    "shadows": Array [
                      "none",
                      "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                      "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                      "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                      "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                      "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                      "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                      "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                      "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                      "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                      "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                      "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                      "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                      "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                      "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                      "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                      "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                      "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                      "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                      "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                      "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                      "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                      "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                      "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                      "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                    ],
                    "shape": Object {
                      "borderRadius": 4,
                    },
                    "spacing": [Function],
                    "transitions": Object {
                      "create": [Function],
                      "duration": Object {
                        "complex": 375,
                        "enteringScreen": 225,
                        "leavingScreen": 195,
                        "short": 250,
                        "shorter": 200,
                        "shortest": 150,
                        "standard": 300,
                      },
                      "easing": Object {
                        "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                        "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                        "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                        "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                      },
                      "getAutoHeightDuration": [Function],
                    },
                    "typography": Object {
                      "body1": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.00938em",
                        "lineHeight": 1.5,
                      },
                      "body2": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.875rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.01071em",
                        "lineHeight": 1.43,
                      },
                      "button": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.875rem",
                        "fontWeight": 500,
                        "letterSpacing": "0.02857em",
                        "lineHeight": 1.75,
                        "textTransform": "uppercase",
                      },
                      "caption": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.75rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.03333em",
                        "lineHeight": 1.66,
                      },
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": 14,
                      "fontWeightBold": 700,
                      "fontWeightLight": 300,
                      "fontWeightMedium": 500,
                      "fontWeightRegular": 400,
                      "h1": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "6rem",
                        "fontWeight": 300,
                        "letterSpacing": "-0.01562em",
                        "lineHeight": 1.167,
                      },
                      "h2": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "3.75rem",
                        "fontWeight": 300,
                        "letterSpacing": "-0.00833em",
                        "lineHeight": 1.2,
                      },
                      "h3": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "3rem",
                        "fontWeight": 400,
                        "letterSpacing": "0em",
                        "lineHeight": 1.167,
                      },
                      "h4": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "2.125rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.00735em",
                        "lineHeight": 1.235,
                      },
                      "h5": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1.5rem",
                        "fontWeight": 400,
                        "letterSpacing": "0em",
                        "lineHeight": 1.334,
                      },
                      "h6": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1.25rem",
                        "fontWeight": 500,
                        "letterSpacing": "0.0075em",
                        "lineHeight": 1.6,
                      },
                      "htmlFontSize": 16,
                      "overline": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.75rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.08333em",
                        "lineHeight": 2.66,
                        "textTransform": "uppercase",
                      },
                      "pxToRem": [Function],
                      "round": [Function],
                      "subtitle1": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.00938em",
                        "lineHeight": 1.75,
                      },
                      "subtitle2": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.875rem",
                        "fontWeight": 500,
                        "letterSpacing": "0.00714em",
                        "lineHeight": 1.57,
                      },
                    },
                    "zIndex": Object {
                      "appBar": 1100,
                      "drawer": 1200,
                      "mobileStepper": 1000,
                      "modal": 1300,
                      "snackbar": 1400,
                      "speedDial": 1050,
                      "tooltip": 1500,
                    },
                    Symbol(mui.nested): false,
                  }
                }
              >
                <WithStyles(CssBaseline)>
                  <CssBaseline
                    classes={Object {}}
                  />
                </WithStyles(CssBaseline)>
                <QueryClientProvider
                  client={
                    QueryClient {
                      "defaultOptions": Object {},
                      "mutationCache": MutationCache {
                        "config": Object {},
                        "listeners": Array [],
                        "mutationId": 0,
                        "mutations": Array [],
                      },
                      "mutationDefaults": Array [],
                      "queryCache": QueryCache {
                        "config": Object {},
                        "listeners": Array [],
                        "queries": Array [],
                        "queriesMap": Object {},
                      },
                      "queryDefaults": Array [],
                      "unsubscribeFocus": [Function],
                      "unsubscribeOnline": [Function],
                    }
                  }
                >
                  <Memo(PermissionContextProvider)>
                    <Router
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "createHref": [Function],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                    >
                      <Memo(DialogContextProvider)>
                        <ThemeSelector>
                          <AdvThemeSelector>
                            <LanguageSelector />
                            <StylesProvider
                              generateClassName={[Function]}
                            >
                              <Component>
                                <Memo(MultiSelectWithoutGroup)
                                  autocompleteId="multi-select-without-group"
                                  disabled={false}
                                  enableIcons={false}
                                  loadDataOptions={[Function]}
                                  loadingText="Loading.."
                                  onChange={[Function]}
                                  openInfo={[Function]}
                                  searchInputLabel="Multi Without Groups"
                                  selected={Array []}
                                >
                                  <WithStyles(ForwardRef(Typography))
                                    component="div"
                                  >
                                    <ForwardRef(Typography)
                                      classes={
                                        Object {
                                          "alignCenter": "standalone-selector--multi-without-group-MuiTypography-alignCenter",
                                          "alignJustify": "standalone-selector--multi-without-group-MuiTypography-alignJustify",
                                          "alignLeft": "standalone-selector--multi-without-group-MuiTypography-alignLeft",
                                          "alignRight": "standalone-selector--multi-without-group-MuiTypography-alignRight",
                                          "body1": "standalone-selector--multi-without-group-MuiTypography-body1",
                                          "body2": "standalone-selector--multi-without-group-MuiTypography-body2",
                                          "button": "standalone-selector--multi-without-group-MuiTypography-button",
                                          "caption": "standalone-selector--multi-without-group-MuiTypography-caption",
                                          "colorError": "standalone-selector--multi-without-group-MuiTypography-colorError",
                                          "colorInherit": "standalone-selector--multi-without-group-MuiTypography-colorInherit",
                                          "colorPrimary": "standalone-selector--multi-without-group-MuiTypography-colorPrimary",
                                          "colorSecondary": "standalone-selector--multi-without-group-MuiTypography-colorSecondary",
                                          "colorTextPrimary": "standalone-selector--multi-without-group-MuiTypography-colorTextPrimary",
                                          "colorTextSecondary": "standalone-selector--multi-without-group-MuiTypography-colorTextSecondary",
                                          "displayBlock": "standalone-selector--multi-without-group-MuiTypography-displayBlock",
                                          "displayInline": "standalone-selector--multi-without-group-MuiTypography-displayInline",
                                          "gutterBottom": "standalone-selector--multi-without-group-MuiTypography-gutterBottom",
                                          "h1": "standalone-selector--multi-without-group-MuiTypography-h1",
                                          "h2": "standalone-selector--multi-without-group-MuiTypography-h2",
                                          "h3": "standalone-selector--multi-without-group-MuiTypography-h3",
                                          "h4": "standalone-selector--multi-without-group-MuiTypography-h4",
                                          "h5": "standalone-selector--multi-without-group-MuiTypography-h5",
                                          "h6": "standalone-selector--multi-without-group-MuiTypography-h6",
                                          "noWrap": "standalone-selector--multi-without-group-MuiTypography-noWrap",
                                          "overline": "standalone-selector--multi-without-group-MuiTypography-overline",
                                          "paragraph": "standalone-selector--multi-without-group-MuiTypography-paragraph",
                                          "root": "standalone-selector--multi-without-group-MuiTypography-root",
                                          "srOnly": "standalone-selector--multi-without-group-MuiTypography-srOnly",
                                          "subtitle1": "standalone-selector--multi-without-group-MuiTypography-subtitle1",
                                          "subtitle2": "standalone-selector--multi-without-group-MuiTypography-subtitle2",
                                        }
                                      }
                                      component="div"
                                    >
                                      <div
                                        className="standalone-selector--multi-without-group-MuiTypography-root standalone-selector--multi-without-group-MuiTypography-body1"
                                      >
                                        <WithStyles(ForwardRef(Typography))
                                          className="standalone-selector--multi-without-group-CcMultiSelectWithoutGroup-searchLabel-10"
                                          component="div"
                                        >
                                          <ForwardRef(Typography)
                                            className="standalone-selector--multi-without-group-CcMultiSelectWithoutGroup-searchLabel-10"
                                            classes={
                                              Object {
                                                "alignCenter": "standalone-selector--multi-without-group-MuiTypography-alignCenter",
                                                "alignJustify": "standalone-selector--multi-without-group-MuiTypography-alignJustify",
                                                "alignLeft": "standalone-selector--multi-without-group-MuiTypography-alignLeft",
                                                "alignRight": "standalone-selector--multi-without-group-MuiTypography-alignRight",
                                                "body1": "standalone-selector--multi-without-group-MuiTypography-body1",
                                                "body2": "standalone-selector--multi-without-group-MuiTypography-body2",
                                                "button": "standalone-selector--multi-without-group-MuiTypography-button",
                                                "caption": "standalone-selector--multi-without-group-MuiTypography-caption",
                                                "colorError": "standalone-selector--multi-without-group-MuiTypography-colorError",
                                                "colorInherit": "standalone-selector--multi-without-group-MuiTypography-colorInherit",
                                                "colorPrimary": "standalone-selector--multi-without-group-MuiTypography-colorPrimary",
                                                "colorSecondary": "standalone-selector--multi-without-group-MuiTypography-colorSecondary",
                                                "colorTextPrimary": "standalone-selector--multi-without-group-MuiTypography-colorTextPrimary",
                                                "colorTextSecondary": "standalone-selector--multi-without-group-MuiTypography-colorTextSecondary",
                                                "displayBlock": "standalone-selector--multi-without-group-MuiTypography-displayBlock",
                                                "displayInline": "standalone-selector--multi-without-group-MuiTypography-displayInline",
                                                "gutterBottom": "standalone-selector--multi-without-group-MuiTypography-gutterBottom",
                                                "h1": "standalone-selector--multi-without-group-MuiTypography-h1",
                                                "h2": "standalone-selector--multi-without-group-MuiTypography-h2",
                                                "h3": "standalone-selector--multi-without-group-MuiTypography-h3",
                                                "h4": "standalone-selector--multi-without-group-MuiTypography-h4",
                                                "h5": "standalone-selector--multi-without-group-MuiTypography-h5",
                                                "h6": "standalone-selector--multi-without-group-MuiTypography-h6",
                                                "noWrap": "standalone-selector--multi-without-group-MuiTypography-noWrap",
                                                "overline": "standalone-selector--multi-without-group-MuiTypography-overline",
                                                "paragraph": "standalone-selector--multi-without-group-MuiTypography-paragraph",
                                                "root": "standalone-selector--multi-without-group-MuiTypography-root",
                                                "srOnly": "standalone-selector--multi-without-group-MuiTypography-srOnly",
                                                "subtitle1": "standalone-selector--multi-without-group-MuiTypography-subtitle1",
                                                "subtitle2": "standalone-selector--multi-without-group-MuiTypography-subtitle2",
                                              }
                                            }
                                            component="div"
                                          >
                                            <div
                                              className="standalone-selector--multi-without-group-MuiTypography-root standalone-selector--multi-without-group-CcMultiSelectWithoutGroup-searchLabel-10 standalone-selector--multi-without-group-MuiTypography-body1"
                                            >
                                              <WithStyles(ForwardRef(Typography))
                                                color="textSecondary"
                                                component="label"
                                                variant="caption"
                                              >
                                                <ForwardRef(Typography)
                                                  classes={
                                                    Object {
                                                      "alignCenter": "standalone-selector--multi-without-group-MuiTypography-alignCenter",
                                                      "alignJustify": "standalone-selector--multi-without-group-MuiTypography-alignJustify",
                                                      "alignLeft": "standalone-selector--multi-without-group-MuiTypography-alignLeft",
                                                      "alignRight": "standalone-selector--multi-without-group-MuiTypography-alignRight",
                                                      "body1": "standalone-selector--multi-without-group-MuiTypography-body1",
                                                      "body2": "standalone-selector--multi-without-group-MuiTypography-body2",
                                                      "button": "standalone-selector--multi-without-group-MuiTypography-button",
                                                      "caption": "standalone-selector--multi-without-group-MuiTypography-caption",
                                                      "colorError": "standalone-selector--multi-without-group-MuiTypography-colorError",
                                                      "colorInherit": "standalone-selector--multi-without-group-MuiTypography-colorInherit",
                                                      "colorPrimary": "standalone-selector--multi-without-group-MuiTypography-colorPrimary",
                                                      "colorSecondary": "standalone-selector--multi-without-group-MuiTypography-colorSecondary",
                                                      "colorTextPrimary": "standalone-selector--multi-without-group-MuiTypography-colorTextPrimary",
                                                      "colorTextSecondary": "standalone-selector--multi-without-group-MuiTypography-colorTextSecondary",
                                                      "displayBlock": "standalone-selector--multi-without-group-MuiTypography-displayBlock",
                                                      "displayInline": "standalone-selector--multi-without-group-MuiTypography-displayInline",
                                                      "gutterBottom": "standalone-selector--multi-without-group-MuiTypography-gutterBottom",
                                                      "h1": "standalone-selector--multi-without-group-MuiTypography-h1",
                                                      "h2": "standalone-selector--multi-without-group-MuiTypography-h2",
                                                      "h3": "standalone-selector--multi-without-group-MuiTypography-h3",
                                                      "h4": "standalone-selector--multi-without-group-MuiTypography-h4",
                                                      "h5": "standalone-selector--multi-without-group-MuiTypography-h5",
                                                      "h6": "standalone-selector--multi-without-group-MuiTypography-h6",
                                                      "noWrap": "standalone-selector--multi-without-group-MuiTypography-noWrap",
                                                      "overline": "standalone-selector--multi-without-group-MuiTypography-overline",
                                                      "paragraph": "standalone-selector--multi-without-group-MuiTypography-paragraph",
                                                      "root": "standalone-selector--multi-without-group-MuiTypography-root",
                                                      "srOnly": "standalone-selector--multi-without-group-MuiTypography-srOnly",
                                                      "subtitle1": "standalone-selector--multi-without-group-MuiTypography-subtitle1",
                                                      "subtitle2": "standalone-selector--multi-without-group-MuiTypography-subtitle2",
                                                    }
                                                  }
                                                  color="textSecondary"
                                                  component="label"
                                                  variant="caption"
                                                >
                                                  <label
                                                    className="standalone-selector--multi-without-group-MuiTypography-root standalone-selector--multi-without-group-MuiTypography-caption standalone-selector--multi-without-group-MuiTypography-colorTextSecondary"
                                                  >
                                                    Multi Without Groups
                                                  </label>
                                                </ForwardRef(Typography)>
                                              </WithStyles(ForwardRef(Typography))>
                                            </div>
                                          </ForwardRef(Typography)>
                                        </WithStyles(ForwardRef(Typography))>
                                        <WithStyles(ForwardRef(Autocomplete))
                                          autoComplete={true}
                                          disableClearable={true}
                                          disabled={false}
                                          filterOptions={[Function]}
                                          freeSolo={true}
                                          getOptionLabel={[Function]}
                                          getOptionSelected={[Function]}
                                          id="multi-select-without-group"
                                          inputValue=""
                                          loading={false}
                                          loadingText="Loading.."
                                          noOptionsText="standalone.selector.base-selector.no-options-text"
                                          onChange={[Function]}
                                          onInputChange={[Function]}
                                          options={Array []}
                                          renderInput={[Function]}
                                          value=""
                                        >
                                          <ForwardRef(Autocomplete)
                                            autoComplete={true}
                                            classes={
                                              Object {
                                                "clearIndicator": "standalone-selector--multi-without-group-MuiAutocomplete-clearIndicator",
                                                "clearIndicatorDirty": "standalone-selector--multi-without-group-MuiAutocomplete-clearIndicatorDirty",
                                                "endAdornment": "standalone-selector--multi-without-group-MuiAutocomplete-endAdornment",
                                                "focused": "Mui-focused",
                                                "fullWidth": "standalone-selector--multi-without-group-MuiAutocomplete-fullWidth",
                                                "groupLabel": "standalone-selector--multi-without-group-MuiAutocomplete-groupLabel",
                                                "groupUl": "standalone-selector--multi-without-group-MuiAutocomplete-groupUl",
                                                "hasClearIcon": "standalone-selector--multi-without-group-MuiAutocomplete-hasClearIcon",
                                                "hasPopupIcon": "standalone-selector--multi-without-group-MuiAutocomplete-hasPopupIcon",
                                                "input": "standalone-selector--multi-without-group-MuiAutocomplete-input",
                                                "inputFocused": "standalone-selector--multi-without-group-MuiAutocomplete-inputFocused",
                                                "inputRoot": "standalone-selector--multi-without-group-MuiAutocomplete-inputRoot",
                                                "listbox": "standalone-selector--multi-without-group-MuiAutocomplete-listbox",
                                                "loading": "standalone-selector--multi-without-group-MuiAutocomplete-loading",
                                                "noOptions": "standalone-selector--multi-without-group-MuiAutocomplete-noOptions",
                                                "option": "standalone-selector--multi-without-group-MuiAutocomplete-option",
                                                "paper": "standalone-selector--multi-without-group-MuiAutocomplete-paper",
                                                "popper": "standalone-selector--multi-without-group-MuiAutocomplete-popper",
                                                "popperDisablePortal": "standalone-selector--multi-without-group-MuiAutocomplete-popperDisablePortal",
                                                "popupIndicator": "standalone-selector--multi-without-group-MuiAutocomplete-popupIndicator",
                                                "popupIndicatorOpen": "standalone-selector--multi-without-group-MuiAutocomplete-popupIndicatorOpen",
                                                "root": "standalone-selector--multi-without-group-MuiAutocomplete-root",
                                                "tag": "standalone-selector--multi-without-group-MuiAutocomplete-tag",
                                                "tagSizeSmall": "standalone-selector--multi-without-group-MuiAutocomplete-tagSizeSmall",
                                              }
                                            }
                                            disableClearable={true}
                                            disabled={false}
                                            filterOptions={[Function]}
                                            freeSolo={true}
                                            getOptionLabel={[Function]}
                                            getOptionSelected={[Function]}
                                            id="multi-select-without-group"
                                            inputValue=""
                                            loading={false}
                                            loadingText="Loading.."
                                            noOptionsText="standalone.selector.base-selector.no-options-text"
                                            onChange={[Function]}
                                            onInputChange={[Function]}
                                            options={Array []}
                                            renderInput={[Function]}
                                            value=""
                                          >
                                            <div
                                              aria-expanded={false}
                                              aria-owns={null}
                                              className="standalone-selector--multi-without-group-MuiAutocomplete-root"
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              onMouseDown={[Function]}
                                              role="combobox"
                                            >
                                              <ForwardRef(TextFieldWithHelpInner)
                                                InputLabelProps={
                                                  Object {
                                                    "htmlFor": "multi-select-without-group",
                                                    "id": "multi-select-without-group-label",
                                                  }
                                                }
                                                InputProps={
                                                  Object {
                                                    "className": "standalone-selector--multi-without-group-MuiAutocomplete-inputRoot",
                                                    "endAdornment": <div
                                                      className="standalone-selector--multi-without-group-MuiAutocomplete-endAdornment"
                                                    />,
                                                    "ref": [Function],
                                                    "startAdornment": <Memo
                                                      color="primary"
                                                    />,
                                                    "type": "search",
                                                  }
                                                }
                                                disabled={false}
                                                fullWidth={true}
                                                id="multi-select-without-group"
                                                inputProps={
                                                  Object {
                                                    "aria-activedescendant": null,
                                                    "aria-autocomplete": "both",
                                                    "aria-controls": null,
                                                    "autoCapitalize": "none",
                                                    "autoComplete": "off",
                                                    "className": "standalone-selector--multi-without-group-MuiAutocomplete-input standalone-selector--multi-without-group-MuiAutocomplete-inputFocused",
                                                    "disabled": false,
                                                    "id": "multi-select-without-group",
                                                    "onBlur": [Function],
                                                    "onChange": [Function],
                                                    "onFocus": [Function],
                                                    "onMouseDown": [Function],
                                                    "ref": Object {
                                                      "current": <input
                                                        aria-autocomplete="both"
                                                        aria-invalid="false"
                                                        autocapitalize="none"
                                                        autocomplete="off"
                                                        class="standalone-selector--multi-without-group-MuiInputBase-input standalone-selector--multi-without-group-MuiInput-input standalone-selector--multi-without-group-CcUIKitInput-input-14 standalone-selector--multi-without-group-CcUIKitInput-input-16 standalone-selector--multi-without-group-MuiAutocomplete-input standalone-selector--multi-without-group-MuiAutocomplete-inputFocused standalone-selector--multi-without-group-MuiInputBase-inputAdornedStart standalone-selector--multi-without-group-MuiInputBase-inputAdornedEnd standalone-selector--multi-without-group-MuiInputBase-inputTypeSearch standalone-selector--multi-without-group-MuiInput-inputTypeSearch"
                                                        id="multi-select-without-group"
                                                        spellcheck="false"
                                                        type="search"
                                                        value=""
                                                      />,
                                                    },
                                                    "spellCheck": "false",
                                                    "value": "",
                                                  }
                                                }
                                                openInfo={[Function]}
                                              >
                                                <WithStyles(ForwardRef(TextField))
                                                  InputLabelProps={
                                                    Object {
                                                      "htmlFor": "multi-select-without-group",
                                                      "id": "multi-select-without-group-label",
                                                    }
                                                  }
                                                  InputProps={
                                                    Object {
                                                      "className": "standalone-selector--multi-without-group-MuiAutocomplete-inputRoot",
                                                      "classes": Object {
                                                        "input": "standalone-selector--multi-without-group-CcUIKitInput-input-14 standalone-selector--multi-without-group-CcUIKitInput-input-16",
                                                        "multiline": "standalone-selector--multi-without-group-CcUIKitInput-multiline-15",
                                                        "root": "standalone-selector--multi-without-group-CcUIKitInput-root-13",
                                                      },
                                                      "endAdornment": <React.Fragment>
                                                        <WithStyles(ForwardRef(InputAdornment))
                                                          position="end"
                                                        >
                                                          <WithStyles(ForwardRef(IconButton))
                                                            onClick={[Function]}
                                                          >
                                                            <Memo
                                                              color="disabled"
                                                            />
                                                          </WithStyles(ForwardRef(IconButton))>
                                                        </WithStyles(ForwardRef(InputAdornment))>
                                                      </React.Fragment>,
                                                      "ref": [Function],
                                                      "startAdornment": <Memo
                                                        color="primary"
                                                      />,
                                                      "type": "search",
                                                    }
                                                  }
                                                  disabled={false}
                                                  fullWidth={true}
                                                  id="multi-select-without-group"
                                                  inputProps={
                                                    Object {
                                                      "aria-activedescendant": null,
                                                      "aria-autocomplete": "both",
                                                      "aria-controls": null,
                                                      "autoCapitalize": "none",
                                                      "autoComplete": "off",
                                                      "className": "standalone-selector--multi-without-group-MuiAutocomplete-input standalone-selector--multi-without-group-MuiAutocomplete-inputFocused",
                                                      "disabled": false,
                                                      "id": "multi-select-without-group",
                                                      "onBlur": [Function],
                                                      "onChange": [Function],
                                                      "onFocus": [Function],
                                                      "onMouseDown": [Function],
                                                      "ref": Object {
                                                        "current": <input
                                                          aria-autocomplete="both"
                                                          aria-invalid="false"
                                                          autocapitalize="none"
                                                          autocomplete="off"
                                                          class="standalone-selector--multi-without-group-MuiInputBase-input standalone-selector--multi-without-group-MuiInput-input standalone-selector--multi-without-group-CcUIKitInput-input-14 standalone-selector--multi-without-group-CcUIKitInput-input-16 standalone-selector--multi-without-group-MuiAutocomplete-input standalone-selector--multi-without-group-MuiAutocomplete-inputFocused standalone-selector--multi-without-group-MuiInputBase-inputAdornedStart standalone-selector--multi-without-group-MuiInputBase-inputAdornedEnd standalone-selector--multi-without-group-MuiInputBase-inputTypeSearch standalone-selector--multi-without-group-MuiInput-inputTypeSearch"
                                                          id="multi-select-without-group"
                                                          spellcheck="false"
                                                          type="search"
                                                          value=""
                                                        />,
                                                      },
                                                      "spellCheck": "false",
                                                      "value": "",
                                                    }
                                                  }
                                                >
                                                  <ForwardRef(TextField)
                                                    InputLabelProps={
                                                      Object {
                                                        "htmlFor": "multi-select-without-group",
                                                        "id": "multi-select-without-group-label",
                                                      }
                                                    }
                                                    InputProps={
                                                      Object {
                                                        "className": "standalone-selector--multi-without-group-MuiAutocomplete-inputRoot",
                                                        "classes": Object {
                                                          "input": "standalone-selector--multi-without-group-CcUIKitInput-input-14 standalone-selector--multi-without-group-CcUIKitInput-input-16",
                                                          "multiline": "standalone-selector--multi-without-group-CcUIKitInput-multiline-15",
                                                          "root": "standalone-selector--multi-without-group-CcUIKitInput-root-13",
                                                        },
                                                        "endAdornment": <React.Fragment>
                                                          <WithStyles(ForwardRef(InputAdornment))
                                                            position="end"
                                                          >
                                                            <WithStyles(ForwardRef(IconButton))
                                                              onClick={[Function]}
                                                            >
                                                              <Memo
                                                                color="disabled"
                                                              />
                                                            </WithStyles(ForwardRef(IconButton))>
                                                          </WithStyles(ForwardRef(InputAdornment))>
                                                        </React.Fragment>,
                                                        "ref": [Function],
                                                        "startAdornment": <Memo
                                                          color="primary"
                                                        />,
                                                        "type": "search",
                                                      }
                                                    }
                                                    classes={
                                                      Object {
                                                        "root": "standalone-selector--multi-without-group-MuiTextField-root",
                                                      }
                                                    }
                                                    disabled={false}
                                                    fullWidth={true}
                                                    id="multi-select-without-group"
                                                    inputProps={
                                                      Object {
                                                        "aria-activedescendant": null,
                                                        "aria-autocomplete": "both",
                                                        "aria-controls": null,
                                                        "autoCapitalize": "none",
                                                        "autoComplete": "off",
                                                        "className": "standalone-selector--multi-without-group-MuiAutocomplete-input standalone-selector--multi-without-group-MuiAutocomplete-inputFocused",
                                                        "disabled": false,
                                                        "id": "multi-select-without-group",
                                                        "onBlur": [Function],
                                                        "onChange": [Function],
                                                        "onFocus": [Function],
                                                        "onMouseDown": [Function],
                                                        "ref": Object {
                                                          "current": <input
                                                            aria-autocomplete="both"
                                                            aria-invalid="false"
                                                            autocapitalize="none"
                                                            autocomplete="off"
                                                            class="standalone-selector--multi-without-group-MuiInputBase-input standalone-selector--multi-without-group-MuiInput-input standalone-selector--multi-without-group-CcUIKitInput-input-14 standalone-selector--multi-without-group-CcUIKitInput-input-16 standalone-selector--multi-without-group-MuiAutocomplete-input standalone-selector--multi-without-group-MuiAutocomplete-inputFocused standalone-selector--multi-without-group-MuiInputBase-inputAdornedStart standalone-selector--multi-without-group-MuiInputBase-inputAdornedEnd standalone-selector--multi-without-group-MuiInputBase-inputTypeSearch standalone-selector--multi-without-group-MuiInput-inputTypeSearch"
                                                            id="multi-select-without-group"
                                                            spellcheck="false"
                                                            type="search"
                                                            value=""
                                                          />,
                                                        },
                                                        "spellCheck": "false",
                                                        "value": "",
                                                      }
                                                    }
                                                  >
                                                    <WithStyles(ForwardRef(FormControl))
                                                      className="standalone-selector--multi-without-group-MuiTextField-root"
                                                      color="primary"
                                                      disabled={false}
                                                      error={false}
                                                      fullWidth={true}
                                                      required={false}
                                                      variant="standard"
                                                    >
                                                      <ForwardRef(FormControl)
                                                        className="standalone-selector--multi-without-group-MuiTextField-root"
                                                        classes={
                                                          Object {
                                                            "fullWidth": "standalone-selector--multi-without-group-MuiFormControl-fullWidth",
                                                            "marginDense": "standalone-selector--multi-without-group-MuiFormControl-marginDense",
                                                            "marginNormal": "standalone-selector--multi-without-group-MuiFormControl-marginNormal",
                                                            "root": "standalone-selector--multi-without-group-MuiFormControl-root",
                                                          }
                                                        }
                                                        color="primary"
                                                        disabled={false}
                                                        error={false}
                                                        fullWidth={true}
                                                        required={false}
                                                        variant="standard"
                                                      >
                                                        <div
                                                          className="standalone-selector--multi-without-group-MuiFormControl-root standalone-selector--multi-without-group-MuiTextField-root standalone-selector--multi-without-group-MuiFormControl-fullWidth"
                                                        >
                                                          <WithStyles(ForwardRef(Input))
                                                            autoFocus={false}
                                                            className="standalone-selector--multi-without-group-MuiAutocomplete-inputRoot"
                                                            classes={
                                                              Object {
                                                                "input": "standalone-selector--multi-without-group-CcUIKitInput-input-14 standalone-selector--multi-without-group-CcUIKitInput-input-16",
                                                                "multiline": "standalone-selector--multi-without-group-CcUIKitInput-multiline-15",
                                                                "root": "standalone-selector--multi-without-group-CcUIKitInput-root-13",
                                                              }
                                                            }
                                                            endAdornment={
                                                              <React.Fragment>
                                                                <WithStyles(ForwardRef(InputAdornment))
                                                                  position="end"
                                                                >
                                                                  <WithStyles(ForwardRef(IconButton))
                                                                    onClick={[Function]}
                                                                  >
                                                                    <Memo
                                                                      color="disabled"
                                                                    />
                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                </WithStyles(ForwardRef(InputAdornment))>
                                                              </React.Fragment>
                                                            }
                                                            fullWidth={true}
                                                            id="multi-select-without-group"
                                                            inputProps={
                                                              Object {
                                                                "aria-activedescendant": null,
                                                                "aria-autocomplete": "both",
                                                                "aria-controls": null,
                                                                "autoCapitalize": "none",
                                                                "autoComplete": "off",
                                                                "className": "standalone-selector--multi-without-group-MuiAutocomplete-input standalone-selector--multi-without-group-MuiAutocomplete-inputFocused",
                                                                "disabled": false,
                                                                "id": "multi-select-without-group",
                                                                "onBlur": [Function],
                                                                "onChange": [Function],
                                                                "onFocus": [Function],
                                                                "onMouseDown": [Function],
                                                                "ref": Object {
                                                                  "current": <input
                                                                    aria-autocomplete="both"
                                                                    aria-invalid="false"
                                                                    autocapitalize="none"
                                                                    autocomplete="off"
                                                                    class="standalone-selector--multi-without-group-MuiInputBase-input standalone-selector--multi-without-group-MuiInput-input standalone-selector--multi-without-group-CcUIKitInput-input-14 standalone-selector--multi-without-group-CcUIKitInput-input-16 standalone-selector--multi-without-group-MuiAutocomplete-input standalone-selector--multi-without-group-MuiAutocomplete-inputFocused standalone-selector--multi-without-group-MuiInputBase-inputAdornedStart standalone-selector--multi-without-group-MuiInputBase-inputAdornedEnd standalone-selector--multi-without-group-MuiInputBase-inputTypeSearch standalone-selector--multi-without-group-MuiInput-inputTypeSearch"
                                                                    id="multi-select-without-group"
                                                                    spellcheck="false"
                                                                    type="search"
                                                                    value=""
                                                                  />,
                                                                },
                                                                "spellCheck": "false",
                                                                "value": "",
                                                              }
                                                            }
                                                            multiline={false}
                                                            startAdornment={
                                                              <Memo
                                                                color="primary"
                                                              />
                                                            }
                                                            type="search"
                                                          >
                                                            <ForwardRef(Input)
                                                              autoFocus={false}
                                                              className="standalone-selector--multi-without-group-MuiAutocomplete-inputRoot"
                                                              classes={
                                                                Object {
                                                                  "colorSecondary": "standalone-selector--multi-without-group-MuiInput-colorSecondary",
                                                                  "disabled": "Mui-disabled",
                                                                  "error": "Mui-error",
                                                                  "focused": "Mui-focused",
                                                                  "formControl": "standalone-selector--multi-without-group-MuiInput-formControl",
                                                                  "fullWidth": "standalone-selector--multi-without-group-MuiInput-fullWidth",
                                                                  "input": "standalone-selector--multi-without-group-MuiInput-input standalone-selector--multi-without-group-CcUIKitInput-input-14 standalone-selector--multi-without-group-CcUIKitInput-input-16",
                                                                  "inputMarginDense": "standalone-selector--multi-without-group-MuiInput-inputMarginDense",
                                                                  "inputMultiline": "standalone-selector--multi-without-group-MuiInput-inputMultiline",
                                                                  "inputTypeSearch": "standalone-selector--multi-without-group-MuiInput-inputTypeSearch",
                                                                  "marginDense": "standalone-selector--multi-without-group-MuiInput-marginDense",
                                                                  "multiline": "standalone-selector--multi-without-group-MuiInput-multiline standalone-selector--multi-without-group-CcUIKitInput-multiline-15",
                                                                  "root": "standalone-selector--multi-without-group-MuiInput-root standalone-selector--multi-without-group-CcUIKitInput-root-13",
                                                                  "underline": "standalone-selector--multi-without-group-MuiInput-underline",
                                                                }
                                                              }
                                                              endAdornment={
                                                                <React.Fragment>
                                                                  <WithStyles(ForwardRef(InputAdornment))
                                                                    position="end"
                                                                  >
                                                                    <WithStyles(ForwardRef(IconButton))
                                                                      onClick={[Function]}
                                                                    >
                                                                      <Memo
                                                                        color="disabled"
                                                                      />
                                                                    </WithStyles(ForwardRef(IconButton))>
                                                                  </WithStyles(ForwardRef(InputAdornment))>
                                                                </React.Fragment>
                                                              }
                                                              fullWidth={true}
                                                              id="multi-select-without-group"
                                                              inputProps={
                                                                Object {
                                                                  "aria-activedescendant": null,
                                                                  "aria-autocomplete": "both",
                                                                  "aria-controls": null,
                                                                  "autoCapitalize": "none",
                                                                  "autoComplete": "off",
                                                                  "className": "standalone-selector--multi-without-group-MuiAutocomplete-input standalone-selector--multi-without-group-MuiAutocomplete-inputFocused",
                                                                  "disabled": false,
                                                                  "id": "multi-select-without-group",
                                                                  "onBlur": [Function],
                                                                  "onChange": [Function],
                                                                  "onFocus": [Function],
                                                                  "onMouseDown": [Function],
                                                                  "ref": Object {
                                                                    "current": <input
                                                                      aria-autocomplete="both"
                                                                      aria-invalid="false"
                                                                      autocapitalize="none"
                                                                      autocomplete="off"
                                                                      class="standalone-selector--multi-without-group-MuiInputBase-input standalone-selector--multi-without-group-MuiInput-input standalone-selector--multi-without-group-CcUIKitInput-input-14 standalone-selector--multi-without-group-CcUIKitInput-input-16 standalone-selector--multi-without-group-MuiAutocomplete-input standalone-selector--multi-without-group-MuiAutocomplete-inputFocused standalone-selector--multi-without-group-MuiInputBase-inputAdornedStart standalone-selector--multi-without-group-MuiInputBase-inputAdornedEnd standalone-selector--multi-without-group-MuiInputBase-inputTypeSearch standalone-selector--multi-without-group-MuiInput-inputTypeSearch"
                                                                      id="multi-select-without-group"
                                                                      spellcheck="false"
                                                                      type="search"
                                                                      value=""
                                                                    />,
                                                                  },
                                                                  "spellCheck": "false",
                                                                  "value": "",
                                                                }
                                                              }
                                                              multiline={false}
                                                              startAdornment={
                                                                <Memo
                                                                  color="primary"
                                                                />
                                                              }
                                                              type="search"
                                                            >
                                                              <WithStyles(ForwardRef(InputBase))
                                                                autoFocus={false}
                                                                className="standalone-selector--multi-without-group-MuiAutocomplete-inputRoot"
                                                                classes={
                                                                  Object {
                                                                    "colorSecondary": "standalone-selector--multi-without-group-MuiInput-colorSecondary",
                                                                    "disabled": "Mui-disabled",
                                                                    "error": "Mui-error",
                                                                    "focused": "Mui-focused",
                                                                    "formControl": "standalone-selector--multi-without-group-MuiInput-formControl",
                                                                    "fullWidth": "standalone-selector--multi-without-group-MuiInput-fullWidth",
                                                                    "input": "standalone-selector--multi-without-group-MuiInput-input standalone-selector--multi-without-group-CcUIKitInput-input-14 standalone-selector--multi-without-group-CcUIKitInput-input-16",
                                                                    "inputMarginDense": "standalone-selector--multi-without-group-MuiInput-inputMarginDense",
                                                                    "inputMultiline": "standalone-selector--multi-without-group-MuiInput-inputMultiline",
                                                                    "inputTypeSearch": "standalone-selector--multi-without-group-MuiInput-inputTypeSearch",
                                                                    "marginDense": "standalone-selector--multi-without-group-MuiInput-marginDense",
                                                                    "multiline": "standalone-selector--multi-without-group-MuiInput-multiline standalone-selector--multi-without-group-CcUIKitInput-multiline-15",
                                                                    "root": "standalone-selector--multi-without-group-MuiInput-root standalone-selector--multi-without-group-CcUIKitInput-root-13 standalone-selector--multi-without-group-MuiInput-underline",
                                                                    "underline": null,
                                                                  }
                                                                }
                                                                endAdornment={
                                                                  <React.Fragment>
                                                                    <WithStyles(ForwardRef(InputAdornment))
                                                                      position="end"
                                                                    >
                                                                      <WithStyles(ForwardRef(IconButton))
                                                                        onClick={[Function]}
                                                                      >
                                                                        <Memo
                                                                          color="disabled"
                                                                        />
                                                                      </WithStyles(ForwardRef(IconButton))>
                                                                    </WithStyles(ForwardRef(InputAdornment))>
                                                                  </React.Fragment>
                                                                }
                                                                fullWidth={true}
                                                                id="multi-select-without-group"
                                                                inputComponent="input"
                                                                inputProps={
                                                                  Object {
                                                                    "aria-activedescendant": null,
                                                                    "aria-autocomplete": "both",
                                                                    "aria-controls": null,
                                                                    "autoCapitalize": "none",
                                                                    "autoComplete": "off",
                                                                    "className": "standalone-selector--multi-without-group-MuiAutocomplete-input standalone-selector--multi-without-group-MuiAutocomplete-inputFocused",
                                                                    "disabled": false,
                                                                    "id": "multi-select-without-group",
                                                                    "onBlur": [Function],
                                                                    "onChange": [Function],
                                                                    "onFocus": [Function],
                                                                    "onMouseDown": [Function],
                                                                    "ref": Object {
                                                                      "current": <input
                                                                        aria-autocomplete="both"
                                                                        aria-invalid="false"
                                                                        autocapitalize="none"
                                                                        autocomplete="off"
                                                                        class="standalone-selector--multi-without-group-MuiInputBase-input standalone-selector--multi-without-group-MuiInput-input standalone-selector--multi-without-group-CcUIKitInput-input-14 standalone-selector--multi-without-group-CcUIKitInput-input-16 standalone-selector--multi-without-group-MuiAutocomplete-input standalone-selector--multi-without-group-MuiAutocomplete-inputFocused standalone-selector--multi-without-group-MuiInputBase-inputAdornedStart standalone-selector--multi-without-group-MuiInputBase-inputAdornedEnd standalone-selector--multi-without-group-MuiInputBase-inputTypeSearch standalone-selector--multi-without-group-MuiInput-inputTypeSearch"
                                                                        id="multi-select-without-group"
                                                                        spellcheck="false"
                                                                        type="search"
                                                                        value=""
                                                                      />,
                                                                    },
                                                                    "spellCheck": "false",
                                                                    "value": "",
                                                                  }
                                                                }
                                                                multiline={false}
                                                                startAdornment={
                                                                  <Memo
                                                                    color="primary"
                                                                  />
                                                                }
                                                                type="search"
                                                              >
                                                                <ForwardRef(InputBase)
                                                                  autoFocus={false}
                                                                  className="standalone-selector--multi-without-group-MuiAutocomplete-inputRoot"
                                                                  classes={
                                                                    Object {
                                                                      "adornedEnd": "standalone-selector--multi-without-group-MuiInputBase-adornedEnd",
                                                                      "adornedStart": "standalone-selector--multi-without-group-MuiInputBase-adornedStart",
                                                                      "colorSecondary": "standalone-selector--multi-without-group-MuiInputBase-colorSecondary standalone-selector--multi-without-group-MuiInput-colorSecondary",
                                                                      "disabled": "Mui-disabled Mui-disabled",
                                                                      "error": "Mui-error Mui-error",
                                                                      "focused": "Mui-focused Mui-focused",
                                                                      "formControl": "standalone-selector--multi-without-group-MuiInputBase-formControl standalone-selector--multi-without-group-MuiInput-formControl",
                                                                      "fullWidth": "standalone-selector--multi-without-group-MuiInputBase-fullWidth standalone-selector--multi-without-group-MuiInput-fullWidth",
                                                                      "input": "standalone-selector--multi-without-group-MuiInputBase-input standalone-selector--multi-without-group-MuiInput-input standalone-selector--multi-without-group-CcUIKitInput-input-14 standalone-selector--multi-without-group-CcUIKitInput-input-16",
                                                                      "inputAdornedEnd": "standalone-selector--multi-without-group-MuiInputBase-inputAdornedEnd",
                                                                      "inputAdornedStart": "standalone-selector--multi-without-group-MuiInputBase-inputAdornedStart",
                                                                      "inputHiddenLabel": "standalone-selector--multi-without-group-MuiInputBase-inputHiddenLabel",
                                                                      "inputMarginDense": "standalone-selector--multi-without-group-MuiInputBase-inputMarginDense standalone-selector--multi-without-group-MuiInput-inputMarginDense",
                                                                      "inputMultiline": "standalone-selector--multi-without-group-MuiInputBase-inputMultiline standalone-selector--multi-without-group-MuiInput-inputMultiline",
                                                                      "inputTypeSearch": "standalone-selector--multi-without-group-MuiInputBase-inputTypeSearch standalone-selector--multi-without-group-MuiInput-inputTypeSearch",
                                                                      "marginDense": "standalone-selector--multi-without-group-MuiInputBase-marginDense standalone-selector--multi-without-group-MuiInput-marginDense",
                                                                      "multiline": "standalone-selector--multi-without-group-MuiInputBase-multiline standalone-selector--multi-without-group-MuiInput-multiline standalone-selector--multi-without-group-CcUIKitInput-multiline-15",
                                                                      "root": "standalone-selector--multi-without-group-MuiInputBase-root standalone-selector--multi-without-group-MuiInput-root standalone-selector--multi-without-group-CcUIKitInput-root-13 standalone-selector--multi-without-group-MuiInput-underline",
                                                                    }
                                                                  }
                                                                  endAdornment={
                                                                    <React.Fragment>
                                                                      <WithStyles(ForwardRef(InputAdornment))
                                                                        position="end"
                                                                      >
                                                                        <WithStyles(ForwardRef(IconButton))
                                                                          onClick={[Function]}
                                                                        >
                                                                          <Memo
                                                                            color="disabled"
                                                                          />
                                                                        </WithStyles(ForwardRef(IconButton))>
                                                                      </WithStyles(ForwardRef(InputAdornment))>
                                                                    </React.Fragment>
                                                                  }
                                                                  fullWidth={true}
                                                                  id="multi-select-without-group"
                                                                  inputComponent="input"
                                                                  inputProps={
                                                                    Object {
                                                                      "aria-activedescendant": null,
                                                                      "aria-autocomplete": "both",
                                                                      "aria-controls": null,
                                                                      "autoCapitalize": "none",
                                                                      "autoComplete": "off",
                                                                      "className": "standalone-selector--multi-without-group-MuiAutocomplete-input standalone-selector--multi-without-group-MuiAutocomplete-inputFocused",
                                                                      "disabled": false,
                                                                      "id": "multi-select-without-group",
                                                                      "onBlur": [Function],
                                                                      "onChange": [Function],
                                                                      "onFocus": [Function],
                                                                      "onMouseDown": [Function],
                                                                      "ref": Object {
                                                                        "current": <input
                                                                          aria-autocomplete="both"
                                                                          aria-invalid="false"
                                                                          autocapitalize="none"
                                                                          autocomplete="off"
                                                                          class="standalone-selector--multi-without-group-MuiInputBase-input standalone-selector--multi-without-group-MuiInput-input standalone-selector--multi-without-group-CcUIKitInput-input-14 standalone-selector--multi-without-group-CcUIKitInput-input-16 standalone-selector--multi-without-group-MuiAutocomplete-input standalone-selector--multi-without-group-MuiAutocomplete-inputFocused standalone-selector--multi-without-group-MuiInputBase-inputAdornedStart standalone-selector--multi-without-group-MuiInputBase-inputAdornedEnd standalone-selector--multi-without-group-MuiInputBase-inputTypeSearch standalone-selector--multi-without-group-MuiInput-inputTypeSearch"
                                                                          id="multi-select-without-group"
                                                                          spellcheck="false"
                                                                          type="search"
                                                                          value=""
                                                                        />,
                                                                      },
                                                                      "spellCheck": "false",
                                                                      "value": "",
                                                                    }
                                                                  }
                                                                  multiline={false}
                                                                  startAdornment={
                                                                    <Memo
                                                                      color="primary"
                                                                    />
                                                                  }
                                                                  type="search"
                                                                >
                                                                  <div
                                                                    className="standalone-selector--multi-without-group-MuiInputBase-root standalone-selector--multi-without-group-MuiInput-root standalone-selector--multi-without-group-CcUIKitInput-root-13 standalone-selector--multi-without-group-MuiInput-underline standalone-selector--multi-without-group-MuiAutocomplete-inputRoot standalone-selector--multi-without-group-MuiInputBase-fullWidth standalone-selector--multi-without-group-MuiInput-fullWidth standalone-selector--multi-without-group-MuiInputBase-formControl standalone-selector--multi-without-group-MuiInput-formControl standalone-selector--multi-without-group-MuiInputBase-adornedStart standalone-selector--multi-without-group-MuiInputBase-adornedEnd"
                                                                    onClick={[Function]}
                                                                  >
                                                                    <ForwardRef(SearchIcon)
                                                                      color="primary"
                                                                    >
                                                                      <WithStyles(ForwardRef(SvgIcon))
                                                                        color="primary"
                                                                      >
                                                                        <ForwardRef(SvgIcon)
                                                                          classes={
                                                                            Object {
                                                                              "colorAction": "standalone-selector--multi-without-group-MuiSvgIcon-colorAction",
                                                                              "colorDisabled": "standalone-selector--multi-without-group-MuiSvgIcon-colorDisabled",
                                                                              "colorError": "standalone-selector--multi-without-group-MuiSvgIcon-colorError",
                                                                              "colorPrimary": "standalone-selector--multi-without-group-MuiSvgIcon-colorPrimary",
                                                                              "colorSecondary": "standalone-selector--multi-without-group-MuiSvgIcon-colorSecondary",
                                                                              "fontSizeInherit": "standalone-selector--multi-without-group-MuiSvgIcon-fontSizeInherit",
                                                                              "fontSizeLarge": "standalone-selector--multi-without-group-MuiSvgIcon-fontSizeLarge",
                                                                              "fontSizeSmall": "standalone-selector--multi-without-group-MuiSvgIcon-fontSizeSmall",
                                                                              "root": "standalone-selector--multi-without-group-MuiSvgIcon-root",
                                                                            }
                                                                          }
                                                                          color="primary"
                                                                        >
                                                                          <svg
                                                                            aria-hidden={true}
                                                                            className="standalone-selector--multi-without-group-MuiSvgIcon-root standalone-selector--multi-without-group-MuiSvgIcon-colorPrimary"
                                                                            focusable="false"
                                                                            viewBox="0 0 24 24"
                                                                          >
                                                                            <path
                                                                              d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
                                                                            />
                                                                          </svg>
                                                                        </ForwardRef(SvgIcon)>
                                                                      </WithStyles(ForwardRef(SvgIcon))>
                                                                    </ForwardRef(SearchIcon)>
                                                                    <input
                                                                      aria-activedescendant={null}
                                                                      aria-autocomplete="both"
                                                                      aria-controls={null}
                                                                      aria-invalid={false}
                                                                      autoCapitalize="none"
                                                                      autoComplete="off"
                                                                      autoFocus={false}
                                                                      className="standalone-selector--multi-without-group-MuiInputBase-input standalone-selector--multi-without-group-MuiInput-input standalone-selector--multi-without-group-CcUIKitInput-input-14 standalone-selector--multi-without-group-CcUIKitInput-input-16 standalone-selector--multi-without-group-MuiAutocomplete-input standalone-selector--multi-without-group-MuiAutocomplete-inputFocused standalone-selector--multi-without-group-MuiInputBase-inputAdornedStart standalone-selector--multi-without-group-MuiInputBase-inputAdornedEnd standalone-selector--multi-without-group-MuiInputBase-inputTypeSearch standalone-selector--multi-without-group-MuiInput-inputTypeSearch"
                                                                      disabled={false}
                                                                      id="multi-select-without-group"
                                                                      onAnimationStart={[Function]}
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      onFocus={[Function]}
                                                                      onMouseDown={[Function]}
                                                                      required={false}
                                                                      spellCheck="false"
                                                                      type="search"
                                                                      value=""
                                                                    />
                                                                    <WithStyles(ForwardRef(InputAdornment))
                                                                      position="end"
                                                                    >
                                                                      <ForwardRef(InputAdornment)
                                                                        classes={
                                                                          Object {
                                                                            "disablePointerEvents": "standalone-selector--multi-without-group-MuiInputAdornment-disablePointerEvents",
                                                                            "filled": "standalone-selector--multi-without-group-MuiInputAdornment-filled",
                                                                            "hiddenLabel": "standalone-selector--multi-without-group-MuiInputAdornment-hiddenLabel",
                                                                            "marginDense": "standalone-selector--multi-without-group-MuiInputAdornment-marginDense",
                                                                            "positionEnd": "standalone-selector--multi-without-group-MuiInputAdornment-positionEnd",
                                                                            "positionStart": "standalone-selector--multi-without-group-MuiInputAdornment-positionStart",
                                                                            "root": "standalone-selector--multi-without-group-MuiInputAdornment-root",
                                                                          }
                                                                        }
                                                                        position="end"
                                                                      >
                                                                        <div
                                                                          className="standalone-selector--multi-without-group-MuiInputAdornment-root standalone-selector--multi-without-group-MuiInputAdornment-positionEnd"
                                                                        >
                                                                          <WithStyles(ForwardRef(IconButton))
                                                                            onClick={[Function]}
                                                                          >
                                                                            <ForwardRef(IconButton)
                                                                              classes={
                                                                                Object {
                                                                                  "colorInherit": "standalone-selector--multi-without-group-MuiIconButton-colorInherit",
                                                                                  "colorPrimary": "standalone-selector--multi-without-group-MuiIconButton-colorPrimary",
                                                                                  "colorSecondary": "standalone-selector--multi-without-group-MuiIconButton-colorSecondary",
                                                                                  "disabled": "Mui-disabled",
                                                                                  "edgeEnd": "standalone-selector--multi-without-group-MuiIconButton-edgeEnd",
                                                                                  "edgeStart": "standalone-selector--multi-without-group-MuiIconButton-edgeStart",
                                                                                  "label": "standalone-selector--multi-without-group-MuiIconButton-label",
                                                                                  "root": "standalone-selector--multi-without-group-MuiIconButton-root",
                                                                                  "sizeSmall": "standalone-selector--multi-without-group-MuiIconButton-sizeSmall",
                                                                                }
                                                                              }
                                                                              onClick={[Function]}
                                                                            >
                                                                              <WithStyles(ForwardRef(ButtonBase))
                                                                                centerRipple={true}
                                                                                className="standalone-selector--multi-without-group-MuiIconButton-root"
                                                                                disabled={false}
                                                                                focusRipple={true}
                                                                                onClick={[Function]}
                                                                              >
                                                                                <ForwardRef(ButtonBase)
                                                                                  centerRipple={true}
                                                                                  className="standalone-selector--multi-without-group-MuiIconButton-root"
                                                                                  classes={
                                                                                    Object {
                                                                                      "disabled": "Mui-disabled",
                                                                                      "focusVisible": "Mui-focusVisible",
                                                                                      "root": "standalone-selector--multi-without-group-MuiButtonBase-root",
                                                                                    }
                                                                                  }
                                                                                  disabled={false}
                                                                                  focusRipple={true}
                                                                                  onClick={[Function]}
                                                                                >
                                                                                  <button
                                                                                    className="standalone-selector--multi-without-group-MuiButtonBase-root standalone-selector--multi-without-group-MuiIconButton-root"
                                                                                    disabled={false}
                                                                                    onBlur={[Function]}
                                                                                    onClick={[Function]}
                                                                                    onDragLeave={[Function]}
                                                                                    onFocus={[Function]}
                                                                                    onKeyDown={[Function]}
                                                                                    onKeyUp={[Function]}
                                                                                    onMouseDown={[Function]}
                                                                                    onMouseLeave={[Function]}
                                                                                    onMouseUp={[Function]}
                                                                                    onTouchEnd={[Function]}
                                                                                    onTouchMove={[Function]}
                                                                                    onTouchStart={[Function]}
                                                                                    tabIndex={0}
                                                                                    type="button"
                                                                                  >
                                                                                    <span
                                                                                      className="standalone-selector--multi-without-group-MuiIconButton-label"
                                                                                    >
                                                                                      <ForwardRef(InfoIcon)
                                                                                        color="disabled"
                                                                                      >
                                                                                        <WithStyles(ForwardRef(SvgIcon))
                                                                                          color="disabled"
                                                                                        >
                                                                                          <ForwardRef(SvgIcon)
                                                                                            classes={
                                                                                              Object {
                                                                                                "colorAction": "standalone-selector--multi-without-group-MuiSvgIcon-colorAction",
                                                                                                "colorDisabled": "standalone-selector--multi-without-group-MuiSvgIcon-colorDisabled",
                                                                                                "colorError": "standalone-selector--multi-without-group-MuiSvgIcon-colorError",
                                                                                                "colorPrimary": "standalone-selector--multi-without-group-MuiSvgIcon-colorPrimary",
                                                                                                "colorSecondary": "standalone-selector--multi-without-group-MuiSvgIcon-colorSecondary",
                                                                                                "fontSizeInherit": "standalone-selector--multi-without-group-MuiSvgIcon-fontSizeInherit",
                                                                                                "fontSizeLarge": "standalone-selector--multi-without-group-MuiSvgIcon-fontSizeLarge",
                                                                                                "fontSizeSmall": "standalone-selector--multi-without-group-MuiSvgIcon-fontSizeSmall",
                                                                                                "root": "standalone-selector--multi-without-group-MuiSvgIcon-root",
                                                                                              }
                                                                                            }
                                                                                            color="disabled"
                                                                                          >
                                                                                            <svg
                                                                                              aria-hidden={true}
                                                                                              className="standalone-selector--multi-without-group-MuiSvgIcon-root standalone-selector--multi-without-group-MuiSvgIcon-colorDisabled"
                                                                                              focusable="false"
                                                                                              viewBox="0 0 24 24"
                                                                                            >
                                                                                              <path
                                                                                                d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"
                                                                                              />
                                                                                            </svg>
                                                                                          </ForwardRef(SvgIcon)>
                                                                                        </WithStyles(ForwardRef(SvgIcon))>
                                                                                      </ForwardRef(InfoIcon)>
                                                                                    </span>
                                                                                    <WithStyles(memo)
                                                                                      center={true}
                                                                                    >
                                                                                      <ForwardRef(TouchRipple)
                                                                                        center={true}
                                                                                        classes={
                                                                                          Object {
                                                                                            "child": "standalone-selector--multi-without-group-MuiTouchRipple-child",
                                                                                            "childLeaving": "standalone-selector--multi-without-group-MuiTouchRipple-childLeaving",
                                                                                            "childPulsate": "standalone-selector--multi-without-group-MuiTouchRipple-childPulsate",
                                                                                            "ripple": "standalone-selector--multi-without-group-MuiTouchRipple-ripple",
                                                                                            "ripplePulsate": "standalone-selector--multi-without-group-MuiTouchRipple-ripplePulsate",
                                                                                            "rippleVisible": "standalone-selector--multi-without-group-MuiTouchRipple-rippleVisible",
                                                                                            "root": "standalone-selector--multi-without-group-MuiTouchRipple-root",
                                                                                          }
                                                                                        }
                                                                                      >
                                                                                        <span
                                                                                          className="standalone-selector--multi-without-group-MuiTouchRipple-root"
                                                                                        >
                                                                                          <TransitionGroup
                                                                                            childFactory={[Function]}
                                                                                            component={null}
                                                                                            exit={true}
                                                                                          />
                                                                                        </span>
                                                                                      </ForwardRef(TouchRipple)>
                                                                                    </WithStyles(memo)>
                                                                                  </button>
                                                                                </ForwardRef(ButtonBase)>
                                                                              </WithStyles(ForwardRef(ButtonBase))>
                                                                            </ForwardRef(IconButton)>
                                                                          </WithStyles(ForwardRef(IconButton))>
                                                                        </div>
                                                                      </ForwardRef(InputAdornment)>
                                                                    </WithStyles(ForwardRef(InputAdornment))>
                                                                  </div>
                                                                </ForwardRef(InputBase)>
                                                              </WithStyles(ForwardRef(InputBase))>
                                                            </ForwardRef(Input)>
                                                          </WithStyles(ForwardRef(Input))>
                                                        </div>
                                                      </ForwardRef(FormControl)>
                                                    </WithStyles(ForwardRef(FormControl))>
                                                  </ForwardRef(TextField)>
                                                </WithStyles(ForwardRef(TextField))>
                                              </ForwardRef(TextFieldWithHelpInner)>
                                            </div>
                                          </ForwardRef(Autocomplete)>
                                        </WithStyles(ForwardRef(Autocomplete))>
                                      </div>
                                    </ForwardRef(Typography)>
                                  </WithStyles(ForwardRef(Typography))>
                                </Memo(MultiSelectWithoutGroup)>
                              </Component>
                            </StylesProvider>
                          </AdvThemeSelector>
                        </ThemeSelector>
                      </Memo(DialogContextProvider)>
                    </Router>
                  </Memo(PermissionContextProvider)>
                </QueryClientProvider>
              </ThemeProvider>
            </Memo(ThemeProvider)>
          </MuiPickersUtilsProvider>
        </Memo(MuiPickerUtils)>
      </I18nextProvider>
    </Memo(CCI18nProvider)>
  </Suspense>
</Memo(ComponentsCareFramework)>
`;

exports[`Storyshots Standalone/Selector Single 1`] = `
<Memo(ComponentsCareFramework)
  defaultTheme={[Function]}
>
  <Suspense
    fallback={<Memo(Loader) />}
  >
    <Memo(CCI18nProvider)>
      <I18nextProvider
        i18n={
          I18n {
            "addResource": [Function],
            "addResourceBundle": [Function],
            "addResources": [Function],
            "format": undefined,
            "getDataByLanguage": [Function],
            "getResource": [Function],
            "getResourceBundle": [Function],
            "hasResourceBundle": [Function],
            "isInitialized": true,
            "isLanguageChangingTo": undefined,
            "language": "en",
            "languages": Array [
              "en",
            ],
            "logger": Logger {
              "debug": true,
              "logger": Object {
                "error": [Function],
                "log": [Function],
                "output": [Function],
                "type": "logger",
                "warn": [Function],
              },
              "options": Object {
                "appendNamespaceToCIMode": false,
                "appendNamespaceToMissingKey": false,
                "contextSeparator": "_",
                "debug": true,
                "defaultNS": "translation",
                "fallbackLng": Array [
                  "en",
                ],
                "fallbackNS": false,
                "initImmediate": false,
                "interpolation": Object {
                  "escapeValue": false,
                },
                "joinArrays": false,
                "keySeparator": ".",
                "load": "all",
                "missingInterpolationHandler": false,
                "missingKeyHandler": false,
                "nonExplicitSupportedLngs": true,
                "nonExplicitWhitelist": false,
                "ns": Array [],
                "nsSeparator": ":",
                "overloadTranslationOptionHandler": [Function],
                "parseMissingKeyHandler": false,
                "partialBundledLanguages": false,
                "pluralSeparator": "_",
                "postProcess": false,
                "postProcessPassResolved": false,
                "preload": false,
                "resources": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
                "returnEmptyString": true,
                "returnNull": true,
                "returnObjects": false,
                "returnedObjectHandler": false,
                "saveMissing": false,
                "saveMissingPlurals": true,
                "saveMissingTo": "fallback",
                "simplifyPluralSuffix": true,
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "updateMissing": false,
                "whitelist": false,
              },
              "prefix": "i18next:",
            },
            "modules": Object {
              "external": Array [],
              "languageDetector": [Function],
            },
            "observers": Object {
              "languageChanged": Array [
                [Function],
                [Function],
                [Function],
                [Function],
              ],
            },
            "options": Object {
              "appendNamespaceToCIMode": false,
              "appendNamespaceToMissingKey": false,
              "contextSeparator": "_",
              "debug": true,
              "defaultNS": "translation",
              "fallbackLng": Array [
                "en",
              ],
              "fallbackNS": false,
              "initImmediate": false,
              "interpolation": Object {
                "escapeValue": false,
              },
              "joinArrays": false,
              "keySeparator": ".",
              "load": "all",
              "missingInterpolationHandler": false,
              "missingKeyHandler": false,
              "nonExplicitSupportedLngs": true,
              "nonExplicitWhitelist": false,
              "ns": Array [],
              "nsSeparator": ":",
              "overloadTranslationOptionHandler": [Function],
              "parseMissingKeyHandler": false,
              "partialBundledLanguages": false,
              "pluralSeparator": "_",
              "postProcess": false,
              "postProcessPassResolved": false,
              "preload": false,
              "resources": Object {
                "de": Object {},
                "en": Object {},
                "fr": Object {},
                "ru": Object {},
                "uz": Object {},
              },
              "returnEmptyString": true,
              "returnNull": true,
              "returnObjects": false,
              "returnedObjectHandler": false,
              "saveMissing": false,
              "saveMissingPlurals": true,
              "saveMissingTo": "fallback",
              "simplifyPluralSuffix": true,
              "supportedLngs": Array [
                "de",
                "en",
                "fr",
                "ru",
                "uz",
                "cimode",
              ],
              "updateMissing": false,
              "whitelist": false,
            },
            "removeResourceBundle": [Function],
            "reportNamespaces": ReportNamespaces {
              "usedNamespaces": Object {
                "translation": true,
              },
            },
            "services": Object {
              "backendConnector": Connector {
                "backend": null,
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::backendConnector:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::backendConnector:",
                },
                "observers": Object {
                  "*": Array [
                    [Function],
                  ],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "queue": Array [],
                "services": [Circular],
                "state": Object {},
                "store": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
              },
              "interpolator": Interpolator {
                "alwaysFormat": false,
                "escape": [Function],
                "escapeValue": false,
                "format": [Function],
                "formatSeparator": ",",
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::interpolator:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::interpolator:",
                },
                "maxReplaces": 1000,
                "nestingOptionsSeparator": ",",
                "nestingPrefix": "\\\\$t\\\\(",
                "nestingRegexp": /\\\\\\$t\\\\\\(\\(\\.\\+\\?\\)\\\\\\)/g,
                "nestingSuffix": "\\\\)",
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "{{",
                "regexp": /\\{\\{\\(\\.\\+\\?\\)\\}\\}/g,
                "regexpUnescape": /\\{\\{-\\(\\.\\+\\?\\)\\}\\}/g,
                "suffix": "}}",
                "unescapePrefix": "-",
                "unescapeSuffix": "",
                "useRawValueToEscape": false,
              },
              "languageDetector": Browser {
                "detectors": Object {
                  "cookie": Object {
                    "cacheUserLanguage": [Function],
                    "lookup": [Function],
                    "name": "cookie",
                  },
                  "htmlTag": Object {
                    "lookup": [Function],
                    "name": "htmlTag",
                  },
                  "localStorage": Object {
                    "cacheUserLanguage": [Function],
                    "lookup": [Function],
                    "name": "localStorage",
                  },
                  "navigator": Object {
                    "lookup": [Function],
                    "name": "navigator",
                  },
                  "path": Object {
                    "lookup": [Function],
                    "name": "path",
                  },
                  "querystring": Object {
                    "lookup": [Function],
                    "name": "querystring",
                  },
                  "sessionStorage": Object {
                    "cacheUserLanguage": [Function],
                    "lookup": [Function],
                    "name": "sessionStorage",
                  },
                  "subdomain": Object {
                    "lookup": [Function],
                    "name": "subdomain",
                  },
                },
                "i18nOptions": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "options": Object {
                  "caches": Array [
                    "localStorage",
                  ],
                  "excludeCacheFor": Array [
                    "cimode",
                  ],
                  "lookupCookie": "i18next",
                  "lookupLocalStorage": "i18nextLng",
                  "lookupQuerystring": "lng",
                  "lookupSessionStorage": "i18nextLng",
                  "order": Array [
                    "querystring",
                    "cookie",
                    "localStorage",
                    "sessionStorage",
                    "navigator",
                    "htmlTag",
                  ],
                },
                "services": [Circular],
                "type": "languageDetector",
              },
              "languageUtils": LanguageUtil {
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::languageUtils:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::languageUtils:",
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "whitelist": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
              },
              "logger": Logger {
                "debug": true,
                "logger": Object {
                  "error": [Function],
                  "log": [Function],
                  "output": [Function],
                  "type": "logger",
                  "warn": [Function],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "i18next:",
              },
              "pluralResolver": PluralResolver {
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::pluralResolver:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::pluralResolver:",
                },
                "options": Object {
                  "compatibilityJSON": undefined,
                  "prepend": "_",
                  "simplifyPluralSuffix": true,
                },
                "rules": Object {
                  "ach": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "af": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ak": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "am": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "an": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ar": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                      3,
                      11,
                      100,
                    ],
                    "plurals": [Function],
                  },
                  "arn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ast": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ay": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "az": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "be": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "bg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "br": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ca": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "cgg": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "cnr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "csb": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cy": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      8,
                    ],
                    "plurals": [Function],
                  },
                  "da": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "de": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dev": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dz": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "el": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "en": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "es": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "et": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fa": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "fi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fil": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ga": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      7,
                      11,
                    ],
                    "plurals": [Function],
                  },
                  "gd": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "gl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gun": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ha": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "he": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "hi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ht": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "hu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ia": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "id": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "is": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "it": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "iw": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "ja": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jbo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jv": Object {
                    "numbers": Array [
                      0,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ka": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kk": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "km": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ko": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ku": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "kw": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      4,
                    ],
                    "plurals": [Function],
                  },
                  "ky": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ln": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "lo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lt": Object {
                    "numbers": Array [
                      1,
                      2,
                      10,
                    ],
                    "plurals": [Function],
                  },
                  "lv": Object {
                    "numbers": Array [
                      1,
                      2,
                      0,
                    ],
                    "plurals": [Function],
                  },
                  "mai": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mfe": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ml": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mnk": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ms": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "mt": Object {
                    "numbers": Array [
                      1,
                      2,
                      11,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "nah": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ne": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "no": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nso": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "oc": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "or": Object {
                    "numbers": Array [
                      2,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "pa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pl": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "pms": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ps": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-BR": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-PT": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "rm": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ro": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "ru": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sah": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sco": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "se": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "si": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sl": Object {
                    "numbers": Array [
                      5,
                      1,
                      2,
                      3,
                    ],
                    "plurals": [Function],
                  },
                  "so": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "son": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sq": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "su": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sv": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sw": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ta": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "te": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "th": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ti": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tt": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ug": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "uk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "uz": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "vi": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "wa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "wo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "yo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "zh": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                },
              },
              "resourceStore": Object {
                "de": Object {},
                "en": Object {},
                "fr": Object {},
                "ru": Object {},
                "uz": Object {},
              },
              "utils": Object {
                "hasLoadedNamespace": [Function],
              },
            },
            "store": Object {
              "de": Object {},
              "en": Object {},
              "fr": Object {},
              "ru": Object {},
              "uz": Object {},
            },
            "translator": Translator {
              "backendConnector": Connector {
                "backend": null,
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::backendConnector:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::backendConnector:",
                },
                "observers": Object {
                  "*": Array [
                    [Function],
                  ],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "queue": Array [],
                "services": Object {
                  "backendConnector": [Circular],
                  "interpolator": Interpolator {
                    "alwaysFormat": false,
                    "escape": [Function],
                    "escapeValue": false,
                    "format": [Function],
                    "formatSeparator": ",",
                    "logger": Logger {
                      "debug": true,
                      "logger": Object {
                        "error": [Function],
                        "log": [Function],
                        "output": [Function],
                        "type": "logger",
                        "warn": [Function],
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "prefix": "i18next::interpolator:",
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "prefix": "i18next::interpolator:",
                    },
                    "maxReplaces": 1000,
                    "nestingOptionsSeparator": ",",
                    "nestingPrefix": "\\\\$t\\\\(",
                    "nestingRegexp": /\\\\\\$t\\\\\\(\\(\\.\\+\\?\\)\\\\\\)/g,
                    "nestingSuffix": "\\\\)",
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "{{",
                    "regexp": /\\{\\{\\(\\.\\+\\?\\)\\}\\}/g,
                    "regexpUnescape": /\\{\\{-\\(\\.\\+\\?\\)\\}\\}/g,
                    "suffix": "}}",
                    "unescapePrefix": "-",
                    "unescapeSuffix": "",
                    "useRawValueToEscape": false,
                  },
                  "languageDetector": Browser {
                    "detectors": Object {
                      "cookie": Object {
                        "cacheUserLanguage": [Function],
                        "lookup": [Function],
                        "name": "cookie",
                      },
                      "htmlTag": Object {
                        "lookup": [Function],
                        "name": "htmlTag",
                      },
                      "localStorage": Object {
                        "cacheUserLanguage": [Function],
                        "lookup": [Function],
                        "name": "localStorage",
                      },
                      "navigator": Object {
                        "lookup": [Function],
                        "name": "navigator",
                      },
                      "path": Object {
                        "lookup": [Function],
                        "name": "path",
                      },
                      "querystring": Object {
                        "lookup": [Function],
                        "name": "querystring",
                      },
                      "sessionStorage": Object {
                        "cacheUserLanguage": [Function],
                        "lookup": [Function],
                        "name": "sessionStorage",
                      },
                      "subdomain": Object {
                        "lookup": [Function],
                        "name": "subdomain",
                      },
                    },
                    "i18nOptions": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "options": Object {
                      "caches": Array [
                        "localStorage",
                      ],
                      "excludeCacheFor": Array [
                        "cimode",
                      ],
                      "lookupCookie": "i18next",
                      "lookupLocalStorage": "i18nextLng",
                      "lookupQuerystring": "lng",
                      "lookupSessionStorage": "i18nextLng",
                      "order": Array [
                        "querystring",
                        "cookie",
                        "localStorage",
                        "sessionStorage",
                        "navigator",
                        "htmlTag",
                      ],
                    },
                    "services": [Circular],
                    "type": "languageDetector",
                  },
                  "languageUtils": LanguageUtil {
                    "logger": Logger {
                      "debug": true,
                      "logger": Object {
                        "error": [Function],
                        "log": [Function],
                        "output": [Function],
                        "type": "logger",
                        "warn": [Function],
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "prefix": "i18next::languageUtils:",
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "prefix": "i18next::languageUtils:",
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "whitelist": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                  },
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next:",
                  },
                  "pluralResolver": PluralResolver {
                    "languageUtils": LanguageUtil {
                      "logger": Logger {
                        "debug": true,
                        "logger": Object {
                          "error": [Function],
                          "log": [Function],
                          "output": [Function],
                          "type": "logger",
                          "warn": [Function],
                        },
                        "options": Object {
                          "appendNamespaceToCIMode": false,
                          "appendNamespaceToMissingKey": false,
                          "contextSeparator": "_",
                          "debug": true,
                          "defaultNS": "translation",
                          "fallbackLng": Array [
                            "en",
                          ],
                          "fallbackNS": false,
                          "initImmediate": false,
                          "interpolation": Object {
                            "escapeValue": false,
                          },
                          "joinArrays": false,
                          "keySeparator": ".",
                          "load": "all",
                          "missingInterpolationHandler": false,
                          "missingKeyHandler": false,
                          "nonExplicitSupportedLngs": true,
                          "nonExplicitWhitelist": false,
                          "ns": Array [],
                          "nsSeparator": ":",
                          "overloadTranslationOptionHandler": [Function],
                          "parseMissingKeyHandler": false,
                          "partialBundledLanguages": false,
                          "pluralSeparator": "_",
                          "postProcess": false,
                          "postProcessPassResolved": false,
                          "prefix": "i18next::languageUtils:",
                          "preload": false,
                          "resources": Object {
                            "de": Object {},
                            "en": Object {},
                            "fr": Object {},
                            "ru": Object {},
                            "uz": Object {},
                          },
                          "returnEmptyString": true,
                          "returnNull": true,
                          "returnObjects": false,
                          "returnedObjectHandler": false,
                          "saveMissing": false,
                          "saveMissingPlurals": true,
                          "saveMissingTo": "fallback",
                          "simplifyPluralSuffix": true,
                          "supportedLngs": Array [
                            "de",
                            "en",
                            "fr",
                            "ru",
                            "uz",
                            "cimode",
                          ],
                          "updateMissing": false,
                          "whitelist": false,
                        },
                        "prefix": "i18next::languageUtils:",
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "whitelist": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                    },
                    "logger": Logger {
                      "debug": true,
                      "logger": Object {
                        "error": [Function],
                        "log": [Function],
                        "output": [Function],
                        "type": "logger",
                        "warn": [Function],
                      },
                      "options": Object {
                        "appendNamespaceToCIMode": false,
                        "appendNamespaceToMissingKey": false,
                        "contextSeparator": "_",
                        "debug": true,
                        "defaultNS": "translation",
                        "fallbackLng": Array [
                          "en",
                        ],
                        "fallbackNS": false,
                        "initImmediate": false,
                        "interpolation": Object {
                          "escapeValue": false,
                        },
                        "joinArrays": false,
                        "keySeparator": ".",
                        "load": "all",
                        "missingInterpolationHandler": false,
                        "missingKeyHandler": false,
                        "nonExplicitSupportedLngs": true,
                        "nonExplicitWhitelist": false,
                        "ns": Array [],
                        "nsSeparator": ":",
                        "overloadTranslationOptionHandler": [Function],
                        "parseMissingKeyHandler": false,
                        "partialBundledLanguages": false,
                        "pluralSeparator": "_",
                        "postProcess": false,
                        "postProcessPassResolved": false,
                        "prefix": "i18next::pluralResolver:",
                        "preload": false,
                        "resources": Object {
                          "de": Object {},
                          "en": Object {},
                          "fr": Object {},
                          "ru": Object {},
                          "uz": Object {},
                        },
                        "returnEmptyString": true,
                        "returnNull": true,
                        "returnObjects": false,
                        "returnedObjectHandler": false,
                        "saveMissing": false,
                        "saveMissingPlurals": true,
                        "saveMissingTo": "fallback",
                        "simplifyPluralSuffix": true,
                        "supportedLngs": Array [
                          "de",
                          "en",
                          "fr",
                          "ru",
                          "uz",
                          "cimode",
                        ],
                        "updateMissing": false,
                        "whitelist": false,
                      },
                      "prefix": "i18next::pluralResolver:",
                    },
                    "options": Object {
                      "compatibilityJSON": undefined,
                      "prepend": "_",
                      "simplifyPluralSuffix": true,
                    },
                    "rules": Object {
                      "ach": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "af": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ak": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "am": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "an": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ar": Object {
                        "numbers": Array [
                          0,
                          1,
                          2,
                          3,
                          11,
                          100,
                        ],
                        "plurals": [Function],
                      },
                      "arn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ast": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ay": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "az": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "be": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "bg": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "bn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "bo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "br": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "bs": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "ca": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "cgg": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "cnr": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "cs": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "csb": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "cy": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          8,
                        ],
                        "plurals": [Function],
                      },
                      "da": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "de": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "dev": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "dz": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "el": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "en": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "eo": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "es": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "et": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "eu": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fa": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "fi": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fil": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fo": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fr": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fur": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "fy": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ga": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          7,
                          11,
                        ],
                        "plurals": [Function],
                      },
                      "gd": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          20,
                        ],
                        "plurals": [Function],
                      },
                      "gl": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "gu": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "gun": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ha": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "he": Object {
                        "numbers": Array [
                          1,
                          2,
                          20,
                          21,
                        ],
                        "plurals": [Function],
                      },
                      "hi": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "hr": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "ht": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "hu": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "hy": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ia": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "id": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "is": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "it": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "iw": Object {
                        "numbers": Array [
                          1,
                          2,
                          20,
                          21,
                        ],
                        "plurals": [Function],
                      },
                      "ja": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "jbo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "jv": Object {
                        "numbers": Array [
                          0,
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ka": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "kk": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "km": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "kn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ko": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ku": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "kw": Object {
                        "numbers": Array [
                          1,
                          2,
                          3,
                          4,
                        ],
                        "plurals": [Function],
                      },
                      "ky": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "lb": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ln": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "lo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "lt": Object {
                        "numbers": Array [
                          1,
                          2,
                          10,
                        ],
                        "plurals": [Function],
                      },
                      "lv": Object {
                        "numbers": Array [
                          1,
                          2,
                          0,
                        ],
                        "plurals": [Function],
                      },
                      "mai": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mfe": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mg": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mi": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mk": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ml": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mnk": Object {
                        "numbers": Array [
                          0,
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "mr": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ms": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "mt": Object {
                        "numbers": Array [
                          1,
                          2,
                          11,
                          20,
                        ],
                        "plurals": [Function],
                      },
                      "nah": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nap": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nb": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ne": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nl": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nn": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "no": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "nso": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "oc": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "or": Object {
                        "numbers": Array [
                          2,
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "pa": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pap": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pl": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "pms": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ps": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pt": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pt-BR": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "pt-PT": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "rm": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ro": Object {
                        "numbers": Array [
                          1,
                          2,
                          20,
                        ],
                        "plurals": [Function],
                      },
                      "ru": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "sah": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "sco": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "se": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "si": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sk": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "sl": Object {
                        "numbers": Array [
                          5,
                          1,
                          2,
                          3,
                        ],
                        "plurals": [Function],
                      },
                      "so": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "son": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sq": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sr": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "su": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "sv": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "sw": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "ta": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "te": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tg": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "th": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ti": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tk": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tr": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "tt": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "ug": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "uk": Object {
                        "numbers": Array [
                          1,
                          2,
                          5,
                        ],
                        "plurals": [Function],
                      },
                      "ur": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "uz": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "vi": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "wa": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "wo": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                      "yo": Object {
                        "numbers": Array [
                          1,
                          2,
                        ],
                        "plurals": [Function],
                      },
                      "zh": Object {
                        "numbers": Array [
                          1,
                        ],
                        "plurals": [Function],
                      },
                    },
                  },
                  "resourceStore": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "utils": Object {
                    "hasLoadedNamespace": [Function],
                  },
                },
                "state": Object {},
                "store": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
              },
              "interpolator": Interpolator {
                "alwaysFormat": false,
                "escape": [Function],
                "escapeValue": false,
                "format": [Function],
                "formatSeparator": ",",
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::interpolator:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::interpolator:",
                },
                "maxReplaces": 1000,
                "nestingOptionsSeparator": ",",
                "nestingPrefix": "\\\\$t\\\\(",
                "nestingRegexp": /\\\\\\$t\\\\\\(\\(\\.\\+\\?\\)\\\\\\)/g,
                "nestingSuffix": "\\\\)",
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "{{",
                "regexp": /\\{\\{\\(\\.\\+\\?\\)\\}\\}/g,
                "regexpUnescape": /\\{\\{-\\(\\.\\+\\?\\)\\}\\}/g,
                "suffix": "}}",
                "unescapePrefix": "-",
                "unescapeSuffix": "",
                "useRawValueToEscape": false,
              },
              "language": "en",
              "languageUtils": LanguageUtil {
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::languageUtils:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::languageUtils:",
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "whitelist": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
              },
              "logger": Logger {
                "debug": true,
                "logger": Object {
                  "error": [Function],
                  "log": [Function],
                  "output": [Function],
                  "type": "logger",
                  "warn": [Function],
                },
                "options": Object {
                  "appendNamespaceToCIMode": false,
                  "appendNamespaceToMissingKey": false,
                  "contextSeparator": "_",
                  "debug": true,
                  "defaultNS": "translation",
                  "fallbackLng": Array [
                    "en",
                  ],
                  "fallbackNS": false,
                  "initImmediate": false,
                  "interpolation": Object {
                    "escapeValue": false,
                  },
                  "joinArrays": false,
                  "keySeparator": ".",
                  "load": "all",
                  "missingInterpolationHandler": false,
                  "missingKeyHandler": false,
                  "nonExplicitSupportedLngs": true,
                  "nonExplicitWhitelist": false,
                  "ns": Array [],
                  "nsSeparator": ":",
                  "overloadTranslationOptionHandler": [Function],
                  "parseMissingKeyHandler": false,
                  "partialBundledLanguages": false,
                  "pluralSeparator": "_",
                  "postProcess": false,
                  "postProcessPassResolved": false,
                  "prefix": "i18next::translator:",
                  "preload": false,
                  "resources": Object {
                    "de": Object {},
                    "en": Object {},
                    "fr": Object {},
                    "ru": Object {},
                    "uz": Object {},
                  },
                  "returnEmptyString": true,
                  "returnNull": true,
                  "returnObjects": false,
                  "returnedObjectHandler": false,
                  "saveMissing": false,
                  "saveMissingPlurals": true,
                  "saveMissingTo": "fallback",
                  "simplifyPluralSuffix": true,
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "updateMissing": false,
                  "whitelist": false,
                },
                "prefix": "i18next::translator:",
              },
              "observers": Object {
                "*": Array [
                  [Function],
                ],
              },
              "options": Object {
                "appendNamespaceToCIMode": false,
                "appendNamespaceToMissingKey": false,
                "contextSeparator": "_",
                "debug": true,
                "defaultNS": "translation",
                "fallbackLng": Array [
                  "en",
                ],
                "fallbackNS": false,
                "initImmediate": false,
                "interpolation": Object {
                  "escapeValue": false,
                },
                "joinArrays": false,
                "keySeparator": ".",
                "load": "all",
                "missingInterpolationHandler": false,
                "missingKeyHandler": false,
                "nonExplicitSupportedLngs": true,
                "nonExplicitWhitelist": false,
                "ns": Array [],
                "nsSeparator": ":",
                "overloadTranslationOptionHandler": [Function],
                "parseMissingKeyHandler": false,
                "partialBundledLanguages": false,
                "pluralSeparator": "_",
                "postProcess": false,
                "postProcessPassResolved": false,
                "preload": false,
                "resources": Object {
                  "de": Object {},
                  "en": Object {},
                  "fr": Object {},
                  "ru": Object {},
                  "uz": Object {},
                },
                "returnEmptyString": true,
                "returnNull": true,
                "returnObjects": false,
                "returnedObjectHandler": false,
                "saveMissing": false,
                "saveMissingPlurals": true,
                "saveMissingTo": "fallback",
                "simplifyPluralSuffix": true,
                "supportedLngs": Array [
                  "de",
                  "en",
                  "fr",
                  "ru",
                  "uz",
                  "cimode",
                ],
                "updateMissing": false,
                "whitelist": false,
              },
              "pluralResolver": PluralResolver {
                "languageUtils": LanguageUtil {
                  "logger": Logger {
                    "debug": true,
                    "logger": Object {
                      "error": [Function],
                      "log": [Function],
                      "output": [Function],
                      "type": "logger",
                      "warn": [Function],
                    },
                    "options": Object {
                      "appendNamespaceToCIMode": false,
                      "appendNamespaceToMissingKey": false,
                      "contextSeparator": "_",
                      "debug": true,
                      "defaultNS": "translation",
                      "fallbackLng": Array [
                        "en",
                      ],
                      "fallbackNS": false,
                      "initImmediate": false,
                      "interpolation": Object {
                        "escapeValue": false,
                      },
                      "joinArrays": false,
                      "keySeparator": ".",
                      "load": "all",
                      "missingInterpolationHandler": false,
                      "missingKeyHandler": false,
                      "nonExplicitSupportedLngs": true,
                      "nonExplicitWhitelist": false,
                      "ns": Array [],
                      "nsSeparator": ":",
                      "overloadTranslationOptionHandler": [Function],
                      "parseMissingKeyHandler": false,
                      "partialBundledLanguages": false,
                      "pluralSeparator": "_",
                      "postProcess": false,
                      "postProcessPassResolved": false,
                      "prefix": "i18next::languageUtils:",
                      "preload": false,
                      "resources": Object {
                        "de": Object {},
                        "en": Object {},
                        "fr": Object {},
                        "ru": Object {},
                        "uz": Object {},
                      },
                      "returnEmptyString": true,
                      "returnNull": true,
                      "returnObjects": false,
                      "returnedObjectHandler": false,
                      "saveMissing": false,
                      "saveMissingPlurals": true,
                      "saveMissingTo": "fallback",
                      "simplifyPluralSuffix": true,
                      "supportedLngs": Array [
                        "de",
                        "en",
                        "fr",
                        "ru",
                        "uz",
                        "cimode",
                      ],
                      "updateMissing": false,
                      "whitelist": false,
                    },
                    "prefix": "i18next::languageUtils:",
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "supportedLngs": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                  "whitelist": Array [
                    "de",
                    "en",
                    "fr",
                    "ru",
                    "uz",
                    "cimode",
                  ],
                },
                "logger": Logger {
                  "debug": true,
                  "logger": Object {
                    "error": [Function],
                    "log": [Function],
                    "output": [Function],
                    "type": "logger",
                    "warn": [Function],
                  },
                  "options": Object {
                    "appendNamespaceToCIMode": false,
                    "appendNamespaceToMissingKey": false,
                    "contextSeparator": "_",
                    "debug": true,
                    "defaultNS": "translation",
                    "fallbackLng": Array [
                      "en",
                    ],
                    "fallbackNS": false,
                    "initImmediate": false,
                    "interpolation": Object {
                      "escapeValue": false,
                    },
                    "joinArrays": false,
                    "keySeparator": ".",
                    "load": "all",
                    "missingInterpolationHandler": false,
                    "missingKeyHandler": false,
                    "nonExplicitSupportedLngs": true,
                    "nonExplicitWhitelist": false,
                    "ns": Array [],
                    "nsSeparator": ":",
                    "overloadTranslationOptionHandler": [Function],
                    "parseMissingKeyHandler": false,
                    "partialBundledLanguages": false,
                    "pluralSeparator": "_",
                    "postProcess": false,
                    "postProcessPassResolved": false,
                    "prefix": "i18next::pluralResolver:",
                    "preload": false,
                    "resources": Object {
                      "de": Object {},
                      "en": Object {},
                      "fr": Object {},
                      "ru": Object {},
                      "uz": Object {},
                    },
                    "returnEmptyString": true,
                    "returnNull": true,
                    "returnObjects": false,
                    "returnedObjectHandler": false,
                    "saveMissing": false,
                    "saveMissingPlurals": true,
                    "saveMissingTo": "fallback",
                    "simplifyPluralSuffix": true,
                    "supportedLngs": Array [
                      "de",
                      "en",
                      "fr",
                      "ru",
                      "uz",
                      "cimode",
                    ],
                    "updateMissing": false,
                    "whitelist": false,
                  },
                  "prefix": "i18next::pluralResolver:",
                },
                "options": Object {
                  "compatibilityJSON": undefined,
                  "prepend": "_",
                  "simplifyPluralSuffix": true,
                },
                "rules": Object {
                  "ach": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "af": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ak": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "am": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "an": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ar": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                      3,
                      11,
                      100,
                    ],
                    "plurals": [Function],
                  },
                  "arn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ast": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ay": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "az": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "be": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "bg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "br": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "bs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ca": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "cgg": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "cnr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cs": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "csb": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "cy": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      8,
                    ],
                    "plurals": [Function],
                  },
                  "da": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "de": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dev": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "dz": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "el": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "en": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "es": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "et": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "eu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fa": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "fi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fil": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "fy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ga": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      7,
                      11,
                    ],
                    "plurals": [Function],
                  },
                  "gd": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "gl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "gun": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ha": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "he": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "hi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ht": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "hu": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "hy": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ia": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "id": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "is": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "it": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "iw": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                      21,
                    ],
                    "plurals": [Function],
                  },
                  "ja": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jbo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "jv": Object {
                    "numbers": Array [
                      0,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ka": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kk": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "km": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "kn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ko": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ku": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "kw": Object {
                    "numbers": Array [
                      1,
                      2,
                      3,
                      4,
                    ],
                    "plurals": [Function],
                  },
                  "ky": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ln": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "lo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "lt": Object {
                    "numbers": Array [
                      1,
                      2,
                      10,
                    ],
                    "plurals": [Function],
                  },
                  "lv": Object {
                    "numbers": Array [
                      1,
                      2,
                      0,
                    ],
                    "plurals": [Function],
                  },
                  "mai": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mfe": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mi": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ml": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mnk": Object {
                    "numbers": Array [
                      0,
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "mr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ms": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "mt": Object {
                    "numbers": Array [
                      1,
                      2,
                      11,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "nah": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nb": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ne": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nl": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nn": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "no": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "nso": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "oc": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "or": Object {
                    "numbers": Array [
                      2,
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "pa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pap": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pl": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "pms": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ps": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-BR": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "pt-PT": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "rm": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ro": Object {
                    "numbers": Array [
                      1,
                      2,
                      20,
                    ],
                    "plurals": [Function],
                  },
                  "ru": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sah": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sco": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "se": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "si": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "sl": Object {
                    "numbers": Array [
                      5,
                      1,
                      2,
                      3,
                    ],
                    "plurals": [Function],
                  },
                  "so": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "son": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sq": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sr": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "su": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "sv": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "sw": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "ta": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "te": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tg": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "th": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ti": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tk": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tr": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "tt": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "ug": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "uk": Object {
                    "numbers": Array [
                      1,
                      2,
                      5,
                    ],
                    "plurals": [Function],
                  },
                  "ur": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "uz": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "vi": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "wa": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "wo": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                  "yo": Object {
                    "numbers": Array [
                      1,
                      2,
                    ],
                    "plurals": [Function],
                  },
                  "zh": Object {
                    "numbers": Array [
                      1,
                    ],
                    "plurals": [Function],
                  },
                },
              },
              "resourceStore": Object {
                "de": Object {},
                "en": Object {},
                "fr": Object {},
                "ru": Object {},
                "uz": Object {},
              },
              "utils": Object {
                "hasLoadedNamespace": [Function],
              },
            },
          }
        }
        key="en"
      >
        <Memo(MuiPickerUtils)>
          <MuiPickersUtilsProvider
            libInstance={[Function]}
            locale="en"
            utils={[Function]}
          >
            <Memo(ThemeProvider)
              defaultTheme={[Function]}
            >
              <ThemeProvider
                theme={
                  Object {
                    "breakpoints": Object {
                      "between": [Function],
                      "down": [Function],
                      "keys": Array [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl",
                      ],
                      "only": [Function],
                      "up": [Function],
                      "values": Object {
                        "lg": 1280,
                        "md": 960,
                        "sm": 600,
                        "xl": 1920,
                        "xs": 0,
                      },
                      "width": [Function],
                    },
                    "direction": "ltr",
                    "mixins": Object {
                      "gutters": [Function],
                      "toolbar": Object {
                        "@media (min-width:0px) and (orientation: landscape)": Object {
                          "minHeight": 48,
                        },
                        "@media (min-width:600px)": Object {
                          "minHeight": 64,
                        },
                        "minHeight": 56,
                      },
                    },
                    "overrides": Object {},
                    "palette": Object {
                      "action": Object {
                        "activatedOpacity": 0.12,
                        "active": "rgba(0, 0, 0, 0.54)",
                        "disabled": "rgba(0, 0, 0, 0.26)",
                        "disabledBackground": "rgba(0, 0, 0, 0.12)",
                        "disabledOpacity": 0.38,
                        "focus": "rgba(0, 0, 0, 0.12)",
                        "focusOpacity": 0.12,
                        "hover": "rgba(0, 0, 0, 0.04)",
                        "hoverOpacity": 0.04,
                        "selected": "rgba(0, 0, 0, 0.08)",
                        "selectedOpacity": 0.08,
                      },
                      "augmentColor": [Function],
                      "background": Object {
                        "default": "#fafafa",
                        "paper": "#fff",
                      },
                      "common": Object {
                        "black": "#000",
                        "white": "#fff",
                      },
                      "contrastThreshold": 3,
                      "divider": "rgba(0, 0, 0, 0.12)",
                      "error": Object {
                        "contrastText": "#fff",
                        "dark": "#d32f2f",
                        "light": "#e57373",
                        "main": "#f44336",
                      },
                      "getContrastText": [Function],
                      "grey": Object {
                        "100": "#f5f5f5",
                        "200": "#eeeeee",
                        "300": "#e0e0e0",
                        "400": "#bdbdbd",
                        "50": "#fafafa",
                        "500": "#9e9e9e",
                        "600": "#757575",
                        "700": "#616161",
                        "800": "#424242",
                        "900": "#212121",
                        "A100": "#d5d5d5",
                        "A200": "#aaaaaa",
                        "A400": "#303030",
                        "A700": "#616161",
                      },
                      "info": Object {
                        "contrastText": "#fff",
                        "dark": "#1976d2",
                        "light": "#64b5f6",
                        "main": "#2196f3",
                      },
                      "primary": Object {
                        "contrastText": "#fff",
                        "dark": "rgb(44, 56, 126)",
                        "light": "rgb(101, 115, 195)",
                        "main": "#3f51b5",
                      },
                      "secondary": Object {
                        "contrastText": "#fff",
                        "dark": "rgb(171, 0, 60)",
                        "light": "rgb(247, 51, 120)",
                        "main": "#f50057",
                      },
                      "success": Object {
                        "contrastText": "rgba(0, 0, 0, 0.87)",
                        "dark": "#388e3c",
                        "light": "#81c784",
                        "main": "#4caf50",
                      },
                      "text": Object {
                        "disabled": "rgba(0, 0, 0, 0.38)",
                        "hint": "rgba(0, 0, 0, 0.38)",
                        "primary": "rgba(0, 0, 0, 0.87)",
                        "secondary": "rgba(0, 0, 0, 0.54)",
                      },
                      "tonalOffset": 0.2,
                      "type": "light",
                      "warning": Object {
                        "contrastText": "rgba(0, 0, 0, 0.87)",
                        "dark": "#f57c00",
                        "light": "#ffb74d",
                        "main": "#ff9800",
                      },
                    },
                    "props": Object {},
                    "shadows": Array [
                      "none",
                      "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                      "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                      "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                      "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                      "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                      "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                      "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                      "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                      "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                      "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                      "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                      "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                      "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                      "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                      "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                      "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                      "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                      "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                      "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                      "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                      "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                      "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                      "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                      "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                    ],
                    "shape": Object {
                      "borderRadius": 4,
                    },
                    "spacing": [Function],
                    "transitions": Object {
                      "create": [Function],
                      "duration": Object {
                        "complex": 375,
                        "enteringScreen": 225,
                        "leavingScreen": 195,
                        "short": 250,
                        "shorter": 200,
                        "shortest": 150,
                        "standard": 300,
                      },
                      "easing": Object {
                        "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                        "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                        "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                        "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                      },
                      "getAutoHeightDuration": [Function],
                    },
                    "typography": Object {
                      "body1": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.00938em",
                        "lineHeight": 1.5,
                      },
                      "body2": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.875rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.01071em",
                        "lineHeight": 1.43,
                      },
                      "button": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.875rem",
                        "fontWeight": 500,
                        "letterSpacing": "0.02857em",
                        "lineHeight": 1.75,
                        "textTransform": "uppercase",
                      },
                      "caption": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.75rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.03333em",
                        "lineHeight": 1.66,
                      },
                      "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                      "fontSize": 14,
                      "fontWeightBold": 700,
                      "fontWeightLight": 300,
                      "fontWeightMedium": 500,
                      "fontWeightRegular": 400,
                      "h1": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "6rem",
                        "fontWeight": 300,
                        "letterSpacing": "-0.01562em",
                        "lineHeight": 1.167,
                      },
                      "h2": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "3.75rem",
                        "fontWeight": 300,
                        "letterSpacing": "-0.00833em",
                        "lineHeight": 1.2,
                      },
                      "h3": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "3rem",
                        "fontWeight": 400,
                        "letterSpacing": "0em",
                        "lineHeight": 1.167,
                      },
                      "h4": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "2.125rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.00735em",
                        "lineHeight": 1.235,
                      },
                      "h5": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1.5rem",
                        "fontWeight": 400,
                        "letterSpacing": "0em",
                        "lineHeight": 1.334,
                      },
                      "h6": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1.25rem",
                        "fontWeight": 500,
                        "letterSpacing": "0.0075em",
                        "lineHeight": 1.6,
                      },
                      "htmlFontSize": 16,
                      "overline": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.75rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.08333em",
                        "lineHeight": 2.66,
                        "textTransform": "uppercase",
                      },
                      "pxToRem": [Function],
                      "round": [Function],
                      "subtitle1": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "1rem",
                        "fontWeight": 400,
                        "letterSpacing": "0.00938em",
                        "lineHeight": 1.75,
                      },
                      "subtitle2": Object {
                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                        "fontSize": "0.875rem",
                        "fontWeight": 500,
                        "letterSpacing": "0.00714em",
                        "lineHeight": 1.57,
                      },
                    },
                    "zIndex": Object {
                      "appBar": 1100,
                      "drawer": 1200,
                      "mobileStepper": 1000,
                      "modal": 1300,
                      "snackbar": 1400,
                      "speedDial": 1050,
                      "tooltip": 1500,
                    },
                    Symbol(mui.nested): false,
                  }
                }
              >
                <WithStyles(CssBaseline)>
                  <CssBaseline
                    classes={Object {}}
                  />
                </WithStyles(CssBaseline)>
                <QueryClientProvider
                  client={
                    QueryClient {
                      "defaultOptions": Object {},
                      "mutationCache": MutationCache {
                        "config": Object {},
                        "listeners": Array [],
                        "mutationId": 0,
                        "mutations": Array [],
                      },
                      "mutationDefaults": Array [],
                      "queryCache": QueryCache {
                        "config": Object {},
                        "listeners": Array [],
                        "queries": Array [],
                        "queriesMap": Object {},
                      },
                      "queryDefaults": Array [],
                      "unsubscribeFocus": [Function],
                      "unsubscribeOnline": [Function],
                    }
                  }
                >
                  <Memo(PermissionContextProvider)>
                    <Router
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "createHref": [Function],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                    >
                      <Memo(DialogContextProvider)>
                        <ThemeSelector>
                          <AdvThemeSelector>
                            <LanguageSelector />
                            <StylesProvider
                              generateClassName={[Function]}
                            >
                              <Component>
                                <Styled(MuiBox)
                                  m={2}
                                >
                                  <div
                                    className="standalone-selector--selector-single-MuiBox-root standalone-selector--selector-single-MuiBox-root-18"
                                  >
                                    <WithStyles(ForwardRef(FormControl))
                                      component="fieldset"
                                      fullWidth={true}
                                    >
                                      <ForwardRef(FormControl)
                                        classes={
                                          Object {
                                            "fullWidth": "standalone-selector--selector-single-MuiFormControl-fullWidth",
                                            "marginDense": "standalone-selector--selector-single-MuiFormControl-marginDense",
                                            "marginNormal": "standalone-selector--selector-single-MuiFormControl-marginNormal",
                                            "root": "standalone-selector--selector-single-MuiFormControl-root",
                                          }
                                        }
                                        component="fieldset"
                                        fullWidth={true}
                                      >
                                        <fieldset
                                          className="standalone-selector--selector-single-MuiFormControl-root standalone-selector--selector-single-MuiFormControl-fullWidth"
                                        >
                                          <Memo(SingleSelect)
                                            addNewLabel="Add"
                                            autocompleteId="single-select"
                                            disableClearable={false}
                                            disableSearch={false}
                                            disabled={false}
                                            enableIcons={false}
                                            grouped={false}
                                            label="Example selector"
                                            loadingText="Loading.."
                                            noGroupLabel=""
                                            onLoad={[Function]}
                                            onSelect={[Function]}
                                            openInfo={[Function]}
                                            placeholder="Select.."
                                            selected={null}
                                            variant="outlined"
                                          >
                                            <Memo(BaseSelector)
                                              addNewLabel="Add"
                                              autocompleteId="single-select"
                                              disableClearable={false}
                                              disableSearch={false}
                                              disabled={false}
                                              enableIcons={false}
                                              grouped={false}
                                              label="Example selector"
                                              loadingText="Loading.."
                                              noGroupLabel=""
                                              onLoad={[Function]}
                                              onSelect={[Function]}
                                              openInfo={[Function]}
                                              placeholder="Select.."
                                              selected={null}
                                              variant="outlined"
                                            >
                                              <Memo(InlineSwitch)
                                                displaySwitch={false}
                                                setSwitchValue={[Function]}
                                                switchValue={false}
                                              >
                                                <WithStyles(ForwardRef(Typography))
                                                  className="standalone-selector--selector-single-InlineSwitch-labelWithSwitch-26"
                                                  component="div"
                                                >
                                                  <ForwardRef(Typography)
                                                    className="standalone-selector--selector-single-InlineSwitch-labelWithSwitch-26"
                                                    classes={
                                                      Object {
                                                        "alignCenter": "standalone-selector--selector-single-MuiTypography-alignCenter",
                                                        "alignJustify": "standalone-selector--selector-single-MuiTypography-alignJustify",
                                                        "alignLeft": "standalone-selector--selector-single-MuiTypography-alignLeft",
                                                        "alignRight": "standalone-selector--selector-single-MuiTypography-alignRight",
                                                        "body1": "standalone-selector--selector-single-MuiTypography-body1",
                                                        "body2": "standalone-selector--selector-single-MuiTypography-body2",
                                                        "button": "standalone-selector--selector-single-MuiTypography-button",
                                                        "caption": "standalone-selector--selector-single-MuiTypography-caption",
                                                        "colorError": "standalone-selector--selector-single-MuiTypography-colorError",
                                                        "colorInherit": "standalone-selector--selector-single-MuiTypography-colorInherit",
                                                        "colorPrimary": "standalone-selector--selector-single-MuiTypography-colorPrimary",
                                                        "colorSecondary": "standalone-selector--selector-single-MuiTypography-colorSecondary",
                                                        "colorTextPrimary": "standalone-selector--selector-single-MuiTypography-colorTextPrimary",
                                                        "colorTextSecondary": "standalone-selector--selector-single-MuiTypography-colorTextSecondary",
                                                        "displayBlock": "standalone-selector--selector-single-MuiTypography-displayBlock",
                                                        "displayInline": "standalone-selector--selector-single-MuiTypography-displayInline",
                                                        "gutterBottom": "standalone-selector--selector-single-MuiTypography-gutterBottom",
                                                        "h1": "standalone-selector--selector-single-MuiTypography-h1",
                                                        "h2": "standalone-selector--selector-single-MuiTypography-h2",
                                                        "h3": "standalone-selector--selector-single-MuiTypography-h3",
                                                        "h4": "standalone-selector--selector-single-MuiTypography-h4",
                                                        "h5": "standalone-selector--selector-single-MuiTypography-h5",
                                                        "h6": "standalone-selector--selector-single-MuiTypography-h6",
                                                        "noWrap": "standalone-selector--selector-single-MuiTypography-noWrap",
                                                        "overline": "standalone-selector--selector-single-MuiTypography-overline",
                                                        "paragraph": "standalone-selector--selector-single-MuiTypography-paragraph",
                                                        "root": "standalone-selector--selector-single-MuiTypography-root",
                                                        "srOnly": "standalone-selector--selector-single-MuiTypography-srOnly",
                                                        "subtitle1": "standalone-selector--selector-single-MuiTypography-subtitle1",
                                                        "subtitle2": "standalone-selector--selector-single-MuiTypography-subtitle2",
                                                      }
                                                    }
                                                    component="div"
                                                  >
                                                    <div
                                                      className="standalone-selector--selector-single-MuiTypography-root standalone-selector--selector-single-InlineSwitch-labelWithSwitch-26 standalone-selector--selector-single-MuiTypography-body1"
                                                    >
                                                      <WithStyles(ForwardRef(Typography))
                                                        component="div"
                                                      >
                                                        <ForwardRef(Typography)
                                                          classes={
                                                            Object {
                                                              "alignCenter": "standalone-selector--selector-single-MuiTypography-alignCenter",
                                                              "alignJustify": "standalone-selector--selector-single-MuiTypography-alignJustify",
                                                              "alignLeft": "standalone-selector--selector-single-MuiTypography-alignLeft",
                                                              "alignRight": "standalone-selector--selector-single-MuiTypography-alignRight",
                                                              "body1": "standalone-selector--selector-single-MuiTypography-body1",
                                                              "body2": "standalone-selector--selector-single-MuiTypography-body2",
                                                              "button": "standalone-selector--selector-single-MuiTypography-button",
                                                              "caption": "standalone-selector--selector-single-MuiTypography-caption",
                                                              "colorError": "standalone-selector--selector-single-MuiTypography-colorError",
                                                              "colorInherit": "standalone-selector--selector-single-MuiTypography-colorInherit",
                                                              "colorPrimary": "standalone-selector--selector-single-MuiTypography-colorPrimary",
                                                              "colorSecondary": "standalone-selector--selector-single-MuiTypography-colorSecondary",
                                                              "colorTextPrimary": "standalone-selector--selector-single-MuiTypography-colorTextPrimary",
                                                              "colorTextSecondary": "standalone-selector--selector-single-MuiTypography-colorTextSecondary",
                                                              "displayBlock": "standalone-selector--selector-single-MuiTypography-displayBlock",
                                                              "displayInline": "standalone-selector--selector-single-MuiTypography-displayInline",
                                                              "gutterBottom": "standalone-selector--selector-single-MuiTypography-gutterBottom",
                                                              "h1": "standalone-selector--selector-single-MuiTypography-h1",
                                                              "h2": "standalone-selector--selector-single-MuiTypography-h2",
                                                              "h3": "standalone-selector--selector-single-MuiTypography-h3",
                                                              "h4": "standalone-selector--selector-single-MuiTypography-h4",
                                                              "h5": "standalone-selector--selector-single-MuiTypography-h5",
                                                              "h6": "standalone-selector--selector-single-MuiTypography-h6",
                                                              "noWrap": "standalone-selector--selector-single-MuiTypography-noWrap",
                                                              "overline": "standalone-selector--selector-single-MuiTypography-overline",
                                                              "paragraph": "standalone-selector--selector-single-MuiTypography-paragraph",
                                                              "root": "standalone-selector--selector-single-MuiTypography-root",
                                                              "srOnly": "standalone-selector--selector-single-MuiTypography-srOnly",
                                                              "subtitle1": "standalone-selector--selector-single-MuiTypography-subtitle1",
                                                              "subtitle2": "standalone-selector--selector-single-MuiTypography-subtitle2",
                                                            }
                                                          }
                                                          component="div"
                                                        >
                                                          <div
                                                            className="standalone-selector--selector-single-MuiTypography-root standalone-selector--selector-single-MuiTypography-body1"
                                                          >
                                                            <WithStyles(ForwardRef(InputLabel))
                                                              shrink={true}
                                                            >
                                                              <ForwardRef(InputLabel)
                                                                classes={
                                                                  Object {
                                                                    "animated": "standalone-selector--selector-single-MuiInputLabel-animated",
                                                                    "asterisk": "standalone-selector--selector-single-MuiInputLabel-asterisk",
                                                                    "disabled": "Mui-disabled",
                                                                    "error": "Mui-error",
                                                                    "filled": "standalone-selector--selector-single-MuiInputLabel-filled",
                                                                    "focused": "Mui-focused",
                                                                    "formControl": "standalone-selector--selector-single-MuiInputLabel-formControl",
                                                                    "marginDense": "standalone-selector--selector-single-MuiInputLabel-marginDense",
                                                                    "outlined": "standalone-selector--selector-single-MuiInputLabel-outlined",
                                                                    "required": "Mui-required",
                                                                    "root": "standalone-selector--selector-single-MuiInputLabel-root",
                                                                    "shrink": "standalone-selector--selector-single-MuiInputLabel-shrink",
                                                                  }
                                                                }
                                                                shrink={true}
                                                              >
                                                                <WithStyles(ForwardRef(FormLabel))
                                                                  className="standalone-selector--selector-single-MuiInputLabel-root standalone-selector--selector-single-MuiInputLabel-formControl standalone-selector--selector-single-MuiInputLabel-animated standalone-selector--selector-single-MuiInputLabel-shrink"
                                                                  classes={
                                                                    Object {
                                                                      "asterisk": "standalone-selector--selector-single-MuiInputLabel-asterisk",
                                                                      "disabled": "Mui-disabled",
                                                                      "error": "Mui-error",
                                                                      "focused": "Mui-focused",
                                                                      "required": "Mui-required",
                                                                    }
                                                                  }
                                                                  data-shrink={true}
                                                                >
                                                                  <ForwardRef(FormLabel)
                                                                    className="standalone-selector--selector-single-MuiInputLabel-root standalone-selector--selector-single-MuiInputLabel-formControl standalone-selector--selector-single-MuiInputLabel-animated standalone-selector--selector-single-MuiInputLabel-shrink"
                                                                    classes={
                                                                      Object {
                                                                        "asterisk": "standalone-selector--selector-single-MuiFormLabel-asterisk standalone-selector--selector-single-MuiInputLabel-asterisk",
                                                                        "colorSecondary": "standalone-selector--selector-single-MuiFormLabel-colorSecondary",
                                                                        "disabled": "Mui-disabled Mui-disabled",
                                                                        "error": "Mui-error Mui-error",
                                                                        "filled": "standalone-selector--selector-single-MuiFormLabel-filled",
                                                                        "focused": "Mui-focused Mui-focused",
                                                                        "required": "Mui-required Mui-required",
                                                                        "root": "standalone-selector--selector-single-MuiFormLabel-root",
                                                                      }
                                                                    }
                                                                    data-shrink={true}
                                                                  >
                                                                    <label
                                                                      className="standalone-selector--selector-single-MuiFormLabel-root standalone-selector--selector-single-MuiInputLabel-root standalone-selector--selector-single-MuiInputLabel-formControl standalone-selector--selector-single-MuiInputLabel-animated standalone-selector--selector-single-MuiInputLabel-shrink"
                                                                      data-shrink={true}
                                                                    >
                                                                      Example selector
                                                                    </label>
                                                                  </ForwardRef(FormLabel)>
                                                                </WithStyles(ForwardRef(FormLabel))>
                                                              </ForwardRef(InputLabel)>
                                                            </WithStyles(ForwardRef(InputLabel))>
                                                            <WithStyles(ForwardRef(Paper))
                                                              className="standalone-selector--selector-single-CcBaseSelectorCustom-wrapper-22 standalone-selector--selector-single-CcBaseSelectorCustom-wrapper-24"
                                                              elevation={0}
                                                            >
                                                              <ForwardRef(Paper)
                                                                className="standalone-selector--selector-single-CcBaseSelectorCustom-wrapper-22 standalone-selector--selector-single-CcBaseSelectorCustom-wrapper-24"
                                                                classes={
                                                                  Object {
                                                                    "elevation0": "standalone-selector--selector-single-MuiPaper-elevation0",
                                                                    "elevation1": "standalone-selector--selector-single-MuiPaper-elevation1",
                                                                    "elevation10": "standalone-selector--selector-single-MuiPaper-elevation10",
                                                                    "elevation11": "standalone-selector--selector-single-MuiPaper-elevation11",
                                                                    "elevation12": "standalone-selector--selector-single-MuiPaper-elevation12",
                                                                    "elevation13": "standalone-selector--selector-single-MuiPaper-elevation13",
                                                                    "elevation14": "standalone-selector--selector-single-MuiPaper-elevation14",
                                                                    "elevation15": "standalone-selector--selector-single-MuiPaper-elevation15",
                                                                    "elevation16": "standalone-selector--selector-single-MuiPaper-elevation16",
                                                                    "elevation17": "standalone-selector--selector-single-MuiPaper-elevation17",
                                                                    "elevation18": "standalone-selector--selector-single-MuiPaper-elevation18",
                                                                    "elevation19": "standalone-selector--selector-single-MuiPaper-elevation19",
                                                                    "elevation2": "standalone-selector--selector-single-MuiPaper-elevation2",
                                                                    "elevation20": "standalone-selector--selector-single-MuiPaper-elevation20",
                                                                    "elevation21": "standalone-selector--selector-single-MuiPaper-elevation21",
                                                                    "elevation22": "standalone-selector--selector-single-MuiPaper-elevation22",
                                                                    "elevation23": "standalone-selector--selector-single-MuiPaper-elevation23",
                                                                    "elevation24": "standalone-selector--selector-single-MuiPaper-elevation24",
                                                                    "elevation3": "standalone-selector--selector-single-MuiPaper-elevation3",
                                                                    "elevation4": "standalone-selector--selector-single-MuiPaper-elevation4",
                                                                    "elevation5": "standalone-selector--selector-single-MuiPaper-elevation5",
                                                                    "elevation6": "standalone-selector--selector-single-MuiPaper-elevation6",
                                                                    "elevation7": "standalone-selector--selector-single-MuiPaper-elevation7",
                                                                    "elevation8": "standalone-selector--selector-single-MuiPaper-elevation8",
                                                                    "elevation9": "standalone-selector--selector-single-MuiPaper-elevation9",
                                                                    "outlined": "standalone-selector--selector-single-MuiPaper-outlined",
                                                                    "root": "standalone-selector--selector-single-MuiPaper-root",
                                                                    "rounded": "standalone-selector--selector-single-MuiPaper-rounded",
                                                                  }
                                                                }
                                                                elevation={0}
                                                              >
                                                                <div
                                                                  className="standalone-selector--selector-single-MuiPaper-root standalone-selector--selector-single-CcBaseSelectorCustom-wrapper-22 standalone-selector--selector-single-CcBaseSelectorCustom-wrapper-24 standalone-selector--selector-single-MuiPaper-elevation0 standalone-selector--selector-single-MuiPaper-rounded"
                                                                >
                                                                  <WithStyles(ForwardRef(Autocomplete))
                                                                    autoComplete={true}
                                                                    blurOnSelect={true}
                                                                    classes={Object {}}
                                                                    closeText="standalone.selector.base-selector.close-icon-text"
                                                                    disableClearable={false}
                                                                    disabled={false}
                                                                    filterOptions={[Function]}
                                                                    getOptionDisabled={[Function]}
                                                                    getOptionLabel={[Function]}
                                                                    getOptionSelected={[Function]}
                                                                    id="single-select"
                                                                    inputValue=""
                                                                    key="no-refresh-token no-add-new"
                                                                    loading={true}
                                                                    loadingText="Loading.."
                                                                    noOptionsText="standalone.selector.base-selector.no-options-text"
                                                                    onChange={[Function]}
                                                                    onClose={[Function]}
                                                                    onInputChange={[Function]}
                                                                    onOpen={[Function]}
                                                                    open={false}
                                                                    openText="standalone.selector.base-selector.open-icon-text"
                                                                    options={Array []}
                                                                    popupIcon={<Memo />}
                                                                    renderInput={[Function]}
                                                                    renderOption={[Function]}
                                                                    selectOnFocus={true}
                                                                    value={null}
                                                                  >
                                                                    <ForwardRef(Autocomplete)
                                                                      autoComplete={true}
                                                                      blurOnSelect={true}
                                                                      classes={
                                                                        Object {
                                                                          "clearIndicator": "standalone-selector--selector-single-MuiAutocomplete-clearIndicator",
                                                                          "clearIndicatorDirty": "standalone-selector--selector-single-MuiAutocomplete-clearIndicatorDirty",
                                                                          "endAdornment": "standalone-selector--selector-single-MuiAutocomplete-endAdornment",
                                                                          "focused": "Mui-focused",
                                                                          "fullWidth": "standalone-selector--selector-single-MuiAutocomplete-fullWidth",
                                                                          "groupLabel": "standalone-selector--selector-single-MuiAutocomplete-groupLabel",
                                                                          "groupUl": "standalone-selector--selector-single-MuiAutocomplete-groupUl",
                                                                          "hasClearIcon": "standalone-selector--selector-single-MuiAutocomplete-hasClearIcon",
                                                                          "hasPopupIcon": "standalone-selector--selector-single-MuiAutocomplete-hasPopupIcon",
                                                                          "input": "standalone-selector--selector-single-MuiAutocomplete-input",
                                                                          "inputFocused": "standalone-selector--selector-single-MuiAutocomplete-inputFocused",
                                                                          "inputRoot": "standalone-selector--selector-single-MuiAutocomplete-inputRoot",
                                                                          "listbox": "standalone-selector--selector-single-MuiAutocomplete-listbox",
                                                                          "loading": "standalone-selector--selector-single-MuiAutocomplete-loading",
                                                                          "noOptions": "standalone-selector--selector-single-MuiAutocomplete-noOptions",
                                                                          "option": "standalone-selector--selector-single-MuiAutocomplete-option",
                                                                          "paper": "standalone-selector--selector-single-MuiAutocomplete-paper",
                                                                          "popper": "standalone-selector--selector-single-MuiAutocomplete-popper",
                                                                          "popperDisablePortal": "standalone-selector--selector-single-MuiAutocomplete-popperDisablePortal",
                                                                          "popupIndicator": "standalone-selector--selector-single-MuiAutocomplete-popupIndicator",
                                                                          "popupIndicatorOpen": "standalone-selector--selector-single-MuiAutocomplete-popupIndicatorOpen",
                                                                          "root": "standalone-selector--selector-single-MuiAutocomplete-root",
                                                                          "tag": "standalone-selector--selector-single-MuiAutocomplete-tag",
                                                                          "tagSizeSmall": "standalone-selector--selector-single-MuiAutocomplete-tagSizeSmall",
                                                                        }
                                                                      }
                                                                      closeText="standalone.selector.base-selector.close-icon-text"
                                                                      disableClearable={false}
                                                                      disabled={false}
                                                                      filterOptions={[Function]}
                                                                      getOptionDisabled={[Function]}
                                                                      getOptionLabel={[Function]}
                                                                      getOptionSelected={[Function]}
                                                                      id="single-select"
                                                                      inputValue=""
                                                                      loading={true}
                                                                      loadingText="Loading.."
                                                                      noOptionsText="standalone.selector.base-selector.no-options-text"
                                                                      onChange={[Function]}
                                                                      onClose={[Function]}
                                                                      onInputChange={[Function]}
                                                                      onOpen={[Function]}
                                                                      open={false}
                                                                      openText="standalone.selector.base-selector.open-icon-text"
                                                                      options={Array []}
                                                                      popupIcon={<Memo />}
                                                                      renderInput={[Function]}
                                                                      renderOption={[Function]}
                                                                      selectOnFocus={true}
                                                                      value={null}
                                                                    >
                                                                      <div
                                                                        aria-expanded={false}
                                                                        aria-owns={null}
                                                                        className="standalone-selector--selector-single-MuiAutocomplete-root standalone-selector--selector-single-MuiAutocomplete-hasClearIcon standalone-selector--selector-single-MuiAutocomplete-hasPopupIcon"
                                                                        onClick={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        onMouseDown={[Function]}
                                                                        role="combobox"
                                                                      >
                                                                        <ForwardRef
                                                                          className="standalone-selector--selector-single-MuiAutocomplete-inputRoot"
                                                                          disabled={false}
                                                                          endAdornment={
                                                                            <div
                                                                              className="standalone-selector--selector-single-MuiAutocomplete-endAdornment"
                                                                            >
                                                                              <WithStyles(ForwardRef(IconButton))
                                                                                aria-label="Clear"
                                                                                className="standalone-selector--selector-single-MuiAutocomplete-clearIndicator"
                                                                                onClick={[Function]}
                                                                                tabIndex={-1}
                                                                                title="Clear"
                                                                              >
                                                                                <Memo
                                                                                  fontSize="small"
                                                                                />
                                                                              </WithStyles(ForwardRef(IconButton))>
                                                                              <WithStyles(ForwardRef(IconButton))
                                                                                aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                className="standalone-selector--selector-single-MuiAutocomplete-popupIndicator"
                                                                                disabled={false}
                                                                                onClick={[Function]}
                                                                                tabIndex={-1}
                                                                                title="standalone.selector.base-selector.open-icon-text"
                                                                              >
                                                                                <Memo />
                                                                              </WithStyles(ForwardRef(IconButton))>
                                                                              <WithStyles(ForwardRef(IconButton))
                                                                                className="standalone-selector--selector-single-CcBaseSelectorCustom-infoBtn-19"
                                                                                onClick={[Function]}
                                                                              >
                                                                                <Memo
                                                                                  color="disabled"
                                                                                />
                                                                              </WithStyles(ForwardRef(IconButton))>
                                                                            </div>
                                                                          }
                                                                          fullWidth={true}
                                                                          id="single-select"
                                                                          inputProps={
                                                                            Object {
                                                                              "aria-activedescendant": null,
                                                                              "aria-autocomplete": "both",
                                                                              "aria-controls": null,
                                                                              "autoCapitalize": "none",
                                                                              "autoComplete": "off",
                                                                              "className": "standalone-selector--selector-single-MuiAutocomplete-input standalone-selector--selector-single-MuiAutocomplete-inputFocused",
                                                                              "disabled": false,
                                                                              "id": "single-select",
                                                                              "onBlur": [Function],
                                                                              "onChange": [Function],
                                                                              "onFocus": [Function],
                                                                              "onMouseDown": [Function],
                                                                              "ref": Object {
                                                                                "current": <input
                                                                                  aria-autocomplete="both"
                                                                                  aria-invalid="false"
                                                                                  autocapitalize="none"
                                                                                  autocomplete="off"
                                                                                  class="standalone-selector--selector-single-MuiInputBase-input standalone-selector--selector-single-MuiOutlinedInput-input standalone-selector--selector-single-CcUIKitInput-input-28 standalone-selector--selector-single-CcUIKitInput-input-30 standalone-selector--selector-single-MuiAutocomplete-input standalone-selector--selector-single-MuiAutocomplete-inputFocused standalone-selector--selector-single-MuiInputBase-inputAdornedEnd standalone-selector--selector-single-MuiOutlinedInput-inputAdornedEnd"
                                                                                  id="single-select"
                                                                                  placeholder="Select.."
                                                                                  spellcheck="false"
                                                                                  type="text"
                                                                                  value=""
                                                                                />,
                                                                              },
                                                                              "spellCheck": "false",
                                                                              "value": "",
                                                                            }
                                                                          }
                                                                          onChange={[Function]}
                                                                          placeholder="Select.."
                                                                          readOnly={false}
                                                                        >
                                                                          <WithStyles(ForwardRef(OutlinedInput))
                                                                            className="standalone-selector--selector-single-MuiAutocomplete-inputRoot"
                                                                            classes={
                                                                              Object {
                                                                                "input": "standalone-selector--selector-single-CcUIKitInput-input-28 standalone-selector--selector-single-CcUIKitInput-input-30",
                                                                                "multiline": "standalone-selector--selector-single-CcUIKitInput-multiline-29",
                                                                                "root": "standalone-selector--selector-single-CcUIKitInput-root-27",
                                                                              }
                                                                            }
                                                                            disabled={false}
                                                                            endAdornment={
                                                                              <div
                                                                                className="standalone-selector--selector-single-MuiAutocomplete-endAdornment"
                                                                              >
                                                                                <WithStyles(ForwardRef(IconButton))
                                                                                  aria-label="Clear"
                                                                                  className="standalone-selector--selector-single-MuiAutocomplete-clearIndicator"
                                                                                  onClick={[Function]}
                                                                                  tabIndex={-1}
                                                                                  title="Clear"
                                                                                >
                                                                                  <Memo
                                                                                    fontSize="small"
                                                                                  />
                                                                                </WithStyles(ForwardRef(IconButton))>
                                                                                <WithStyles(ForwardRef(IconButton))
                                                                                  aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                  className="standalone-selector--selector-single-MuiAutocomplete-popupIndicator"
                                                                                  disabled={false}
                                                                                  onClick={[Function]}
                                                                                  tabIndex={-1}
                                                                                  title="standalone.selector.base-selector.open-icon-text"
                                                                                >
                                                                                  <Memo />
                                                                                </WithStyles(ForwardRef(IconButton))>
                                                                                <WithStyles(ForwardRef(IconButton))
                                                                                  className="standalone-selector--selector-single-CcBaseSelectorCustom-infoBtn-19"
                                                                                  onClick={[Function]}
                                                                                >
                                                                                  <Memo
                                                                                    color="disabled"
                                                                                  />
                                                                                </WithStyles(ForwardRef(IconButton))>
                                                                              </div>
                                                                            }
                                                                            fullWidth={true}
                                                                            id="single-select"
                                                                            inputProps={
                                                                              Object {
                                                                                "aria-activedescendant": null,
                                                                                "aria-autocomplete": "both",
                                                                                "aria-controls": null,
                                                                                "autoCapitalize": "none",
                                                                                "autoComplete": "off",
                                                                                "className": "standalone-selector--selector-single-MuiAutocomplete-input standalone-selector--selector-single-MuiAutocomplete-inputFocused",
                                                                                "disabled": false,
                                                                                "id": "single-select",
                                                                                "onBlur": [Function],
                                                                                "onChange": [Function],
                                                                                "onFocus": [Function],
                                                                                "onMouseDown": [Function],
                                                                                "ref": Object {
                                                                                  "current": <input
                                                                                    aria-autocomplete="both"
                                                                                    aria-invalid="false"
                                                                                    autocapitalize="none"
                                                                                    autocomplete="off"
                                                                                    class="standalone-selector--selector-single-MuiInputBase-input standalone-selector--selector-single-MuiOutlinedInput-input standalone-selector--selector-single-CcUIKitInput-input-28 standalone-selector--selector-single-CcUIKitInput-input-30 standalone-selector--selector-single-MuiAutocomplete-input standalone-selector--selector-single-MuiAutocomplete-inputFocused standalone-selector--selector-single-MuiInputBase-inputAdornedEnd standalone-selector--selector-single-MuiOutlinedInput-inputAdornedEnd"
                                                                                    id="single-select"
                                                                                    placeholder="Select.."
                                                                                    spellcheck="false"
                                                                                    type="text"
                                                                                    value=""
                                                                                  />,
                                                                                },
                                                                                "spellCheck": "false",
                                                                                "value": "",
                                                                              }
                                                                            }
                                                                            onChange={[Function]}
                                                                            placeholder="Select.."
                                                                            readOnly={false}
                                                                          >
                                                                            <ForwardRef(OutlinedInput)
                                                                              className="standalone-selector--selector-single-MuiAutocomplete-inputRoot"
                                                                              classes={
                                                                                Object {
                                                                                  "adornedEnd": "standalone-selector--selector-single-MuiOutlinedInput-adornedEnd",
                                                                                  "adornedStart": "standalone-selector--selector-single-MuiOutlinedInput-adornedStart",
                                                                                  "colorSecondary": "standalone-selector--selector-single-MuiOutlinedInput-colorSecondary",
                                                                                  "disabled": "Mui-disabled",
                                                                                  "error": "Mui-error",
                                                                                  "focused": "Mui-focused",
                                                                                  "input": "standalone-selector--selector-single-MuiOutlinedInput-input standalone-selector--selector-single-CcUIKitInput-input-28 standalone-selector--selector-single-CcUIKitInput-input-30",
                                                                                  "inputAdornedEnd": "standalone-selector--selector-single-MuiOutlinedInput-inputAdornedEnd",
                                                                                  "inputAdornedStart": "standalone-selector--selector-single-MuiOutlinedInput-inputAdornedStart",
                                                                                  "inputMarginDense": "standalone-selector--selector-single-MuiOutlinedInput-inputMarginDense",
                                                                                  "inputMultiline": "standalone-selector--selector-single-MuiOutlinedInput-inputMultiline",
                                                                                  "marginDense": "standalone-selector--selector-single-MuiOutlinedInput-marginDense",
                                                                                  "multiline": "standalone-selector--selector-single-MuiOutlinedInput-multiline standalone-selector--selector-single-CcUIKitInput-multiline-29",
                                                                                  "notchedOutline": "standalone-selector--selector-single-MuiOutlinedInput-notchedOutline",
                                                                                  "root": "standalone-selector--selector-single-MuiOutlinedInput-root standalone-selector--selector-single-CcUIKitInput-root-27",
                                                                                }
                                                                              }
                                                                              disabled={false}
                                                                              endAdornment={
                                                                                <div
                                                                                  className="standalone-selector--selector-single-MuiAutocomplete-endAdornment"
                                                                                >
                                                                                  <WithStyles(ForwardRef(IconButton))
                                                                                    aria-label="Clear"
                                                                                    className="standalone-selector--selector-single-MuiAutocomplete-clearIndicator"
                                                                                    onClick={[Function]}
                                                                                    tabIndex={-1}
                                                                                    title="Clear"
                                                                                  >
                                                                                    <Memo
                                                                                      fontSize="small"
                                                                                    />
                                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                                  <WithStyles(ForwardRef(IconButton))
                                                                                    aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                    className="standalone-selector--selector-single-MuiAutocomplete-popupIndicator"
                                                                                    disabled={false}
                                                                                    onClick={[Function]}
                                                                                    tabIndex={-1}
                                                                                    title="standalone.selector.base-selector.open-icon-text"
                                                                                  >
                                                                                    <Memo />
                                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                                  <WithStyles(ForwardRef(IconButton))
                                                                                    className="standalone-selector--selector-single-CcBaseSelectorCustom-infoBtn-19"
                                                                                    onClick={[Function]}
                                                                                  >
                                                                                    <Memo
                                                                                      color="disabled"
                                                                                    />
                                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                                </div>
                                                                              }
                                                                              fullWidth={true}
                                                                              id="single-select"
                                                                              inputProps={
                                                                                Object {
                                                                                  "aria-activedescendant": null,
                                                                                  "aria-autocomplete": "both",
                                                                                  "aria-controls": null,
                                                                                  "autoCapitalize": "none",
                                                                                  "autoComplete": "off",
                                                                                  "className": "standalone-selector--selector-single-MuiAutocomplete-input standalone-selector--selector-single-MuiAutocomplete-inputFocused",
                                                                                  "disabled": false,
                                                                                  "id": "single-select",
                                                                                  "onBlur": [Function],
                                                                                  "onChange": [Function],
                                                                                  "onFocus": [Function],
                                                                                  "onMouseDown": [Function],
                                                                                  "ref": Object {
                                                                                    "current": <input
                                                                                      aria-autocomplete="both"
                                                                                      aria-invalid="false"
                                                                                      autocapitalize="none"
                                                                                      autocomplete="off"
                                                                                      class="standalone-selector--selector-single-MuiInputBase-input standalone-selector--selector-single-MuiOutlinedInput-input standalone-selector--selector-single-CcUIKitInput-input-28 standalone-selector--selector-single-CcUIKitInput-input-30 standalone-selector--selector-single-MuiAutocomplete-input standalone-selector--selector-single-MuiAutocomplete-inputFocused standalone-selector--selector-single-MuiInputBase-inputAdornedEnd standalone-selector--selector-single-MuiOutlinedInput-inputAdornedEnd"
                                                                                      id="single-select"
                                                                                      placeholder="Select.."
                                                                                      spellcheck="false"
                                                                                      type="text"
                                                                                      value=""
                                                                                    />,
                                                                                  },
                                                                                  "spellCheck": "false",
                                                                                  "value": "",
                                                                                }
                                                                              }
                                                                              onChange={[Function]}
                                                                              placeholder="Select.."
                                                                              readOnly={false}
                                                                            >
                                                                              <WithStyles(ForwardRef(InputBase))
                                                                                className="standalone-selector--selector-single-MuiAutocomplete-inputRoot"
                                                                                classes={
                                                                                  Object {
                                                                                    "adornedEnd": "standalone-selector--selector-single-MuiOutlinedInput-adornedEnd",
                                                                                    "adornedStart": "standalone-selector--selector-single-MuiOutlinedInput-adornedStart",
                                                                                    "colorSecondary": "standalone-selector--selector-single-MuiOutlinedInput-colorSecondary",
                                                                                    "disabled": "Mui-disabled",
                                                                                    "error": "Mui-error",
                                                                                    "focused": "Mui-focused",
                                                                                    "input": "standalone-selector--selector-single-MuiOutlinedInput-input standalone-selector--selector-single-CcUIKitInput-input-28 standalone-selector--selector-single-CcUIKitInput-input-30",
                                                                                    "inputAdornedEnd": "standalone-selector--selector-single-MuiOutlinedInput-inputAdornedEnd",
                                                                                    "inputAdornedStart": "standalone-selector--selector-single-MuiOutlinedInput-inputAdornedStart",
                                                                                    "inputMarginDense": "standalone-selector--selector-single-MuiOutlinedInput-inputMarginDense",
                                                                                    "inputMultiline": "standalone-selector--selector-single-MuiOutlinedInput-inputMultiline",
                                                                                    "marginDense": "standalone-selector--selector-single-MuiOutlinedInput-marginDense",
                                                                                    "multiline": "standalone-selector--selector-single-MuiOutlinedInput-multiline standalone-selector--selector-single-CcUIKitInput-multiline-29",
                                                                                    "notchedOutline": null,
                                                                                    "root": "standalone-selector--selector-single-MuiOutlinedInput-root standalone-selector--selector-single-CcUIKitInput-root-27",
                                                                                  }
                                                                                }
                                                                                disabled={false}
                                                                                endAdornment={
                                                                                  <div
                                                                                    className="standalone-selector--selector-single-MuiAutocomplete-endAdornment"
                                                                                  >
                                                                                    <WithStyles(ForwardRef(IconButton))
                                                                                      aria-label="Clear"
                                                                                      className="standalone-selector--selector-single-MuiAutocomplete-clearIndicator"
                                                                                      onClick={[Function]}
                                                                                      tabIndex={-1}
                                                                                      title="Clear"
                                                                                    >
                                                                                      <Memo
                                                                                        fontSize="small"
                                                                                      />
                                                                                    </WithStyles(ForwardRef(IconButton))>
                                                                                    <WithStyles(ForwardRef(IconButton))
                                                                                      aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                      className="standalone-selector--selector-single-MuiAutocomplete-popupIndicator"
                                                                                      disabled={false}
                                                                                      onClick={[Function]}
                                                                                      tabIndex={-1}
                                                                                      title="standalone.selector.base-selector.open-icon-text"
                                                                                    >
                                                                                      <Memo />
                                                                                    </WithStyles(ForwardRef(IconButton))>
                                                                                    <WithStyles(ForwardRef(IconButton))
                                                                                      className="standalone-selector--selector-single-CcBaseSelectorCustom-infoBtn-19"
                                                                                      onClick={[Function]}
                                                                                    >
                                                                                      <Memo
                                                                                        color="disabled"
                                                                                      />
                                                                                    </WithStyles(ForwardRef(IconButton))>
                                                                                  </div>
                                                                                }
                                                                                fullWidth={true}
                                                                                id="single-select"
                                                                                inputComponent="input"
                                                                                inputProps={
                                                                                  Object {
                                                                                    "aria-activedescendant": null,
                                                                                    "aria-autocomplete": "both",
                                                                                    "aria-controls": null,
                                                                                    "autoCapitalize": "none",
                                                                                    "autoComplete": "off",
                                                                                    "className": "standalone-selector--selector-single-MuiAutocomplete-input standalone-selector--selector-single-MuiAutocomplete-inputFocused",
                                                                                    "disabled": false,
                                                                                    "id": "single-select",
                                                                                    "onBlur": [Function],
                                                                                    "onChange": [Function],
                                                                                    "onFocus": [Function],
                                                                                    "onMouseDown": [Function],
                                                                                    "ref": Object {
                                                                                      "current": <input
                                                                                        aria-autocomplete="both"
                                                                                        aria-invalid="false"
                                                                                        autocapitalize="none"
                                                                                        autocomplete="off"
                                                                                        class="standalone-selector--selector-single-MuiInputBase-input standalone-selector--selector-single-MuiOutlinedInput-input standalone-selector--selector-single-CcUIKitInput-input-28 standalone-selector--selector-single-CcUIKitInput-input-30 standalone-selector--selector-single-MuiAutocomplete-input standalone-selector--selector-single-MuiAutocomplete-inputFocused standalone-selector--selector-single-MuiInputBase-inputAdornedEnd standalone-selector--selector-single-MuiOutlinedInput-inputAdornedEnd"
                                                                                        id="single-select"
                                                                                        placeholder="Select.."
                                                                                        spellcheck="false"
                                                                                        type="text"
                                                                                        value=""
                                                                                      />,
                                                                                    },
                                                                                    "spellCheck": "false",
                                                                                    "value": "",
                                                                                  }
                                                                                }
                                                                                multiline={false}
                                                                                onChange={[Function]}
                                                                                placeholder="Select.."
                                                                                readOnly={false}
                                                                                renderSuffix={[Function]}
                                                                                type="text"
                                                                              >
                                                                                <ForwardRef(InputBase)
                                                                                  className="standalone-selector--selector-single-MuiAutocomplete-inputRoot"
                                                                                  classes={
                                                                                    Object {
                                                                                      "adornedEnd": "standalone-selector--selector-single-MuiInputBase-adornedEnd standalone-selector--selector-single-MuiOutlinedInput-adornedEnd",
                                                                                      "adornedStart": "standalone-selector--selector-single-MuiInputBase-adornedStart standalone-selector--selector-single-MuiOutlinedInput-adornedStart",
                                                                                      "colorSecondary": "standalone-selector--selector-single-MuiInputBase-colorSecondary standalone-selector--selector-single-MuiOutlinedInput-colorSecondary",
                                                                                      "disabled": "Mui-disabled Mui-disabled",
                                                                                      "error": "Mui-error Mui-error",
                                                                                      "focused": "Mui-focused Mui-focused",
                                                                                      "formControl": "standalone-selector--selector-single-MuiInputBase-formControl",
                                                                                      "fullWidth": "standalone-selector--selector-single-MuiInputBase-fullWidth",
                                                                                      "input": "standalone-selector--selector-single-MuiInputBase-input standalone-selector--selector-single-MuiOutlinedInput-input standalone-selector--selector-single-CcUIKitInput-input-28 standalone-selector--selector-single-CcUIKitInput-input-30",
                                                                                      "inputAdornedEnd": "standalone-selector--selector-single-MuiInputBase-inputAdornedEnd standalone-selector--selector-single-MuiOutlinedInput-inputAdornedEnd",
                                                                                      "inputAdornedStart": "standalone-selector--selector-single-MuiInputBase-inputAdornedStart standalone-selector--selector-single-MuiOutlinedInput-inputAdornedStart",
                                                                                      "inputHiddenLabel": "standalone-selector--selector-single-MuiInputBase-inputHiddenLabel",
                                                                                      "inputMarginDense": "standalone-selector--selector-single-MuiInputBase-inputMarginDense standalone-selector--selector-single-MuiOutlinedInput-inputMarginDense",
                                                                                      "inputMultiline": "standalone-selector--selector-single-MuiInputBase-inputMultiline standalone-selector--selector-single-MuiOutlinedInput-inputMultiline",
                                                                                      "inputTypeSearch": "standalone-selector--selector-single-MuiInputBase-inputTypeSearch",
                                                                                      "marginDense": "standalone-selector--selector-single-MuiInputBase-marginDense standalone-selector--selector-single-MuiOutlinedInput-marginDense",
                                                                                      "multiline": "standalone-selector--selector-single-MuiInputBase-multiline standalone-selector--selector-single-MuiOutlinedInput-multiline standalone-selector--selector-single-CcUIKitInput-multiline-29",
                                                                                      "root": "standalone-selector--selector-single-MuiInputBase-root standalone-selector--selector-single-MuiOutlinedInput-root standalone-selector--selector-single-CcUIKitInput-root-27",
                                                                                    }
                                                                                  }
                                                                                  disabled={false}
                                                                                  endAdornment={
                                                                                    <div
                                                                                      className="standalone-selector--selector-single-MuiAutocomplete-endAdornment"
                                                                                    >
                                                                                      <WithStyles(ForwardRef(IconButton))
                                                                                        aria-label="Clear"
                                                                                        className="standalone-selector--selector-single-MuiAutocomplete-clearIndicator"
                                                                                        onClick={[Function]}
                                                                                        tabIndex={-1}
                                                                                        title="Clear"
                                                                                      >
                                                                                        <Memo
                                                                                          fontSize="small"
                                                                                        />
                                                                                      </WithStyles(ForwardRef(IconButton))>
                                                                                      <WithStyles(ForwardRef(IconButton))
                                                                                        aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                        className="standalone-selector--selector-single-MuiAutocomplete-popupIndicator"
                                                                                        disabled={false}
                                                                                        onClick={[Function]}
                                                                                        tabIndex={-1}
                                                                                        title="standalone.selector.base-selector.open-icon-text"
                                                                                      >
                                                                                        <Memo />
                                                                                      </WithStyles(ForwardRef(IconButton))>
                                                                                      <WithStyles(ForwardRef(IconButton))
                                                                                        className="standalone-selector--selector-single-CcBaseSelectorCustom-infoBtn-19"
                                                                                        onClick={[Function]}
                                                                                      >
                                                                                        <Memo
                                                                                          color="disabled"
                                                                                        />
                                                                                      </WithStyles(ForwardRef(IconButton))>
                                                                                    </div>
                                                                                  }
                                                                                  fullWidth={true}
                                                                                  id="single-select"
                                                                                  inputComponent="input"
                                                                                  inputProps={
                                                                                    Object {
                                                                                      "aria-activedescendant": null,
                                                                                      "aria-autocomplete": "both",
                                                                                      "aria-controls": null,
                                                                                      "autoCapitalize": "none",
                                                                                      "autoComplete": "off",
                                                                                      "className": "standalone-selector--selector-single-MuiAutocomplete-input standalone-selector--selector-single-MuiAutocomplete-inputFocused",
                                                                                      "disabled": false,
                                                                                      "id": "single-select",
                                                                                      "onBlur": [Function],
                                                                                      "onChange": [Function],
                                                                                      "onFocus": [Function],
                                                                                      "onMouseDown": [Function],
                                                                                      "ref": Object {
                                                                                        "current": <input
                                                                                          aria-autocomplete="both"
                                                                                          aria-invalid="false"
                                                                                          autocapitalize="none"
                                                                                          autocomplete="off"
                                                                                          class="standalone-selector--selector-single-MuiInputBase-input standalone-selector--selector-single-MuiOutlinedInput-input standalone-selector--selector-single-CcUIKitInput-input-28 standalone-selector--selector-single-CcUIKitInput-input-30 standalone-selector--selector-single-MuiAutocomplete-input standalone-selector--selector-single-MuiAutocomplete-inputFocused standalone-selector--selector-single-MuiInputBase-inputAdornedEnd standalone-selector--selector-single-MuiOutlinedInput-inputAdornedEnd"
                                                                                          id="single-select"
                                                                                          placeholder="Select.."
                                                                                          spellcheck="false"
                                                                                          type="text"
                                                                                          value=""
                                                                                        />,
                                                                                      },
                                                                                      "spellCheck": "false",
                                                                                      "value": "",
                                                                                    }
                                                                                  }
                                                                                  multiline={false}
                                                                                  onChange={[Function]}
                                                                                  placeholder="Select.."
                                                                                  readOnly={false}
                                                                                  renderSuffix={[Function]}
                                                                                  type="text"
                                                                                >
                                                                                  <div
                                                                                    className="standalone-selector--selector-single-MuiInputBase-root standalone-selector--selector-single-MuiOutlinedInput-root standalone-selector--selector-single-CcUIKitInput-root-27 standalone-selector--selector-single-MuiAutocomplete-inputRoot standalone-selector--selector-single-MuiInputBase-fullWidth standalone-selector--selector-single-MuiInputBase-formControl standalone-selector--selector-single-MuiInputBase-adornedEnd standalone-selector--selector-single-MuiOutlinedInput-adornedEnd"
                                                                                    onClick={[Function]}
                                                                                  >
                                                                                    <input
                                                                                      aria-activedescendant={null}
                                                                                      aria-autocomplete="both"
                                                                                      aria-controls={null}
                                                                                      aria-invalid={false}
                                                                                      autoCapitalize="none"
                                                                                      autoComplete="off"
                                                                                      className="standalone-selector--selector-single-MuiInputBase-input standalone-selector--selector-single-MuiOutlinedInput-input standalone-selector--selector-single-CcUIKitInput-input-28 standalone-selector--selector-single-CcUIKitInput-input-30 standalone-selector--selector-single-MuiAutocomplete-input standalone-selector--selector-single-MuiAutocomplete-inputFocused standalone-selector--selector-single-MuiInputBase-inputAdornedEnd standalone-selector--selector-single-MuiOutlinedInput-inputAdornedEnd"
                                                                                      disabled={false}
                                                                                      id="single-select"
                                                                                      onAnimationStart={[Function]}
                                                                                      onBlur={[Function]}
                                                                                      onChange={[Function]}
                                                                                      onFocus={[Function]}
                                                                                      onMouseDown={[Function]}
                                                                                      placeholder="Select.."
                                                                                      readOnly={false}
                                                                                      required={false}
                                                                                      spellCheck="false"
                                                                                      type="text"
                                                                                      value=""
                                                                                    />
                                                                                    <div
                                                                                      className="standalone-selector--selector-single-MuiAutocomplete-endAdornment"
                                                                                    >
                                                                                      <WithStyles(ForwardRef(IconButton))
                                                                                        aria-label="Clear"
                                                                                        className="standalone-selector--selector-single-MuiAutocomplete-clearIndicator"
                                                                                        onClick={[Function]}
                                                                                        tabIndex={-1}
                                                                                        title="Clear"
                                                                                      >
                                                                                        <ForwardRef(IconButton)
                                                                                          aria-label="Clear"
                                                                                          className="standalone-selector--selector-single-MuiAutocomplete-clearIndicator"
                                                                                          classes={
                                                                                            Object {
                                                                                              "colorInherit": "standalone-selector--selector-single-MuiIconButton-colorInherit",
                                                                                              "colorPrimary": "standalone-selector--selector-single-MuiIconButton-colorPrimary",
                                                                                              "colorSecondary": "standalone-selector--selector-single-MuiIconButton-colorSecondary",
                                                                                              "disabled": "Mui-disabled",
                                                                                              "edgeEnd": "standalone-selector--selector-single-MuiIconButton-edgeEnd",
                                                                                              "edgeStart": "standalone-selector--selector-single-MuiIconButton-edgeStart",
                                                                                              "label": "standalone-selector--selector-single-MuiIconButton-label",
                                                                                              "root": "standalone-selector--selector-single-MuiIconButton-root",
                                                                                              "sizeSmall": "standalone-selector--selector-single-MuiIconButton-sizeSmall",
                                                                                            }
                                                                                          }
                                                                                          onClick={[Function]}
                                                                                          tabIndex={-1}
                                                                                          title="Clear"
                                                                                        >
                                                                                          <WithStyles(ForwardRef(ButtonBase))
                                                                                            aria-label="Clear"
                                                                                            centerRipple={true}
                                                                                            className="standalone-selector--selector-single-MuiIconButton-root standalone-selector--selector-single-MuiAutocomplete-clearIndicator"
                                                                                            disabled={false}
                                                                                            focusRipple={true}
                                                                                            onClick={[Function]}
                                                                                            tabIndex={-1}
                                                                                            title="Clear"
                                                                                          >
                                                                                            <ForwardRef(ButtonBase)
                                                                                              aria-label="Clear"
                                                                                              centerRipple={true}
                                                                                              className="standalone-selector--selector-single-MuiIconButton-root standalone-selector--selector-single-MuiAutocomplete-clearIndicator"
                                                                                              classes={
                                                                                                Object {
                                                                                                  "disabled": "Mui-disabled",
                                                                                                  "focusVisible": "Mui-focusVisible",
                                                                                                  "root": "standalone-selector--selector-single-MuiButtonBase-root",
                                                                                                }
                                                                                              }
                                                                                              disabled={false}
                                                                                              focusRipple={true}
                                                                                              onClick={[Function]}
                                                                                              tabIndex={-1}
                                                                                              title="Clear"
                                                                                            >
                                                                                              <button
                                                                                                aria-label="Clear"
                                                                                                className="standalone-selector--selector-single-MuiButtonBase-root standalone-selector--selector-single-MuiIconButton-root standalone-selector--selector-single-MuiAutocomplete-clearIndicator"
                                                                                                disabled={false}
                                                                                                onBlur={[Function]}
                                                                                                onClick={[Function]}
                                                                                                onDragLeave={[Function]}
                                                                                                onFocus={[Function]}
                                                                                                onKeyDown={[Function]}
                                                                                                onKeyUp={[Function]}
                                                                                                onMouseDown={[Function]}
                                                                                                onMouseLeave={[Function]}
                                                                                                onMouseUp={[Function]}
                                                                                                onTouchEnd={[Function]}
                                                                                                onTouchMove={[Function]}
                                                                                                onTouchStart={[Function]}
                                                                                                tabIndex={-1}
                                                                                                title="Clear"
                                                                                                type="button"
                                                                                              >
                                                                                                <span
                                                                                                  className="standalone-selector--selector-single-MuiIconButton-label"
                                                                                                >
                                                                                                  <ForwardRef(CloseIcon)
                                                                                                    fontSize="small"
                                                                                                  >
                                                                                                    <WithStyles(ForwardRef(SvgIcon))
                                                                                                      fontSize="small"
                                                                                                    >
                                                                                                      <ForwardRef(SvgIcon)
                                                                                                        classes={
                                                                                                          Object {
                                                                                                            "colorAction": "standalone-selector--selector-single-MuiSvgIcon-colorAction",
                                                                                                            "colorDisabled": "standalone-selector--selector-single-MuiSvgIcon-colorDisabled",
                                                                                                            "colorError": "standalone-selector--selector-single-MuiSvgIcon-colorError",
                                                                                                            "colorPrimary": "standalone-selector--selector-single-MuiSvgIcon-colorPrimary",
                                                                                                            "colorSecondary": "standalone-selector--selector-single-MuiSvgIcon-colorSecondary",
                                                                                                            "fontSizeInherit": "standalone-selector--selector-single-MuiSvgIcon-fontSizeInherit",
                                                                                                            "fontSizeLarge": "standalone-selector--selector-single-MuiSvgIcon-fontSizeLarge",
                                                                                                            "fontSizeSmall": "standalone-selector--selector-single-MuiSvgIcon-fontSizeSmall",
                                                                                                            "root": "standalone-selector--selector-single-MuiSvgIcon-root",
                                                                                                          }
                                                                                                        }
                                                                                                        fontSize="small"
                                                                                                      >
                                                                                                        <svg
                                                                                                          aria-hidden={true}
                                                                                                          className="standalone-selector--selector-single-MuiSvgIcon-root standalone-selector--selector-single-MuiSvgIcon-fontSizeSmall"
                                                                                                          focusable="false"
                                                                                                          viewBox="0 0 24 24"
                                                                                                        >
                                                                                                          <path
                                                                                                            d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                                                                                                          />
                                                                                                        </svg>
                                                                                                      </ForwardRef(SvgIcon)>
                                                                                                    </WithStyles(ForwardRef(SvgIcon))>
                                                                                                  </ForwardRef(CloseIcon)>
                                                                                                </span>
                                                                                                <WithStyles(memo)
                                                                                                  center={true}
                                                                                                >
                                                                                                  <ForwardRef(TouchRipple)
                                                                                                    center={true}
                                                                                                    classes={
                                                                                                      Object {
                                                                                                        "child": "standalone-selector--selector-single-MuiTouchRipple-child",
                                                                                                        "childLeaving": "standalone-selector--selector-single-MuiTouchRipple-childLeaving",
                                                                                                        "childPulsate": "standalone-selector--selector-single-MuiTouchRipple-childPulsate",
                                                                                                        "ripple": "standalone-selector--selector-single-MuiTouchRipple-ripple",
                                                                                                        "ripplePulsate": "standalone-selector--selector-single-MuiTouchRipple-ripplePulsate",
                                                                                                        "rippleVisible": "standalone-selector--selector-single-MuiTouchRipple-rippleVisible",
                                                                                                        "root": "standalone-selector--selector-single-MuiTouchRipple-root",
                                                                                                      }
                                                                                                    }
                                                                                                  >
                                                                                                    <span
                                                                                                      className="standalone-selector--selector-single-MuiTouchRipple-root"
                                                                                                    >
                                                                                                      <TransitionGroup
                                                                                                        childFactory={[Function]}
                                                                                                        component={null}
                                                                                                        exit={true}
                                                                                                      />
                                                                                                    </span>
                                                                                                  </ForwardRef(TouchRipple)>
                                                                                                </WithStyles(memo)>
                                                                                              </button>
                                                                                            </ForwardRef(ButtonBase)>
                                                                                          </WithStyles(ForwardRef(ButtonBase))>
                                                                                        </ForwardRef(IconButton)>
                                                                                      </WithStyles(ForwardRef(IconButton))>
                                                                                      <WithStyles(ForwardRef(IconButton))
                                                                                        aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                        className="standalone-selector--selector-single-MuiAutocomplete-popupIndicator"
                                                                                        disabled={false}
                                                                                        onClick={[Function]}
                                                                                        tabIndex={-1}
                                                                                        title="standalone.selector.base-selector.open-icon-text"
                                                                                      >
                                                                                        <ForwardRef(IconButton)
                                                                                          aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                          className="standalone-selector--selector-single-MuiAutocomplete-popupIndicator"
                                                                                          classes={
                                                                                            Object {
                                                                                              "colorInherit": "standalone-selector--selector-single-MuiIconButton-colorInherit",
                                                                                              "colorPrimary": "standalone-selector--selector-single-MuiIconButton-colorPrimary",
                                                                                              "colorSecondary": "standalone-selector--selector-single-MuiIconButton-colorSecondary",
                                                                                              "disabled": "Mui-disabled",
                                                                                              "edgeEnd": "standalone-selector--selector-single-MuiIconButton-edgeEnd",
                                                                                              "edgeStart": "standalone-selector--selector-single-MuiIconButton-edgeStart",
                                                                                              "label": "standalone-selector--selector-single-MuiIconButton-label",
                                                                                              "root": "standalone-selector--selector-single-MuiIconButton-root",
                                                                                              "sizeSmall": "standalone-selector--selector-single-MuiIconButton-sizeSmall",
                                                                                            }
                                                                                          }
                                                                                          disabled={false}
                                                                                          onClick={[Function]}
                                                                                          tabIndex={-1}
                                                                                          title="standalone.selector.base-selector.open-icon-text"
                                                                                        >
                                                                                          <WithStyles(ForwardRef(ButtonBase))
                                                                                            aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                            centerRipple={true}
                                                                                            className="standalone-selector--selector-single-MuiIconButton-root standalone-selector--selector-single-MuiAutocomplete-popupIndicator"
                                                                                            disabled={false}
                                                                                            focusRipple={true}
                                                                                            onClick={[Function]}
                                                                                            tabIndex={-1}
                                                                                            title="standalone.selector.base-selector.open-icon-text"
                                                                                          >
                                                                                            <ForwardRef(ButtonBase)
                                                                                              aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                              centerRipple={true}
                                                                                              className="standalone-selector--selector-single-MuiIconButton-root standalone-selector--selector-single-MuiAutocomplete-popupIndicator"
                                                                                              classes={
                                                                                                Object {
                                                                                                  "disabled": "Mui-disabled",
                                                                                                  "focusVisible": "Mui-focusVisible",
                                                                                                  "root": "standalone-selector--selector-single-MuiButtonBase-root",
                                                                                                }
                                                                                              }
                                                                                              disabled={false}
                                                                                              focusRipple={true}
                                                                                              onClick={[Function]}
                                                                                              tabIndex={-1}
                                                                                              title="standalone.selector.base-selector.open-icon-text"
                                                                                            >
                                                                                              <button
                                                                                                aria-label="standalone.selector.base-selector.open-icon-text"
                                                                                                className="standalone-selector--selector-single-MuiButtonBase-root standalone-selector--selector-single-MuiIconButton-root standalone-selector--selector-single-MuiAutocomplete-popupIndicator"
                                                                                                disabled={false}
                                                                                                onBlur={[Function]}
                                                                                                onClick={[Function]}
                                                                                                onDragLeave={[Function]}
                                                                                                onFocus={[Function]}
                                                                                                onKeyDown={[Function]}
                                                                                                onKeyUp={[Function]}
                                                                                                onMouseDown={[Function]}
                                                                                                onMouseLeave={[Function]}
                                                                                                onMouseUp={[Function]}
                                                                                                onTouchEnd={[Function]}
                                                                                                onTouchMove={[Function]}
                                                                                                onTouchStart={[Function]}
                                                                                                tabIndex={-1}
                                                                                                title="standalone.selector.base-selector.open-icon-text"
                                                                                                type="button"
                                                                                              >
                                                                                                <span
                                                                                                  className="standalone-selector--selector-single-MuiIconButton-label"
                                                                                                >
                                                                                                  <ForwardRef(ExpandMoreIcon)>
                                                                                                    <WithStyles(ForwardRef(SvgIcon))>
                                                                                                      <ForwardRef(SvgIcon)
                                                                                                        classes={
                                                                                                          Object {
                                                                                                            "colorAction": "standalone-selector--selector-single-MuiSvgIcon-colorAction",
                                                                                                            "colorDisabled": "standalone-selector--selector-single-MuiSvgIcon-colorDisabled",
                                                                                                            "colorError": "standalone-selector--selector-single-MuiSvgIcon-colorError",
                                                                                                            "colorPrimary": "standalone-selector--selector-single-MuiSvgIcon-colorPrimary",
                                                                                                            "colorSecondary": "standalone-selector--selector-single-MuiSvgIcon-colorSecondary",
                                                                                                            "fontSizeInherit": "standalone-selector--selector-single-MuiSvgIcon-fontSizeInherit",
                                                                                                            "fontSizeLarge": "standalone-selector--selector-single-MuiSvgIcon-fontSizeLarge",
                                                                                                            "fontSizeSmall": "standalone-selector--selector-single-MuiSvgIcon-fontSizeSmall",
                                                                                                            "root": "standalone-selector--selector-single-MuiSvgIcon-root",
                                                                                                          }
                                                                                                        }
                                                                                                      >
                                                                                                        <svg
                                                                                                          aria-hidden={true}
                                                                                                          className="standalone-selector--selector-single-MuiSvgIcon-root"
                                                                                                          focusable="false"
                                                                                                          viewBox="0 0 24 24"
                                                                                                        >
                                                                                                          <path
                                                                                                            d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
                                                                                                          />
                                                                                                        </svg>
                                                                                                      </ForwardRef(SvgIcon)>
                                                                                                    </WithStyles(ForwardRef(SvgIcon))>
                                                                                                  </ForwardRef(ExpandMoreIcon)>
                                                                                                </span>
                                                                                                <WithStyles(memo)
                                                                                                  center={true}
                                                                                                >
                                                                                                  <ForwardRef(TouchRipple)
                                                                                                    center={true}
                                                                                                    classes={
                                                                                                      Object {
                                                                                                        "child": "standalone-selector--selector-single-MuiTouchRipple-child",
                                                                                                        "childLeaving": "standalone-selector--selector-single-MuiTouchRipple-childLeaving",
                                                                                                        "childPulsate": "standalone-selector--selector-single-MuiTouchRipple-childPulsate",
                                                                                                        "ripple": "standalone-selector--selector-single-MuiTouchRipple-ripple",
                                                                                                        "ripplePulsate": "standalone-selector--selector-single-MuiTouchRipple-ripplePulsate",
                                                                                                        "rippleVisible": "standalone-selector--selector-single-MuiTouchRipple-rippleVisible",
                                                                                                        "root": "standalone-selector--selector-single-MuiTouchRipple-root",
                                                                                                      }
                                                                                                    }
                                                                                                  >
                                                                                                    <span
                                                                                                      className="standalone-selector--selector-single-MuiTouchRipple-root"
                                                                                                    >
                                                                                                      <TransitionGroup
                                                                                                        childFactory={[Function]}
                                                                                                        component={null}
                                                                                                        exit={true}
                                                                                                      />
                                                                                                    </span>
                                                                                                  </ForwardRef(TouchRipple)>
                                                                                                </WithStyles(memo)>
                                                                                              </button>
                                                                                            </ForwardRef(ButtonBase)>
                                                                                          </WithStyles(ForwardRef(ButtonBase))>
                                                                                        </ForwardRef(IconButton)>
                                                                                      </WithStyles(ForwardRef(IconButton))>
                                                                                      <WithStyles(ForwardRef(IconButton))
                                                                                        className="standalone-selector--selector-single-CcBaseSelectorCustom-infoBtn-19"
                                                                                        onClick={[Function]}
                                                                                      >
                                                                                        <ForwardRef(IconButton)
                                                                                          className="standalone-selector--selector-single-CcBaseSelectorCustom-infoBtn-19"
                                                                                          classes={
                                                                                            Object {
                                                                                              "colorInherit": "standalone-selector--selector-single-MuiIconButton-colorInherit",
                                                                                              "colorPrimary": "standalone-selector--selector-single-MuiIconButton-colorPrimary",
                                                                                              "colorSecondary": "standalone-selector--selector-single-MuiIconButton-colorSecondary",
                                                                                              "disabled": "Mui-disabled",
                                                                                              "edgeEnd": "standalone-selector--selector-single-MuiIconButton-edgeEnd",
                                                                                              "edgeStart": "standalone-selector--selector-single-MuiIconButton-edgeStart",
                                                                                              "label": "standalone-selector--selector-single-MuiIconButton-label",
                                                                                              "root": "standalone-selector--selector-single-MuiIconButton-root",
                                                                                              "sizeSmall": "standalone-selector--selector-single-MuiIconButton-sizeSmall",
                                                                                            }
                                                                                          }
                                                                                          onClick={[Function]}
                                                                                        >
                                                                                          <WithStyles(ForwardRef(ButtonBase))
                                                                                            centerRipple={true}
                                                                                            className="standalone-selector--selector-single-MuiIconButton-root standalone-selector--selector-single-CcBaseSelectorCustom-infoBtn-19"
                                                                                            disabled={false}
                                                                                            focusRipple={true}
                                                                                            onClick={[Function]}
                                                                                          >
                                                                                            <ForwardRef(ButtonBase)
                                                                                              centerRipple={true}
                                                                                              className="standalone-selector--selector-single-MuiIconButton-root standalone-selector--selector-single-CcBaseSelectorCustom-infoBtn-19"
                                                                                              classes={
                                                                                                Object {
                                                                                                  "disabled": "Mui-disabled",
                                                                                                  "focusVisible": "Mui-focusVisible",
                                                                                                  "root": "standalone-selector--selector-single-MuiButtonBase-root",
                                                                                                }
                                                                                              }
                                                                                              disabled={false}
                                                                                              focusRipple={true}
                                                                                              onClick={[Function]}
                                                                                            >
                                                                                              <button
                                                                                                className="standalone-selector--selector-single-MuiButtonBase-root standalone-selector--selector-single-MuiIconButton-root standalone-selector--selector-single-CcBaseSelectorCustom-infoBtn-19"
                                                                                                disabled={false}
                                                                                                onBlur={[Function]}
                                                                                                onClick={[Function]}
                                                                                                onDragLeave={[Function]}
                                                                                                onFocus={[Function]}
                                                                                                onKeyDown={[Function]}
                                                                                                onKeyUp={[Function]}
                                                                                                onMouseDown={[Function]}
                                                                                                onMouseLeave={[Function]}
                                                                                                onMouseUp={[Function]}
                                                                                                onTouchEnd={[Function]}
                                                                                                onTouchMove={[Function]}
                                                                                                onTouchStart={[Function]}
                                                                                                tabIndex={0}
                                                                                                type="button"
                                                                                              >
                                                                                                <span
                                                                                                  className="standalone-selector--selector-single-MuiIconButton-label"
                                                                                                >
                                                                                                  <ForwardRef(InfoIcon)
                                                                                                    color="disabled"
                                                                                                  >
                                                                                                    <WithStyles(ForwardRef(SvgIcon))
                                                                                                      color="disabled"
                                                                                                    >
                                                                                                      <ForwardRef(SvgIcon)
                                                                                                        classes={
                                                                                                          Object {
                                                                                                            "colorAction": "standalone-selector--selector-single-MuiSvgIcon-colorAction",
                                                                                                            "colorDisabled": "standalone-selector--selector-single-MuiSvgIcon-colorDisabled",
                                                                                                            "colorError": "standalone-selector--selector-single-MuiSvgIcon-colorError",
                                                                                                            "colorPrimary": "standalone-selector--selector-single-MuiSvgIcon-colorPrimary",
                                                                                                            "colorSecondary": "standalone-selector--selector-single-MuiSvgIcon-colorSecondary",
                                                                                                            "fontSizeInherit": "standalone-selector--selector-single-MuiSvgIcon-fontSizeInherit",
                                                                                                            "fontSizeLarge": "standalone-selector--selector-single-MuiSvgIcon-fontSizeLarge",
                                                                                                            "fontSizeSmall": "standalone-selector--selector-single-MuiSvgIcon-fontSizeSmall",
                                                                                                            "root": "standalone-selector--selector-single-MuiSvgIcon-root",
                                                                                                          }
                                                                                                        }
                                                                                                        color="disabled"
                                                                                                      >
                                                                                                        <svg
                                                                                                          aria-hidden={true}
                                                                                                          className="standalone-selector--selector-single-MuiSvgIcon-root standalone-selector--selector-single-MuiSvgIcon-colorDisabled"
                                                                                                          focusable="false"
                                                                                                          viewBox="0 0 24 24"
                                                                                                        >
                                                                                                          <path
                                                                                                            d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"
                                                                                                          />
                                                                                                        </svg>
                                                                                                      </ForwardRef(SvgIcon)>
                                                                                                    </WithStyles(ForwardRef(SvgIcon))>
                                                                                                  </ForwardRef(InfoIcon)>
                                                                                                </span>
                                                                                                <WithStyles(memo)
                                                                                                  center={true}
                                                                                                >
                                                                                                  <ForwardRef(TouchRipple)
                                                                                                    center={true}
                                                                                                    classes={
                                                                                                      Object {
                                                                                                        "child": "standalone-selector--selector-single-MuiTouchRipple-child",
                                                                                                        "childLeaving": "standalone-selector--selector-single-MuiTouchRipple-childLeaving",
                                                                                                        "childPulsate": "standalone-selector--selector-single-MuiTouchRipple-childPulsate",
                                                                                                        "ripple": "standalone-selector--selector-single-MuiTouchRipple-ripple",
                                                                                                        "ripplePulsate": "standalone-selector--selector-single-MuiTouchRipple-ripplePulsate",
                                                                                                        "rippleVisible": "standalone-selector--selector-single-MuiTouchRipple-rippleVisible",
                                                                                                        "root": "standalone-selector--selector-single-MuiTouchRipple-root",
                                                                                                      }
                                                                                                    }
                                                                                                  >
                                                                                                    <span
                                                                                                      className="standalone-selector--selector-single-MuiTouchRipple-root"
                                                                                                    >
                                                                                                      <TransitionGroup
                                                                                                        childFactory={[Function]}
                                                                                                        component={null}
                                                                                                        exit={true}
                                                                                                      />
                                                                                                    </span>
                                                                                                  </ForwardRef(TouchRipple)>
                                                                                                </WithStyles(memo)>
                                                                                              </button>
                                                                                            </ForwardRef(ButtonBase)>
                                                                                          </WithStyles(ForwardRef(ButtonBase))>
                                                                                        </ForwardRef(IconButton)>
                                                                                      </WithStyles(ForwardRef(IconButton))>
                                                                                    </div>
                                                                                    <WithStyles(ForwardRef(NotchedOutline))
                                                                                      className="standalone-selector--selector-single-MuiOutlinedInput-notchedOutline"
                                                                                      labelWidth={0}
                                                                                      notched={false}
                                                                                    >
                                                                                      <ForwardRef(NotchedOutline)
                                                                                        className="standalone-selector--selector-single-MuiOutlinedInput-notchedOutline"
                                                                                        classes={
                                                                                          Object {
                                                                                            "legend": "standalone-selector--selector-single-PrivateNotchedOutline-legend-32",
                                                                                            "legendLabelled": "standalone-selector--selector-single-PrivateNotchedOutline-legendLabelled-33",
                                                                                            "legendNotched": "standalone-selector--selector-single-PrivateNotchedOutline-legendNotched-34",
                                                                                            "root": "standalone-selector--selector-single-PrivateNotchedOutline-root-31",
                                                                                          }
                                                                                        }
                                                                                        labelWidth={0}
                                                                                        notched={false}
                                                                                      >
                                                                                        <fieldset
                                                                                          aria-hidden={true}
                                                                                          className="standalone-selector--selector-single-PrivateNotchedOutline-root-31 standalone-selector--selector-single-MuiOutlinedInput-notchedOutline"
                                                                                          style={
                                                                                            Object {
                                                                                              "paddingLeft": 8,
                                                                                            }
                                                                                          }
                                                                                        >
                                                                                          <legend
                                                                                            className="standalone-selector--selector-single-PrivateNotchedOutline-legend-32"
                                                                                            style={
                                                                                              Object {
                                                                                                "width": 0.01,
                                                                                              }
                                                                                            }
                                                                                          >
                                                                                            <span
                                                                                              dangerouslySetInnerHTML={
                                                                                                Object {
                                                                                                  "__html": "&#8203;",
                                                                                                }
                                                                                              }
                                                                                            />
                                                                                          </legend>
                                                                                        </fieldset>
                                                                                      </ForwardRef(NotchedOutline)>
                                                                                    </WithStyles(ForwardRef(NotchedOutline))>
                                                                                  </div>
                                                                                </ForwardRef(InputBase)>
                                                                              </WithStyles(ForwardRef(InputBase))>
                                                                            </ForwardRef(OutlinedInput)>
                                                                          </WithStyles(ForwardRef(OutlinedInput))>
                                                                        </ForwardRef>
                                                                      </div>
                                                                    </ForwardRef(Autocomplete)>
                                                                  </WithStyles(ForwardRef(Autocomplete))>
                                                                </div>
                                                              </ForwardRef(Paper)>
                                                            </WithStyles(ForwardRef(Paper))>
                                                          </div>
                                                        </ForwardRef(Typography)>
                                                      </WithStyles(ForwardRef(Typography))>
                                                    </div>
                                                  </ForwardRef(Typography)>
                                                </WithStyles(ForwardRef(Typography))>
                                              </Memo(InlineSwitch)>
                                            </Memo(BaseSelector)>
                                          </Memo(SingleSelect)>
                                        </fieldset>
                                      </ForwardRef(FormControl)>
                                    </WithStyles(ForwardRef(FormControl))>
                                  </div>
                                </Styled(MuiBox)>
                              </Component>
                            </StylesProvider>
                          </AdvThemeSelector>
                        </ThemeSelector>
                      </Memo(DialogContextProvider)>
                    </Router>
                  </Memo(PermissionContextProvider)>
                </QueryClientProvider>
              </ThemeProvider>
            </Memo(ThemeProvider)>
          </MuiPickersUtilsProvider>
        </Memo(MuiPickerUtils)>
      </I18nextProvider>
    </Memo(CCI18nProvider)>
  </Suspense>
</Memo(ComponentsCareFramework)>
`;
